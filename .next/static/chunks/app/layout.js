/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CAuditLogContext.tsx%22%2C%22ids%22%3A%5B%22AuditLogProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CAuthContext.tsx%22%2C%22ids%22%3A%5B%22AuthProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CClientContext.tsx%22%2C%22ids%22%3A%5B%22ClientProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CFinanceContext.tsx%22%2C%22ids%22%3A%5B%22FinanceProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CProjectContext.tsx%22%2C%22ids%22%3A%5B%22ProjectProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CPurchaseOrderContext.tsx%22%2C%22ids%22%3A%5B%22PurchaseOrderProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CQuotationContext.tsx%22%2C%22ids%22%3A%5B%22QuotationProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CReportsContext.tsx%22%2C%22ids%22%3A%5B%22ReportsProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CSettingsContext.tsx%22%2C%22ids%22%3A%5B%22SettingsProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CTenderContext.tsx%22%2C%22ids%22%3A%5B%22TenderProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CUserContext.tsx%22%2C%22ids%22%3A%5B%22UserProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CVendorContext.tsx%22%2C%22ids%22%3A%5B%22VendorProvider%22%5D%7D&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CAuditLogContext.tsx%22%2C%22ids%22%3A%5B%22AuditLogProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CAuthContext.tsx%22%2C%22ids%22%3A%5B%22AuthProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CClientContext.tsx%22%2C%22ids%22%3A%5B%22ClientProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CFinanceContext.tsx%22%2C%22ids%22%3A%5B%22FinanceProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CProjectContext.tsx%22%2C%22ids%22%3A%5B%22ProjectProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CPurchaseOrderContext.tsx%22%2C%22ids%22%3A%5B%22PurchaseOrderProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CQuotationContext.tsx%22%2C%22ids%22%3A%5B%22QuotationProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CReportsContext.tsx%22%2C%22ids%22%3A%5B%22ReportsProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CSettingsContext.tsx%22%2C%22ids%22%3A%5B%22SettingsProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CTenderContext.tsx%22%2C%22ids%22%3A%5B%22TenderProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CUserContext.tsx%22%2C%22ids%22%3A%5B%22UserProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CVendorContext.tsx%22%2C%22ids%22%3A%5B%22VendorProvider%22%5D%7D&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/font/google/target.css?{\"path\":\"src\\\\app\\\\layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"} */ \"(app-pages-browser)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"src\\\\\\\\app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Inter\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"inter\\\"}\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/globals.css */ \"(app-pages-browser)/./src/app/globals.css\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/contexts/AuditLogContext.tsx */ \"(app-pages-browser)/./src/contexts/AuditLogContext.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/contexts/AuthContext.tsx */ \"(app-pages-browser)/./src/contexts/AuthContext.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/contexts/ClientContext.tsx */ \"(app-pages-browser)/./src/contexts/ClientContext.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/contexts/FinanceContext.tsx */ \"(app-pages-browser)/./src/contexts/FinanceContext.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/contexts/ProjectContext.tsx */ \"(app-pages-browser)/./src/contexts/ProjectContext.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/contexts/PurchaseOrderContext.tsx */ \"(app-pages-browser)/./src/contexts/PurchaseOrderContext.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/contexts/QuotationContext.tsx */ \"(app-pages-browser)/./src/contexts/QuotationContext.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/contexts/ReportsContext.tsx */ \"(app-pages-browser)/./src/contexts/ReportsContext.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/contexts/SettingsContext.tsx */ \"(app-pages-browser)/./src/contexts/SettingsContext.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/contexts/TenderContext.tsx */ \"(app-pages-browser)/./src/contexts/TenderContext.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/contexts/UserContext.tsx */ \"(app-pages-browser)/./src/contexts/UserContext.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/contexts/VendorContext.tsx */ \"(app-pages-browser)/./src/contexts/VendorContext.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDc3RhbW0lNUMlNUNBTVBFUkUlMjBXRUJBUFAlNUMlNUNub2RlX21vZHVsZXMlNUMlNUNuZXh0JTVDJTVDZm9udCU1QyU1Q2dvb2dsZSU1QyU1Q3RhcmdldC5jc3MlM0YlN0IlNUMlMjJwYXRoJTVDJTIyJTNBJTVDJTIyc3JjJTVDJTVDJTVDJTVDYXBwJTVDJTVDJTVDJTVDbGF5b3V0LnRzeCU1QyUyMiUyQyU1QyUyMmltcG9ydCU1QyUyMiUzQSU1QyUyMkludGVyJTVDJTIyJTJDJTVDJTIyYXJndW1lbnRzJTVDJTIyJTNBJTVCJTdCJTVDJTIyc3Vic2V0cyU1QyUyMiUzQSU1QiU1QyUyMmxhdGluJTVDJTIyJTVEJTdEJTVEJTJDJTVDJTIydmFyaWFibGVOYW1lJTVDJTIyJTNBJTVDJTIyaW50ZXIlNUMlMjIlN0QlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDc3RhbW0lNUMlNUNBTVBFUkUlMjBXRUJBUFAlNUMlNUNzcmMlNUMlNUNhcHAlNUMlNUNnbG9iYWxzLmNzcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjJDJTNBJTVDJTVDVXNlcnMlNUMlNUNzdGFtbSU1QyU1Q0FNUEVSRSUyMFdFQkFQUCU1QyU1Q3NyYyU1QyU1Q2NvbnRleHRzJTVDJTVDQXVkaXRMb2dDb250ZXh0LnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiUyMkF1ZGl0TG9nUHJvdmlkZXIlMjIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDc3RhbW0lNUMlNUNBTVBFUkUlMjBXRUJBUFAlNUMlNUNzcmMlNUMlNUNjb250ZXh0cyU1QyU1Q0F1dGhDb250ZXh0LnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiUyMkF1dGhQcm92aWRlciUyMiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjJDJTNBJTVDJTVDVXNlcnMlNUMlNUNzdGFtbSU1QyU1Q0FNUEVSRSUyMFdFQkFQUCU1QyU1Q3NyYyU1QyU1Q2NvbnRleHRzJTVDJTVDQ2xpZW50Q29udGV4dC50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlMjJDbGllbnRQcm92aWRlciUyMiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjJDJTNBJTVDJTVDVXNlcnMlNUMlNUNzdGFtbSU1QyU1Q0FNUEVSRSUyMFdFQkFQUCU1QyU1Q3NyYyU1QyU1Q2NvbnRleHRzJTVDJTVDRmluYW5jZUNvbnRleHQudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTIyRmluYW5jZVByb3ZpZGVyJTIyJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q3N0YW1tJTVDJTVDQU1QRVJFJTIwV0VCQVBQJTVDJTVDc3JjJTVDJTVDY29udGV4dHMlNUMlNUNQcm9qZWN0Q29udGV4dC50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlMjJQcm9qZWN0UHJvdmlkZXIlMjIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDc3RhbW0lNUMlNUNBTVBFUkUlMjBXRUJBUFAlNUMlNUNzcmMlNUMlNUNjb250ZXh0cyU1QyU1Q1B1cmNoYXNlT3JkZXJDb250ZXh0LnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiUyMlB1cmNoYXNlT3JkZXJQcm92aWRlciUyMiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjJDJTNBJTVDJTVDVXNlcnMlNUMlNUNzdGFtbSU1QyU1Q0FNUEVSRSUyMFdFQkFQUCU1QyU1Q3NyYyU1QyU1Q2NvbnRleHRzJTVDJTVDUXVvdGF0aW9uQ29udGV4dC50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlMjJRdW90YXRpb25Qcm92aWRlciUyMiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjJDJTNBJTVDJTVDVXNlcnMlNUMlNUNzdGFtbSU1QyU1Q0FNUEVSRSUyMFdFQkFQUCU1QyU1Q3NyYyU1QyU1Q2NvbnRleHRzJTVDJTVDUmVwb3J0c0NvbnRleHQudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTIyUmVwb3J0c1Byb3ZpZGVyJTIyJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q3N0YW1tJTVDJTVDQU1QRVJFJTIwV0VCQVBQJTVDJTVDc3JjJTVDJTVDY29udGV4dHMlNUMlNUNTZXR0aW5nc0NvbnRleHQudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTIyU2V0dGluZ3NQcm92aWRlciUyMiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjJDJTNBJTVDJTVDVXNlcnMlNUMlNUNzdGFtbSU1QyU1Q0FNUEVSRSUyMFdFQkFQUCU1QyU1Q3NyYyU1QyU1Q2NvbnRleHRzJTVDJTVDVGVuZGVyQ29udGV4dC50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlMjJUZW5kZXJQcm92aWRlciUyMiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjJDJTNBJTVDJTVDVXNlcnMlNUMlNUNzdGFtbSU1QyU1Q0FNUEVSRSUyMFdFQkFQUCU1QyU1Q3NyYyU1QyU1Q2NvbnRleHRzJTVDJTVDVXNlckNvbnRleHQudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTIyVXNlclByb3ZpZGVyJTIyJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMkMlM0ElNUMlNUNVc2VycyU1QyU1Q3N0YW1tJTVDJTVDQU1QRVJFJTIwV0VCQVBQJTVDJTVDc3JjJTVDJTVDY29udGV4dHMlNUMlNUNWZW5kb3JDb250ZXh0LnRzeCUyMiUyQyUyMmlkcyUyMiUzQSU1QiUyMlZlbmRvclByb3ZpZGVyJTIyJTVEJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsa2NBQW9QO0FBQ3BQO0FBQ0Esb0tBQTJGO0FBQzNGO0FBQ0EsOExBQThJO0FBQzlJO0FBQ0Esc0xBQXNJO0FBQ3RJO0FBQ0EsMExBQTBJO0FBQzFJO0FBQ0EsNExBQTRJO0FBQzVJO0FBQ0EsNExBQTRJO0FBQzVJO0FBQ0Esd01BQXdKO0FBQ3hKO0FBQ0EsZ01BQWdKO0FBQ2hKO0FBQ0EsNExBQTRJO0FBQzVJO0FBQ0EsOExBQThJO0FBQzlJO0FBQ0EsMExBQTBJO0FBQzFJO0FBQ0Esc0xBQXNJO0FBQ3RJO0FBQ0EsMExBQTBJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/ZDE1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkM6XFxcXFVzZXJzXFxcXHN0YW1tXFxcXEFNUEVSRSBXRUJBUFBcXFxcbm9kZV9tb2R1bGVzXFxcXG5leHRcXFxcZm9udFxcXFxnb29nbGVcXFxcdGFyZ2V0LmNzcz97XFxcInBhdGhcXFwiOlxcXCJzcmNcXFxcXFxcXGFwcFxcXFxcXFxcbGF5b3V0LnRzeFxcXCIsXFxcImltcG9ydFxcXCI6XFxcIkludGVyXFxcIixcXFwiYXJndW1lbnRzXFxcIjpbe1xcXCJzdWJzZXRzXFxcIjpbXFxcImxhdGluXFxcIl19XSxcXFwidmFyaWFibGVOYW1lXFxcIjpcXFwiaW50ZXJcXFwifVwiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcc3RhbW1cXFxcQU1QRVJFIFdFQkFQUFxcXFxzcmNcXFxcYXBwXFxcXGdsb2JhbHMuY3NzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJBdWRpdExvZ1Byb3ZpZGVyXCJdICovIFwiQzpcXFxcVXNlcnNcXFxcc3RhbW1cXFxcQU1QRVJFIFdFQkFQUFxcXFxzcmNcXFxcY29udGV4dHNcXFxcQXVkaXRMb2dDb250ZXh0LnRzeFwiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiLCB3ZWJwYWNrRXhwb3J0czogW1wiQXV0aFByb3ZpZGVyXCJdICovIFwiQzpcXFxcVXNlcnNcXFxcc3RhbW1cXFxcQU1QRVJFIFdFQkFQUFxcXFxzcmNcXFxcY29udGV4dHNcXFxcQXV0aENvbnRleHQudHN4XCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJDbGllbnRQcm92aWRlclwiXSAqLyBcIkM6XFxcXFVzZXJzXFxcXHN0YW1tXFxcXEFNUEVSRSBXRUJBUFBcXFxcc3JjXFxcXGNvbnRleHRzXFxcXENsaWVudENvbnRleHQudHN4XCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJGaW5hbmNlUHJvdmlkZXJcIl0gKi8gXCJDOlxcXFxVc2Vyc1xcXFxzdGFtbVxcXFxBTVBFUkUgV0VCQVBQXFxcXHNyY1xcXFxjb250ZXh0c1xcXFxGaW5hbmNlQ29udGV4dC50c3hcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiwgd2VicGFja0V4cG9ydHM6IFtcIlByb2plY3RQcm92aWRlclwiXSAqLyBcIkM6XFxcXFVzZXJzXFxcXHN0YW1tXFxcXEFNUEVSRSBXRUJBUFBcXFxcc3JjXFxcXGNvbnRleHRzXFxcXFByb2plY3RDb250ZXh0LnRzeFwiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiLCB3ZWJwYWNrRXhwb3J0czogW1wiUHVyY2hhc2VPcmRlclByb3ZpZGVyXCJdICovIFwiQzpcXFxcVXNlcnNcXFxcc3RhbW1cXFxcQU1QRVJFIFdFQkFQUFxcXFxzcmNcXFxcY29udGV4dHNcXFxcUHVyY2hhc2VPcmRlckNvbnRleHQudHN4XCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJRdW90YXRpb25Qcm92aWRlclwiXSAqLyBcIkM6XFxcXFVzZXJzXFxcXHN0YW1tXFxcXEFNUEVSRSBXRUJBUFBcXFxcc3JjXFxcXGNvbnRleHRzXFxcXFF1b3RhdGlvbkNvbnRleHQudHN4XCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJSZXBvcnRzUHJvdmlkZXJcIl0gKi8gXCJDOlxcXFxVc2Vyc1xcXFxzdGFtbVxcXFxBTVBFUkUgV0VCQVBQXFxcXHNyY1xcXFxjb250ZXh0c1xcXFxSZXBvcnRzQ29udGV4dC50c3hcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiwgd2VicGFja0V4cG9ydHM6IFtcIlNldHRpbmdzUHJvdmlkZXJcIl0gKi8gXCJDOlxcXFxVc2Vyc1xcXFxzdGFtbVxcXFxBTVBFUkUgV0VCQVBQXFxcXHNyY1xcXFxjb250ZXh0c1xcXFxTZXR0aW5nc0NvbnRleHQudHN4XCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJUZW5kZXJQcm92aWRlclwiXSAqLyBcIkM6XFxcXFVzZXJzXFxcXHN0YW1tXFxcXEFNUEVSRSBXRUJBUFBcXFxcc3JjXFxcXGNvbnRleHRzXFxcXFRlbmRlckNvbnRleHQudHN4XCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJVc2VyUHJvdmlkZXJcIl0gKi8gXCJDOlxcXFxVc2Vyc1xcXFxzdGFtbVxcXFxBTVBFUkUgV0VCQVBQXFxcXHNyY1xcXFxjb250ZXh0c1xcXFxVc2VyQ29udGV4dC50c3hcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiwgd2VicGFja0V4cG9ydHM6IFtcIlZlbmRvclByb3ZpZGVyXCJdICovIFwiQzpcXFxcVXNlcnNcXFxcc3RhbW1cXFxcQU1QRVJFIFdFQkFQUFxcXFxzcmNcXFxcY29udGV4dHNcXFxcVmVuZG9yQ29udGV4dC50c3hcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CAuditLogContext.tsx%22%2C%22ids%22%3A%5B%22AuditLogProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CAuthContext.tsx%22%2C%22ids%22%3A%5B%22AuthProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CClientContext.tsx%22%2C%22ids%22%3A%5B%22ClientProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CFinanceContext.tsx%22%2C%22ids%22%3A%5B%22FinanceProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CProjectContext.tsx%22%2C%22ids%22%3A%5B%22ProjectProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CPurchaseOrderContext.tsx%22%2C%22ids%22%3A%5B%22PurchaseOrderProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CQuotationContext.tsx%22%2C%22ids%22%3A%5B%22QuotationProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CReportsContext.tsx%22%2C%22ids%22%3A%5B%22ReportsProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CSettingsContext.tsx%22%2C%22ids%22%3A%5B%22SettingsProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CTenderContext.tsx%22%2C%22ids%22%3A%5B%22TenderProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CUserContext.tsx%22%2C%22ids%22%3A%5B%22UserProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CVendorContext.tsx%22%2C%22ids%22%3A%5B%22VendorProvider%22%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js ***!
  \*********************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(()=>{\"use strict\";var e={592:(e,r,t)=>{var n=t(722);var i=Object.create(null);var a=typeof document===\"undefined\";var o=Array.prototype.forEach;function debounce(e,r){var t=0;return function(){var n=this;var i=arguments;var a=function functionCall(){return e.apply(n,i)};clearTimeout(t);t=setTimeout(a,r)}}function noop(){}function getCurrentScriptUrl(e){var r=i[e];if(!r){if(document.currentScript){r=document.currentScript.src}else{var t=document.getElementsByTagName(\"script\");var a=t[t.length-1];if(a){r=a.src}}i[e]=r}return function(e){if(!r){return null}var t=r.split(/([^\\\\/]+)\\.js$/);var i=t&&t[1];if(!i){return[r.replace(\".js\",\".css\")]}if(!e){return[r.replace(\".js\",\".css\")]}return e.split(\",\").map((function(e){var t=new RegExp(\"\".concat(i,\"\\\\.js$\"),\"g\");return n(r.replace(t,\"\".concat(e.replace(/{fileName}/g,i),\".css\")))}))}}function updateCss(e,r){if(!r){if(!e.href){return}r=e.href.split(\"?\")[0]}if(!isUrlRequest(r)){return}if(e.isLoaded===false){return}if(!r||!(r.indexOf(\".css\")>-1)){return}e.visited=true;var t=e.cloneNode();t.isLoaded=false;t.addEventListener(\"load\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.addEventListener(\"error\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.href=\"\".concat(r,\"?\").concat(Date.now());if(e.nextSibling){e.parentNode.insertBefore(t,e.nextSibling)}else{e.parentNode.appendChild(t)}}function getReloadUrl(e,r){var t;e=n(e,{stripWWW:false});r.some((function(n){if(e.indexOf(r)>-1){t=n}}));return t}function reloadStyle(e){if(!e){return false}var r=document.querySelectorAll(\"link\");var t=false;o.call(r,(function(r){if(!r.href){return}var n=getReloadUrl(r.href,e);if(!isUrlRequest(n)){return}if(r.visited===true){return}if(n){updateCss(r,n);t=true}}));return t}function reloadAll(){var e=document.querySelectorAll(\"link\");o.call(e,(function(e){if(e.visited===true){return}updateCss(e)}))}function isUrlRequest(e){if(!/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(e)){return false}return true}e.exports=function(e,r){if(a){console.log(\"no window.document found, will not HMR CSS\");return noop}var t=getCurrentScriptUrl(e);function update(){var e=t(r.filename);var n=reloadStyle(e);if(r.locals){console.log(\"[HMR] Detected local css modules. Reload all css\");reloadAll();return}if(n){console.log(\"[HMR] css reload %s\",e.join(\" \"))}else{console.log(\"[HMR] Reload all css\");reloadAll()}}return debounce(update,50)}},722:e=>{function normalizeUrl(e){return e.reduce((function(e,r){switch(r){case\"..\":e.pop();break;case\".\":break;default:e.push(r)}return e}),[]).join(\"/\")}e.exports=function(e){e=e.trim();if(/^data:/i.test(e)){return e}var r=e.indexOf(\"//\")!==-1?e.split(\"//\")[0]+\"//\":\"\";var t=e.replace(new RegExp(r,\"i\"),\"\").split(\"/\");var n=t[0].toLowerCase().replace(/\\.$/,\"\");t[0]=\"\";var i=normalizeUrl(t);return r+n+i}}};var r={};function __nccwpck_require__(t){var n=r[t];if(n!==undefined){return n.exports}var i=r[t]={exports:{}};var a=true;try{e[t](i,i.exports,__nccwpck_require__);a=false}finally{if(a)delete r[t]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(592);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLGFBQWEsT0FBTyxjQUFjLGFBQWEsMEJBQTBCLG9DQUFvQyw4QkFBOEIsdUJBQXVCLFFBQVEsa0JBQWtCLFdBQVcsZ0JBQWdCLDhCQUE4QixxQkFBcUIsZ0JBQWdCLG1CQUFtQixpQkFBaUIsZ0NBQWdDLFdBQVcsT0FBTywyQkFBMkIsNkJBQTZCLEtBQUssOENBQThDLG9CQUFvQixNQUFNLFNBQVMsT0FBTyxtQkFBbUIsT0FBTyxZQUFZLGdDQUFnQyxjQUFjLE9BQU8sZ0NBQWdDLE9BQU8sZ0NBQWdDLHFDQUFxQyw0Q0FBNEMsMkNBQTJDLFNBQVMsZ0JBQWdCLElBQUksd0JBQXdCLE9BQU8sWUFBWSxPQUFPLHVCQUF1QixxQkFBcUIsT0FBTyx1QkFBdUIsT0FBTyxnQ0FBZ0MsT0FBTyxlQUFlLG9CQUFvQixpQkFBaUIsc0NBQXNDLGVBQWUsT0FBTyxnQkFBZ0IsNEJBQTRCLEdBQUcsdUNBQXVDLGVBQWUsT0FBTyxnQkFBZ0IsNEJBQTRCLEdBQUcsMkNBQTJDLGtCQUFrQiwyQ0FBMkMsS0FBSyw2QkFBNkIsMkJBQTJCLE1BQU0sT0FBTyxlQUFlLEVBQUUsb0JBQW9CLG9CQUFvQixLQUFLLEdBQUcsU0FBUyx3QkFBd0IsT0FBTyxhQUFhLHdDQUF3QyxZQUFZLHNCQUFzQixZQUFZLE9BQU8sNkJBQTZCLHFCQUFxQixPQUFPLHFCQUFxQixPQUFPLE1BQU0sZUFBZSxRQUFRLEdBQUcsU0FBUyxxQkFBcUIsd0NBQXdDLHNCQUFzQixxQkFBcUIsT0FBTyxhQUFhLEdBQUcseUJBQXlCLHlDQUF5QyxhQUFhLFlBQVksd0JBQXdCLE1BQU0sMERBQTBELFlBQVksNkJBQTZCLGtCQUFrQixvQkFBb0IscUJBQXFCLGFBQWEsZ0VBQWdFLFlBQVksT0FBTyxNQUFNLCtDQUErQyxLQUFLLG9DQUFvQyxhQUFhLDRCQUE0QixTQUFTLHlCQUF5QiwrQkFBK0IsVUFBVSxpQkFBaUIsTUFBTSxjQUFjLGtCQUFrQixTQUFTLGdCQUFnQixzQkFBc0IsV0FBVyxzQkFBc0IsU0FBUyxvREFBb0QsaURBQWlELDJDQUEyQyxRQUFRLHNCQUFzQixnQkFBZ0IsU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssK0JBQStCLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qcz8zMjNjIl0sInNvdXJjZXNDb250ZW50IjpbIigoKT0+e1widXNlIHN0cmljdFwiO3ZhciBlPXs1OTI6KGUscix0KT0+e3ZhciBuPXQoNzIyKTt2YXIgaT1PYmplY3QuY3JlYXRlKG51bGwpO3ZhciBhPXR5cGVvZiBkb2N1bWVudD09PVwidW5kZWZpbmVkXCI7dmFyIG89QXJyYXkucHJvdG90eXBlLmZvckVhY2g7ZnVuY3Rpb24gZGVib3VuY2UoZSxyKXt2YXIgdD0wO3JldHVybiBmdW5jdGlvbigpe3ZhciBuPXRoaXM7dmFyIGk9YXJndW1lbnRzO3ZhciBhPWZ1bmN0aW9uIGZ1bmN0aW9uQ2FsbCgpe3JldHVybiBlLmFwcGx5KG4saSl9O2NsZWFyVGltZW91dCh0KTt0PXNldFRpbWVvdXQoYSxyKX19ZnVuY3Rpb24gbm9vcCgpe31mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0VXJsKGUpe3ZhciByPWlbZV07aWYoIXIpe2lmKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpe3I9ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmN9ZWxzZXt2YXIgdD1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTt2YXIgYT10W3QubGVuZ3RoLTFdO2lmKGEpe3I9YS5zcmN9fWlbZV09cn1yZXR1cm4gZnVuY3Rpb24oZSl7aWYoIXIpe3JldHVybiBudWxsfXZhciB0PXIuc3BsaXQoLyhbXlxcXFwvXSspXFwuanMkLyk7dmFyIGk9dCYmdFsxXTtpZighaSl7cmV0dXJuW3IucmVwbGFjZShcIi5qc1wiLFwiLmNzc1wiKV19aWYoIWUpe3JldHVybltyLnJlcGxhY2UoXCIuanNcIixcIi5jc3NcIildfXJldHVybiBlLnNwbGl0KFwiLFwiKS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBSZWdFeHAoXCJcIi5jb25jYXQoaSxcIlxcXFwuanMkXCIpLFwiZ1wiKTtyZXR1cm4gbihyLnJlcGxhY2UodCxcIlwiLmNvbmNhdChlLnJlcGxhY2UoL3tmaWxlTmFtZX0vZyxpKSxcIi5jc3NcIikpKX0pKX19ZnVuY3Rpb24gdXBkYXRlQ3NzKGUscil7aWYoIXIpe2lmKCFlLmhyZWYpe3JldHVybn1yPWUuaHJlZi5zcGxpdChcIj9cIilbMF19aWYoIWlzVXJsUmVxdWVzdChyKSl7cmV0dXJufWlmKGUuaXNMb2FkZWQ9PT1mYWxzZSl7cmV0dXJufWlmKCFyfHwhKHIuaW5kZXhPZihcIi5jc3NcIik+LTEpKXtyZXR1cm59ZS52aXNpdGVkPXRydWU7dmFyIHQ9ZS5jbG9uZU5vZGUoKTt0LmlzTG9hZGVkPWZhbHNlO3QuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwoZnVuY3Rpb24oKXtpZih0LmlzTG9hZGVkKXtyZXR1cm59dC5pc0xvYWRlZD10cnVlO2UucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKX0pKTt0LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLChmdW5jdGlvbigpe2lmKHQuaXNMb2FkZWQpe3JldHVybn10LmlzTG9hZGVkPXRydWU7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfSkpO3QuaHJlZj1cIlwiLmNvbmNhdChyLFwiP1wiKS5jb25jYXQoRGF0ZS5ub3coKSk7aWYoZS5uZXh0U2libGluZyl7ZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LGUubmV4dFNpYmxpbmcpfWVsc2V7ZS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHQpfX1mdW5jdGlvbiBnZXRSZWxvYWRVcmwoZSxyKXt2YXIgdDtlPW4oZSx7c3RyaXBXV1c6ZmFsc2V9KTtyLnNvbWUoKGZ1bmN0aW9uKG4pe2lmKGUuaW5kZXhPZihyKT4tMSl7dD1ufX0pKTtyZXR1cm4gdH1mdW5jdGlvbiByZWxvYWRTdHlsZShlKXtpZighZSl7cmV0dXJuIGZhbHNlfXZhciByPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaW5rXCIpO3ZhciB0PWZhbHNlO28uY2FsbChyLChmdW5jdGlvbihyKXtpZighci5ocmVmKXtyZXR1cm59dmFyIG49Z2V0UmVsb2FkVXJsKHIuaHJlZixlKTtpZighaXNVcmxSZXF1ZXN0KG4pKXtyZXR1cm59aWYoci52aXNpdGVkPT09dHJ1ZSl7cmV0dXJufWlmKG4pe3VwZGF0ZUNzcyhyLG4pO3Q9dHJ1ZX19KSk7cmV0dXJuIHR9ZnVuY3Rpb24gcmVsb2FkQWxsKCl7dmFyIGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImxpbmtcIik7by5jYWxsKGUsKGZ1bmN0aW9uKGUpe2lmKGUudmlzaXRlZD09PXRydWUpe3JldHVybn11cGRhdGVDc3MoZSl9KSl9ZnVuY3Rpb24gaXNVcmxSZXF1ZXN0KGUpe2lmKCEvXlthLXpBLVpdW2EtekEtWlxcZCtcXC0uXSo6Ly50ZXN0KGUpKXtyZXR1cm4gZmFsc2V9cmV0dXJuIHRydWV9ZS5leHBvcnRzPWZ1bmN0aW9uKGUscil7aWYoYSl7Y29uc29sZS5sb2coXCJubyB3aW5kb3cuZG9jdW1lbnQgZm91bmQsIHdpbGwgbm90IEhNUiBDU1NcIik7cmV0dXJuIG5vb3B9dmFyIHQ9Z2V0Q3VycmVudFNjcmlwdFVybChlKTtmdW5jdGlvbiB1cGRhdGUoKXt2YXIgZT10KHIuZmlsZW5hbWUpO3ZhciBuPXJlbG9hZFN0eWxlKGUpO2lmKHIubG9jYWxzKXtjb25zb2xlLmxvZyhcIltITVJdIERldGVjdGVkIGxvY2FsIGNzcyBtb2R1bGVzLiBSZWxvYWQgYWxsIGNzc1wiKTtyZWxvYWRBbGwoKTtyZXR1cm59aWYobil7Y29uc29sZS5sb2coXCJbSE1SXSBjc3MgcmVsb2FkICVzXCIsZS5qb2luKFwiIFwiKSl9ZWxzZXtjb25zb2xlLmxvZyhcIltITVJdIFJlbG9hZCBhbGwgY3NzXCIpO3JlbG9hZEFsbCgpfX1yZXR1cm4gZGVib3VuY2UodXBkYXRlLDUwKX19LDcyMjplPT57ZnVuY3Rpb24gbm9ybWFsaXplVXJsKGUpe3JldHVybiBlLnJlZHVjZSgoZnVuY3Rpb24oZSxyKXtzd2l0Y2gocil7Y2FzZVwiLi5cIjplLnBvcCgpO2JyZWFrO2Nhc2VcIi5cIjpicmVhaztkZWZhdWx0OmUucHVzaChyKX1yZXR1cm4gZX0pLFtdKS5qb2luKFwiL1wiKX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7ZT1lLnRyaW0oKTtpZigvXmRhdGE6L2kudGVzdChlKSl7cmV0dXJuIGV9dmFyIHI9ZS5pbmRleE9mKFwiLy9cIikhPT0tMT9lLnNwbGl0KFwiLy9cIilbMF0rXCIvL1wiOlwiXCI7dmFyIHQ9ZS5yZXBsYWNlKG5ldyBSZWdFeHAocixcImlcIiksXCJcIikuc3BsaXQoXCIvXCIpO3ZhciBuPXRbMF0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXC4kLyxcIlwiKTt0WzBdPVwiXCI7dmFyIGk9bm9ybWFsaXplVXJsKHQpO3JldHVybiByK24raX19fTt2YXIgcj17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKHQpe3ZhciBuPXJbdF07aWYobiE9PXVuZGVmaW5lZCl7cmV0dXJuIG4uZXhwb3J0c312YXIgaT1yW3RdPXtleHBvcnRzOnt9fTt2YXIgYT10cnVlO3RyeXtlW3RdKGksaS5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO2E9ZmFsc2V9ZmluYWxseXtpZihhKWRlbGV0ZSByW3RdfXJldHVybiBpLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciB0PV9fbmNjd3Bja19yZXF1aXJlX18oNTkyKTttb2R1bGUuZXhwb3J0cz10fSkoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"4fe7385e3cd1\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvZ2xvYmFscy5jc3M/MWJjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjRmZTczODVlM2NkMVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/contexts/AuditLogContext.tsx":
/*!******************************************!*\
  !*** ./src/contexts/AuditLogContext.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuditLogProvider: function() { return /* binding */ AuditLogProvider; },\n/* harmony export */   createAuditLog: function() { return /* binding */ createAuditLog; },\n/* harmony export */   useAuditLog: function() { return /* binding */ useAuditLog; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ useAuditLog,AuditLogProvider,createAuditLog auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\nconst AuditLogContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useAuditLog = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuditLogContext);\n    if (context === undefined) {\n        throw new Error(\"useAuditLog must be used within an AuditLogProvider\");\n    }\n    return context;\n};\n_s(useAuditLog, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Helper function to detect changes between old and new objects\nconst detectChanges = function(oldObject, newObject) {\n    let excludeFields = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n    const changes = [];\n    if (!oldObject || !newObject) return changes;\n    const allKeys = new Set([\n        ...Object.keys(oldObject),\n        ...Object.keys(newObject)\n    ]);\n    allKeys.forEach((key)=>{\n        if (excludeFields.includes(key)) return;\n        const oldValue = oldObject[key];\n        const newValue = newObject[key];\n        // Handle nested objects (like address)\n        if (typeof oldValue === \"object\" && typeof newValue === \"object\" && oldValue !== null && newValue !== null) {\n            if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {\n                changes.push({\n                    field: key,\n                    oldValue: JSON.stringify(oldValue),\n                    newValue: JSON.stringify(newValue),\n                    fieldLabel: key.charAt(0).toUpperCase() + key.slice(1)\n                });\n            }\n        } else if (oldValue !== newValue) {\n            changes.push({\n                field: key,\n                oldValue,\n                newValue,\n                fieldLabel: key.charAt(0).toUpperCase() + key.slice(1)\n            });\n        }\n    });\n    return changes;\n};\nconst AuditLogProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [auditLogs, setAuditLogs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Initialize audit logs from localStorage on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            const storedLogs = localStorage.getItem(\"ampere_audit_logs\");\n            if (storedLogs) {\n                const parsedLogs = JSON.parse(storedLogs);\n                // Convert timestamp strings back to Date objects\n                const logsWithDates = parsedLogs.map((log)=>({\n                        ...log,\n                        timestamp: new Date(log.timestamp)\n                    }));\n                setAuditLogs(logsWithDates);\n            }\n        } catch (error) {\n            console.error(\"Error loading audit logs from localStorage:\", error);\n        }\n    }, []);\n    // Save audit logs to localStorage whenever logs change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            localStorage.setItem(\"ampere_audit_logs\", JSON.stringify(auditLogs));\n        } catch (error) {\n            console.error(\"Error saving audit logs to localStorage:\", error);\n        }\n    }, [\n        auditLogs\n    ]);\n    const generateLogId = ()=>{\n        return \"LOG-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n    };\n    const addAuditLog = (logData)=>{\n        const newLog = {\n            ...logData,\n            id: generateLogId(),\n            timestamp: new Date(),\n            ipAddress: logData.ipAddress || \"localhost\",\n            userAgent: logData.userAgent || navigator.userAgent\n        };\n        setAuditLogs((prevLogs)=>[\n                newLog,\n                ...prevLogs\n            ]);\n    };\n    const getAuditLogs = (filter)=>{\n        if (!filter) return auditLogs;\n        return auditLogs.filter((log)=>{\n            // Filter by user ID\n            if (filter.userId && log.userId !== filter.userId) return false;\n            // Filter by user role\n            if (filter.userRole && log.userRole !== filter.userRole) return false;\n            // Filter by action\n            if (filter.action && log.action !== filter.action) return false;\n            // Filter by entity type\n            if (filter.entityType && log.entityType !== filter.entityType) return false;\n            // Filter by date range\n            if (filter.dateFrom && log.timestamp < filter.dateFrom) return false;\n            if (filter.dateTo && log.timestamp > filter.dateTo) return false;\n            // Filter by search term (searches in user name, entity name, and details)\n            if (filter.searchTerm) {\n                const searchTerm = filter.searchTerm.toLowerCase();\n                const searchableText = [\n                    log.userName,\n                    log.entityName,\n                    log.details,\n                    log.action,\n                    log.entityType\n                ].join(\" \").toLowerCase();\n                if (!searchableText.includes(searchTerm)) return false;\n            }\n            return true;\n        });\n    };\n    const getAuditLogSummary = ()=>{\n        const now = new Date();\n        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        const todayLogs = auditLogs.filter((log)=>log.timestamp >= today).length;\n        const weekLogs = auditLogs.filter((log)=>log.timestamp >= weekAgo).length;\n        const monthLogs = auditLogs.filter((log)=>log.timestamp >= monthAgo).length;\n        // Count by action\n        const byAction = auditLogs.reduce((acc, log)=>{\n            acc[log.action] = (acc[log.action] || 0) + 1;\n            return acc;\n        }, {});\n        // Count by entity type\n        const byEntityType = auditLogs.reduce((acc, log)=>{\n            acc[log.entityType] = (acc[log.entityType] || 0) + 1;\n            return acc;\n        }, {});\n        // Count by user\n        const userCounts = auditLogs.reduce((acc, log)=>{\n            const existing = acc.find((u)=>u.userId === log.userId);\n            if (existing) {\n                existing.count++;\n            } else {\n                acc.push({\n                    userId: log.userId,\n                    userName: log.userName,\n                    count: 1\n                });\n            }\n            return acc;\n        }, []);\n        // Sort by count and take top 10\n        const byUser = userCounts.sort((a, b)=>b.count - a.count).slice(0, 10);\n        // Recent activity (last 20 logs)\n        const recentActivity = auditLogs.slice(0, 20);\n        return {\n            totalLogs: auditLogs.length,\n            todayLogs,\n            weekLogs,\n            monthLogs,\n            byAction,\n            byEntityType,\n            byUser,\n            recentActivity\n        };\n    };\n    const exportAuditLogs = (filter)=>{\n        const logsToExport = getAuditLogs(filter);\n        return JSON.stringify(logsToExport, null, 2);\n    };\n    const clearAuditLogs = ()=>{\n        setAuditLogs([]);\n        localStorage.removeItem(\"ampere_audit_logs\");\n    };\n    const getAuditLogById = (id)=>{\n        return auditLogs.find((log)=>log.id === id);\n    };\n    const getLogsByEntity = (entityType, entityId)=>{\n        return auditLogs.filter((log)=>log.entityType === entityType && log.entityId === entityId);\n    };\n    const getLogsByUser = (userId)=>{\n        return auditLogs.filter((log)=>log.userId === userId);\n    };\n    const contextValue = {\n        auditLogs,\n        getAuditLogs,\n        addAuditLog,\n        getAuditLogSummary,\n        exportAuditLogs,\n        clearAuditLogs,\n        getAuditLogById,\n        getLogsByEntity,\n        getLogsByUser\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuditLogContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\stamm\\\\AMPERE WEBAPP\\\\src\\\\contexts\\\\AuditLogContext.tsx\",\n        lineNumber: 243,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(AuditLogProvider, \"5QXaWCw+zr+d03r7EA6oAofY6M0=\");\n_c = AuditLogProvider;\n// Utility function to create audit logs for different scenarios\nconst createAuditLog = (action, entityType, entityId, user, options)=>{\n    const changes = (options === null || options === void 0 ? void 0 : options.oldData) && (options === null || options === void 0 ? void 0 : options.newData) ? detectChanges(options.oldData, options.newData, options.excludeFields || [\n        \"id\",\n        \"createdAt\",\n        \"updatedAt\"\n    ]) : undefined;\n    return {\n        userId: user.id,\n        userRole: user.role,\n        userName: user.name,\n        action,\n        entityType,\n        entityId,\n        entityName: options === null || options === void 0 ? void 0 : options.entityName,\n        changes,\n        details: options === null || options === void 0 ? void 0 : options.details\n    };\n};\nvar _c;\n$RefreshReg$(_c, \"AuditLogProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/AuditLogContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/contexts/AuthContext.tsx":
/*!**************************************!*\
  !*** ./src/contexts/AuthContext.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: function() { return /* binding */ AuthProvider; },\n/* harmony export */   DEMO_CREDENTIALS: function() { return /* binding */ DEMO_CREDENTIALS; },\n/* harmony export */   useAuth: function() { return /* binding */ useAuth; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_mock_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/mock-data */ \"(app-pages-browser)/./src/lib/mock-data.ts\");\n/* harmony import */ var _contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/contexts/AuditLogContext */ \"(app-pages-browser)/./src/contexts/AuditLogContext.tsx\");\n/* harmony import */ var _lib_permissions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/permissions */ \"(app-pages-browser)/./src/lib/permissions.ts\");\n/* __next_internal_client_entry_do_not_use__ useAuth,AuthProvider,DEMO_CREDENTIALS auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useAuth = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error(\"useAuth must be used within an AuthProvider\");\n    }\n    return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst AuthProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const auditLog = (0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_3__.useAuditLog)();\n    // Initialize auth state on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const initializeAuth = ()=>{\n            try {\n                // Check for stored user session\n                const storedUser = localStorage.getItem(\"ampere_user\");\n                if (storedUser) {\n                    const userData = JSON.parse(storedUser);\n                    // Validate user still exists and is active\n                    const validUser = _lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockUsers.find((u)=>u.id === userData.id && u.isActive);\n                    if (validUser) {\n                        setUser(validUser);\n                    } else {\n                        localStorage.removeItem(\"ampere_user\");\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error initializing auth:\", error);\n                localStorage.removeItem(\"ampere_user\");\n            } finally{\n                setIsLoading(false);\n            }\n        };\n        initializeAuth();\n    }, []);\n    const login = async (emailOrUsername, password)=>{\n        setIsLoading(true);\n        try {\n            // Simulate API call delay\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n            // Find user by email or username (name field)\n            let foundUser;\n            if (emailOrUsername.includes(\"@\")) {\n                // If input contains @, search by email\n                foundUser = _lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockUsers.find((u)=>u.email.toLowerCase() === emailOrUsername.toLowerCase());\n            } else {\n                // If no @, search by name (username)\n                foundUser = _lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockUsers.find((u)=>u.name.toLowerCase() === emailOrUsername.toLowerCase());\n            }\n            if (!foundUser) {\n                return {\n                    success: false,\n                    error: \"User not found\"\n                };\n            }\n            if (!foundUser.isActive) {\n                return {\n                    success: false,\n                    error: \"Account is inactive. Please contact administrator.\"\n                };\n            }\n            // For demo purposes, accept any password for existing users\n            // In production, this would verify against hashed password\n            if (password.length < 3) {\n                return {\n                    success: false,\n                    error: \"Invalid password\"\n                };\n            }\n            // Update last login\n            const updatedUser = {\n                ...foundUser,\n                lastLogin: new Date()\n            };\n            setUser(updatedUser);\n            localStorage.setItem(\"ampere_user\", JSON.stringify(updatedUser));\n            // Log successful login (temporarily disabled for debugging)\n            try {\n                auditLog.addAuditLog((0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_3__.createAuditLog)(\"LOGIN\", \"USER\", updatedUser.id, updatedUser, {\n                    entityName: updatedUser.name,\n                    details: \"User logged in via \".concat(emailOrUsername.includes(\"@\") ? \"email\" : \"username\")\n                }));\n            } catch (auditError) {\n                console.warn(\"Audit logging failed, but login will continue:\", auditError);\n            }\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            return {\n                success: false,\n                error: \"Login failed. Please try again.\"\n            };\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const logout = ()=>{\n        if (user) {\n            // Log logout before clearing user (with error handling)\n            try {\n                auditLog.addAuditLog((0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_3__.createAuditLog)(\"LOGOUT\", \"USER\", user.id, user, {\n                    entityName: user.name,\n                    details: \"User logged out\"\n                }));\n            } catch (auditError) {\n                console.warn(\"Audit logging failed during logout:\", auditError);\n            }\n        }\n        setUser(null);\n        localStorage.removeItem(\"ampere_user\");\n    };\n    const hasPermission = (requiredRoles)=>{\n        if (!user) return false;\n        return requiredRoles.includes(user.role);\n    };\n    // Enhanced permission checking functions using PermissionService\n    const canAccessFinance = ()=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canAccessFinance(user) : false;\n    };\n    const canEditInvoices = ()=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canEditInvoices(user) : false;\n    };\n    const canDeleteInvoices = ()=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canDeleteInvoices(user) : false;\n    };\n    const canManagePayments = ()=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canManagePayments(user) : false;\n    };\n    const canViewProject = (project)=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canViewProject(user, project) : false;\n    };\n    const canEditProject = (project)=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canEditProject(user, project) : false;\n    };\n    const canCreateProjects = ()=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canCreateProjects(user) : false;\n    };\n    const canDeleteProjects = ()=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canDeleteProjects(user) : false;\n    };\n    const canManageProjectTeam = (project)=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canManageProjectTeam(user, project) : false;\n    };\n    const canViewClients = ()=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canViewClients(user) : false;\n    };\n    const canEditClients = ()=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canEditClients(user) : false;\n    };\n    const canCreateClients = ()=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canCreateClients(user) : false;\n    };\n    const canDeleteClients = ()=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canDeleteClients(user) : false;\n    };\n    const canManageUsers = ()=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canManageUsers(user) : false;\n    };\n    const canViewAuditLogs = ()=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canViewAuditLogs(user) : false;\n    };\n    const canManageSettings = ()=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canManageSettings(user) : false;\n    };\n    const canViewReports = ()=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.canViewReports(user) : false;\n    };\n    const getAccessibleProjects = (allProjects)=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.getAccessibleProjects(user, allProjects) : [];\n    };\n    const getAccessibleProjectIds = (allProjects)=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.getAccessibleProjectIds(user, allProjects) : [];\n    };\n    const hasAnyRole = (roles)=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.hasAnyRole(user, roles) : false;\n    };\n    const isProjectMember = (project)=>{\n        return user ? _lib_permissions__WEBPACK_IMPORTED_MODULE_4__.PermissionService.isProjectMember(user, project) : false;\n    };\n    // Demo function to switch between users for testing\n    const switchUser = (userId)=>{\n        const newUser = _lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockUsers.find((u)=>u.id === userId && u.isActive);\n        if (newUser) {\n            const updatedUser = {\n                ...newUser,\n                lastLogin: new Date()\n            };\n            // Log user switch (with error handling)\n            if (user) {\n                try {\n                    auditLog.addAuditLog((0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_3__.createAuditLog)(\"LOGOUT\", \"USER\", user.id, user, {\n                        entityName: user.name,\n                        details: \"User switched account\"\n                    }));\n                } catch (auditError) {\n                    console.warn(\"Audit logging failed during user switch logout:\", auditError);\n                }\n            }\n            try {\n                auditLog.addAuditLog((0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_3__.createAuditLog)(\"LOGIN\", \"USER\", updatedUser.id, updatedUser, {\n                    entityName: updatedUser.name,\n                    details: \"User account switched (demo mode)\"\n                }));\n            } catch (auditError) {\n                console.warn(\"Audit logging failed during user switch login:\", auditError);\n            }\n            setUser(updatedUser);\n            localStorage.setItem(\"ampere_user\", JSON.stringify(updatedUser));\n        }\n    };\n    const isAuthenticated = !!user;\n    const value = {\n        user,\n        isAuthenticated,\n        isLoading,\n        login,\n        logout,\n        hasPermission,\n        switchUser,\n        // Enhanced permission functions\n        canAccessFinance,\n        canEditInvoices,\n        canDeleteInvoices,\n        canManagePayments,\n        canViewProject,\n        canEditProject,\n        canCreateProjects,\n        canDeleteProjects,\n        canManageProjectTeam,\n        canViewClients,\n        canEditClients,\n        canCreateClients,\n        canDeleteClients,\n        canManageUsers,\n        canViewAuditLogs,\n        canManageSettings,\n        canViewReports,\n        getAccessibleProjects,\n        getAccessibleProjectIds,\n        hasAnyRole,\n        isProjectMember\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\stamm\\\\AMPERE WEBAPP\\\\src\\\\contexts\\\\AuthContext.tsx\",\n        lineNumber: 349,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(AuthProvider, \"A1Rzgsequ3mu+QQI00E4GD53N4U=\", false, function() {\n    return [\n        _contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_3__.useAuditLog\n    ];\n});\n_c = AuthProvider;\n// Demo credentials for easy testing\nconst DEMO_CREDENTIALS = [\n    {\n        email: \"john.tan@ampere.com.sg\",\n        username: \"John Tan\",\n        password: \"admin123\",\n        role: \"Super Admin\"\n    },\n    {\n        email: \"zack@ampere.com.sg\",\n        username: \"Zack\",\n        password: \"admin1234\",\n        role: \"Super Admin\"\n    },\n    {\n        email: \"sarah.lim@ampere.com.sg\",\n        username: \"Sarah Lim\",\n        password: \"admin123\",\n        role: \"Admin\"\n    },\n    {\n        email: \"david.wong@ampere.com.sg\",\n        username: \"David Wong\",\n        password: \"projects123\",\n        role: \"Projects\"\n    },\n    {\n        email: \"michelle.chen@ampere.com.sg\",\n        username: \"Michelle Chen\",\n        password: \"finance123\",\n        role: \"Finance\"\n    },\n    {\n        email: \"robert.kumar@ampere.com.sg\",\n        username: \"Robert Kumar\",\n        password: \"sales123\",\n        role: \"Sales\"\n    }\n];\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/AuthContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/contexts/ClientContext.tsx":
/*!****************************************!*\
  !*** ./src/contexts/ClientContext.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientProvider: function() { return /* binding */ ClientProvider; },\n/* harmony export */   useClients: function() { return /* binding */ useClients; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_mock_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/mock-data */ \"(app-pages-browser)/./src/lib/mock-data.ts\");\n/* harmony import */ var _lib_client_code_generator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/client-code-generator */ \"(app-pages-browser)/./src/lib/client-code-generator.ts\");\n/* harmony import */ var _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/contexts/AuthContext */ \"(app-pages-browser)/./src/contexts/AuthContext.tsx\");\n/* harmony import */ var _contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/contexts/AuditLogContext */ \"(app-pages-browser)/./src/contexts/AuditLogContext.tsx\");\n/* __next_internal_client_entry_do_not_use__ useClients,ClientProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\nconst ClientContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useClients = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ClientContext);\n    if (context === undefined) {\n        throw new Error(\"useClients must be used within a ClientProvider\");\n    }\n    return context;\n};\n_s(useClients, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst ClientProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [clients, setClients] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockClients);\n    const { user: currentUser } = (0,_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_4__.useAuth)();\n    const auditLog = (0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_5__.useAuditLog)();\n    // Initialize clients from localStorage if available\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            const storedClients = localStorage.getItem(\"ampere_clients\");\n            if (storedClients) {\n                const parsedClients = JSON.parse(storedClients);\n                // Validate that the data structure is correct\n                if (Array.isArray(parsedClients) && parsedClients.length > 0) {\n                    // Migrate existing clients to include clientCode if missing\n                    const migratedClients = migrateClientsWithCodes(parsedClients);\n                    setClients(migratedClients);\n                }\n            } else {\n                // Ensure mock clients have codes\n                const migratedMockClients = migrateClientsWithCodes(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockClients);\n                setClients(migratedMockClients);\n            }\n        } catch (error) {\n            console.error(\"Error loading clients from localStorage:\", error);\n            // Fall back to mock data if there's an error\n            const migratedMockClients = migrateClientsWithCodes(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockClients);\n            setClients(migratedMockClients);\n        }\n    }, []);\n    // Migration function to ensure all clients have client codes\n    const migrateClientsWithCodes = (clientsToMigrate)=>{\n        const migratedClients = [];\n        let codeCounter = 1;\n        clientsToMigrate.forEach((client)=>{\n            if (!client.clientCode) {\n                // Generate a client code for clients that don't have one\n                const paddedNumber = codeCounter.toString().padStart(3, \"0\");\n                const newClientCode = \"AMP-C-\".concat(paddedNumber);\n                migratedClients.push({\n                    ...client,\n                    clientCode: newClientCode\n                });\n                codeCounter++;\n            } else {\n                migratedClients.push(client);\n                // Update counter based on existing code if valid\n                const existingNumber = extractClientCodeNumber(client.clientCode);\n                if (existingNumber >= codeCounter) {\n                    codeCounter = existingNumber + 1;\n                }\n            }\n        });\n        return migratedClients;\n    };\n    // Helper function to extract number from client code\n    const extractClientCodeNumber = (clientCode)=>{\n        const match = clientCode.match(/AMP-C-(\\d+)/);\n        return match ? parseInt(match[1], 10) : 0;\n    };\n    // Save clients to localStorage whenever clients change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            localStorage.setItem(\"ampere_clients\", JSON.stringify(clients));\n        } catch (error) {\n            console.error(\"Error saving clients to localStorage:\", error);\n        }\n    }, [\n        clients\n    ]);\n    const getClient = (id)=>{\n        return clients.find((client)=>client.id === id);\n    };\n    const addClient = (clientData)=>{\n        // Generate a unique ID\n        const newId = (Math.max(...clients.map((c)=>parseInt(c.id) || 0)) + 1).toString();\n        // Generate auto-running client code\n        const clientCode = (0,_lib_client_code_generator__WEBPACK_IMPORTED_MODULE_3__.generateNextClientCode)(clients);\n        const newClient = {\n            id: newId,\n            clientCode,\n            name: clientData.name || \"\",\n            type: clientData.type || \"corporate\",\n            contactPerson: clientData.contactPerson || \"\",\n            email: clientData.email || \"\",\n            phone: clientData.phone || \"\",\n            address: clientData.address || {\n                street: \"\",\n                postalCode: \"\",\n                district: \"\"\n            },\n            paymentTerms: clientData.paymentTerms || 30,\n            status: clientData.status || \"active\",\n            projects: [],\n            createdAt: new Date(),\n            ...clientData\n        };\n        setClients((prevClients)=>[\n                ...prevClients,\n                newClient\n            ]);\n        // Log client creation\n        if (currentUser) {\n            auditLog.addAuditLog((0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_5__.createAuditLog)(\"CREATE\", \"CLIENT\", newClient.id, currentUser, {\n                entityName: newClient.name,\n                details: \"Created new client (\".concat(newClient.clientCode, \") of type: \").concat(newClient.type)\n            }));\n        }\n        return newClient;\n    };\n    const updateClient = (id, updates)=>{\n        const oldClient = getClient(id);\n        if (!oldClient) return false;\n        setClients((prevClients)=>{\n            const index = prevClients.findIndex((client)=>client.id === id);\n            if (index === -1) return prevClients;\n            const updatedClient = {\n                ...prevClients[index],\n                ...updates\n            };\n            const newClients = [\n                ...prevClients\n            ];\n            newClients[index] = updatedClient;\n            return newClients;\n        });\n        // Log client update\n        if (currentUser && oldClient) {\n            const updatedClient = {\n                ...oldClient,\n                ...updates\n            };\n            auditLog.addAuditLog((0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_5__.createAuditLog)(\"UPDATE\", \"CLIENT\", id, currentUser, {\n                entityName: oldClient.name,\n                oldData: oldClient,\n                newData: updatedClient,\n                details: \"Updated client information for \".concat(oldClient.clientCode),\n                excludeFields: [\n                    \"projects\",\n                    \"createdAt\"\n                ]\n            }));\n        }\n        return true;\n    };\n    const deleteClient = (id)=>{\n        const client = getClient(id);\n        if (!client) return false;\n        setClients((prevClients)=>prevClients.filter((client)=>client.id !== id));\n        // Log client deletion\n        if (currentUser) {\n            auditLog.addAuditLog((0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_5__.createAuditLog)(\"DELETE\", \"CLIENT\", id, currentUser, {\n                entityName: client.name,\n                details: \"Deleted client \".concat(client.clientCode, \" (\").concat(client.name, \")\")\n            }));\n        }\n        return true;\n    };\n    const refreshClients = ()=>{\n        // Refresh from localStorage or reset to mock data\n        try {\n            const storedClients = localStorage.getItem(\"ampere_clients\");\n            if (storedClients) {\n                setClients(JSON.parse(storedClients));\n            } else {\n                setClients(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockClients);\n            }\n        } catch (error) {\n            console.error(\"Error refreshing clients:\", error);\n            setClients(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockClients);\n        }\n    };\n    const value = {\n        clients,\n        getClient,\n        addClient,\n        updateClient,\n        deleteClient,\n        refreshClients\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ClientContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\stamm\\\\AMPERE WEBAPP\\\\src\\\\contexts\\\\ClientContext.tsx\",\n        lineNumber: 244,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(ClientProvider, \"q6UXulfuX1Zk11yY0Ftsu85h35A=\", false, function() {\n    return [\n        _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_4__.useAuth,\n        _contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_5__.useAuditLog\n    ];\n});\n_c = ClientProvider;\nvar _c;\n$RefreshReg$(_c, \"ClientProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/ClientContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/contexts/FinanceContext.tsx":
/*!*****************************************!*\
  !*** ./src/contexts/FinanceContext.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FinanceProvider: function() { return /* binding */ FinanceProvider; },\n/* harmony export */   useFinance: function() { return /* binding */ useFinance; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_mock_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/mock-data */ \"(app-pages-browser)/./src/lib/mock-data.ts\");\n/* __next_internal_client_entry_do_not_use__ useFinance,FinanceProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst FinanceContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useFinance = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(FinanceContext);\n    if (context === undefined) {\n        throw new Error(\"useFinance must be used within a FinanceProvider\");\n    }\n    return context;\n};\n_s(useFinance, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst FinanceProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [invoices, setInvoices] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockInvoices);\n    const [payments, setPayments] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockPayments);\n    const [vendorInvoices, setVendorInvoices] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Initialize finance data from localStorage if available\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            const storedInvoices = localStorage.getItem(\"ampere_invoices\");\n            const storedPayments = localStorage.getItem(\"ampere_payments\");\n            const storedVendorInvoices = localStorage.getItem(\"ampere_vendor_invoices\");\n            if (storedInvoices) {\n                const parsedInvoices = JSON.parse(storedInvoices);\n                if (Array.isArray(parsedInvoices) && parsedInvoices.length > 0) {\n                    setInvoices(parsedInvoices);\n                }\n            }\n            if (storedPayments) {\n                const parsedPayments = JSON.parse(storedPayments);\n                if (Array.isArray(parsedPayments) && parsedPayments.length > 0) {\n                    setPayments(parsedPayments);\n                }\n            }\n            if (storedVendorInvoices) {\n                const parsedVendorInvoices = JSON.parse(storedVendorInvoices);\n                if (Array.isArray(parsedVendorInvoices) && parsedVendorInvoices.length > 0) {\n                    setVendorInvoices(parsedVendorInvoices);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error loading finance data from localStorage:\", error);\n            setInvoices(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockInvoices);\n            setPayments(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockPayments);\n            setVendorInvoices([]);\n        }\n    }, []);\n    // Save invoices to localStorage whenever invoices change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            localStorage.setItem(\"ampere_invoices\", JSON.stringify(invoices));\n        } catch (error) {\n            console.error(\"Error saving invoices to localStorage:\", error);\n        }\n    }, [\n        invoices\n    ]);\n    // Save payments to localStorage whenever payments change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            localStorage.setItem(\"ampere_payments\", JSON.stringify(payments));\n        } catch (error) {\n            console.error(\"Error saving payments to localStorage:\", error);\n        }\n    }, [\n        payments\n    ]);\n    // Save vendor invoices to localStorage whenever vendor invoices change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            localStorage.setItem(\"ampere_vendor_invoices\", JSON.stringify(vendorInvoices));\n        } catch (error) {\n            console.error(\"Error saving vendor invoices to localStorage:\", error);\n        }\n    }, [\n        vendorInvoices\n    ]);\n    const getInvoice = (id)=>{\n        return invoices.find((invoice)=>invoice.id === id);\n    };\n    const getPayment = (id)=>{\n        return payments.find((payment)=>payment.id === id);\n    };\n    const getVendorInvoice = (id)=>{\n        return vendorInvoices.find((vendorInvoice)=>vendorInvoice.id === id);\n    };\n    const getInvoicePayments = (invoiceId)=>{\n        return payments.filter((payment)=>payment.invoiceId === invoiceId);\n    };\n    const getVendorInvoicePayments = (vendorInvoiceId)=>{\n        return payments.filter((payment)=>payment.invoiceId === vendorInvoiceId);\n    };\n    const getInvoicesByClient = (clientId)=>{\n        return invoices.filter((invoice)=>invoice.clientId === clientId);\n    };\n    const getVendorInvoicesByVendor = (vendorId)=>{\n        return vendorInvoices.filter((vendorInvoice)=>vendorInvoice.vendorId === vendorId);\n    };\n    const getInvoicesByProject = (projectId)=>{\n        return invoices.filter((invoice)=>invoice.projectId === projectId);\n    };\n    const getVendorInvoicesByProject = (projectId)=>{\n        return vendorInvoices.filter((vendorInvoice)=>vendorInvoice.projectId === projectId);\n    };\n    const getInvoicesByStatus = (status)=>{\n        return invoices.filter((invoice)=>invoice.status === status);\n    };\n    const getVendorInvoicesByStatus = (status)=>{\n        return vendorInvoices.filter((vendorInvoice)=>vendorInvoice.status === status);\n    };\n    const getOverdueInvoices = ()=>{\n        const now = new Date();\n        return invoices.filter((invoice)=>invoice.status !== \"paid\" && invoice.status !== \"cancelled\" && new Date(invoice.dueDate) < now);\n    };\n    const getOverdueVendorInvoices = ()=>{\n        const now = new Date();\n        return vendorInvoices.filter((vendorInvoice)=>vendorInvoice.status !== \"paid\" && vendorInvoice.status !== \"cancelled\" && new Date(vendorInvoice.dueDate) < now);\n    };\n    const getTotalOutstanding = ()=>{\n        return invoices.filter((invoice)=>invoice.status !== \"paid\" && invoice.status !== \"cancelled\").reduce((total, invoice)=>total + invoice.totalAmount, 0);\n    };\n    const getTotalVendorOutstanding = ()=>{\n        return vendorInvoices.filter((vendorInvoice)=>vendorInvoice.status !== \"paid\" && vendorInvoice.status !== \"cancelled\").reduce((total, vendorInvoice)=>total + vendorInvoice.totalAmount, 0);\n    };\n    const getTotalPaid = ()=>{\n        return payments.reduce((total, payment)=>total + payment.amount, 0);\n    };\n    const getTotalVendorPaid = ()=>{\n        return payments.reduce((total, payment)=>total + payment.amount, 0);\n    };\n    const addInvoice = (invoiceData)=>{\n        // Generate a unique ID\n        const newId = (Math.max(...invoices.map((i)=>parseInt(i.id) || 0)) + 1).toString();\n        // Generate invoice number\n        const today = new Date();\n        const year = today.getFullYear();\n        const month = String(today.getMonth() + 1).padStart(2, \"0\");\n        const invoiceCount = invoices.filter((inv)=>inv.invoiceNumber.includes(\"\".concat(year).concat(month))).length + 1;\n        const invoiceNumber = \"AMP-INV-\".concat(year).concat(month, \"-\").concat(String(invoiceCount).padStart(3, \"0\"));\n        const newInvoice = {\n            id: newId,\n            invoiceNumber,\n            clientId: invoiceData.clientId || \"\",\n            projectId: invoiceData.projectId,\n            quotationId: invoiceData.quotationId,\n            amount: invoiceData.amount || 0,\n            gstAmount: invoiceData.gstAmount || (invoiceData.amount || 0) * 0.07,\n            totalAmount: invoiceData.totalAmount || (invoiceData.amount || 0) * 1.07,\n            status: invoiceData.status || \"draft\",\n            issueDate: invoiceData.issueDate || new Date(),\n            dueDate: invoiceData.dueDate || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n            paidDate: invoiceData.paidDate,\n            paymentMethod: invoiceData.paymentMethod,\n            createdAt: new Date(),\n            ...invoiceData\n        };\n        setInvoices((prevInvoices)=>[\n                ...prevInvoices,\n                newInvoice\n            ]);\n        return newInvoice;\n    };\n    const updateInvoice = (id, updates)=>{\n        setInvoices((prevInvoices)=>{\n            const index = prevInvoices.findIndex((invoice)=>invoice.id === id);\n            if (index === -1) return prevInvoices;\n            const updatedInvoice = {\n                ...prevInvoices[index],\n                ...updates\n            };\n            // Auto-calculate GST and total if amount changes\n            if (updates.amount && !updates.gstAmount) {\n                updatedInvoice.gstAmount = updates.amount * 0.07;\n                updatedInvoice.totalAmount = updates.amount * 1.07;\n            }\n            const newInvoices = [\n                ...prevInvoices\n            ];\n            newInvoices[index] = updatedInvoice;\n            return newInvoices;\n        });\n        return true;\n    };\n    const deleteInvoice = (id)=>{\n        // Also delete associated payments\n        setPayments((prevPayments)=>prevPayments.filter((payment)=>payment.invoiceId !== id));\n        setInvoices((prevInvoices)=>prevInvoices.filter((invoice)=>invoice.id !== id));\n        return true;\n    };\n    const addVendorInvoice = (vendorInvoiceData)=>{\n        // Generate a unique ID\n        const newId = (Math.max(...vendorInvoices.map((i)=>parseInt(i.id) || 0)) + 1).toString();\n        // Generate invoice number\n        const today = new Date();\n        const year = today.getFullYear();\n        const month = String(today.getMonth() + 1).padStart(2, \"0\");\n        const invoiceCount = vendorInvoices.filter((inv)=>inv.invoiceNumber.includes(\"\".concat(year).concat(month))).length + 1;\n        const invoiceNumber = \"AMP-VI-\".concat(year).concat(month, \"-\").concat(String(invoiceCount).padStart(3, \"0\"));\n        const newVendorInvoice = {\n            id: newId,\n            invoiceNumber,\n            vendorId: vendorInvoiceData.vendorId || \"\",\n            projectId: vendorInvoiceData.projectId,\n            purchaseOrderId: vendorInvoiceData.purchaseOrderId,\n            amount: vendorInvoiceData.amount || 0,\n            gstAmount: vendorInvoiceData.gstAmount || (vendorInvoiceData.amount || 0) * 0.07,\n            totalAmount: vendorInvoiceData.totalAmount || (vendorInvoiceData.amount || 0) * 1.07,\n            status: vendorInvoiceData.status || \"received\",\n            issueDate: vendorInvoiceData.issueDate || new Date(),\n            dueDate: vendorInvoiceData.dueDate || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n            paidDate: vendorInvoiceData.paidDate,\n            paymentMethod: vendorInvoiceData.paymentMethod,\n            createdAt: new Date(),\n            fileName: vendorInvoiceData.fileName,\n            fileUrl: vendorInvoiceData.fileUrl,\n            processedData: vendorInvoiceData.processedData,\n            ...vendorInvoiceData\n        };\n        setVendorInvoices((prevVendorInvoices)=>[\n                ...prevVendorInvoices,\n                newVendorInvoice\n            ]);\n        return newVendorInvoice;\n    };\n    const updateVendorInvoice = (id, updates)=>{\n        setVendorInvoices((prevVendorInvoices)=>{\n            const index = prevVendorInvoices.findIndex((vendorInvoice)=>vendorInvoice.id === id);\n            if (index === -1) return prevVendorInvoices;\n            const updatedVendorInvoice = {\n                ...prevVendorInvoices[index],\n                ...updates\n            };\n            // Auto-calculate GST and total if amount changes\n            if (updates.amount && !updates.gstAmount) {\n                updatedVendorInvoice.gstAmount = updates.amount * 0.07;\n                updatedVendorInvoice.totalAmount = updates.amount * 1.07;\n            }\n            const newVendorInvoices = [\n                ...prevVendorInvoices\n            ];\n            newVendorInvoices[index] = updatedVendorInvoice;\n            return newVendorInvoices;\n        });\n        return true;\n    };\n    const deleteVendorInvoice = (id)=>{\n        // Also delete associated payments\n        setPayments((prevPayments)=>prevPayments.filter((payment)=>payment.invoiceId !== id));\n        setVendorInvoices((prevVendorInvoices)=>prevVendorInvoices.filter((vendorInvoice)=>vendorInvoice.id !== id));\n        return true;\n    };\n    const addPayment = (paymentData)=>{\n        // Generate a unique ID\n        const newId = (Math.max(...payments.map((p)=>parseInt(p.id) || 0)) + 1).toString();\n        const newPayment = {\n            id: newId,\n            invoiceId: paymentData.invoiceId || \"\",\n            amount: paymentData.amount || 0,\n            method: paymentData.method || \"bank_transfer\",\n            reference: paymentData.reference || \"\",\n            receivedDate: paymentData.receivedDate || new Date(),\n            notes: paymentData.notes,\n            ...paymentData\n        };\n        setPayments((prevPayments)=>[\n                ...prevPayments,\n                newPayment\n            ]);\n        // Update invoice status if fully paid\n        const invoice = getInvoice(newPayment.invoiceId);\n        if (invoice) {\n            const allPayments = [\n                ...payments,\n                newPayment\n            ].filter((p)=>p.invoiceId === invoice.id);\n            const totalPayments = allPayments.reduce((sum, p)=>sum + p.amount, 0);\n            if (totalPayments >= invoice.totalAmount && invoice.status !== \"paid\") {\n                updateInvoice(invoice.id, {\n                    status: \"paid\",\n                    paidDate: newPayment.receivedDate,\n                    paymentMethod: newPayment.method\n                });\n            }\n        }\n        return newPayment;\n    };\n    const addVendorPayment = (paymentData)=>{\n        // Generate a unique ID\n        const newId = (Math.max(...payments.map((p)=>parseInt(p.id) || 0)) + 1).toString();\n        const newPayment = {\n            id: newId,\n            invoiceId: paymentData.invoiceId || \"\",\n            amount: paymentData.amount || 0,\n            method: paymentData.method || \"bank_transfer\",\n            reference: paymentData.reference || \"\",\n            receivedDate: paymentData.receivedDate || new Date(),\n            notes: paymentData.notes,\n            ...paymentData\n        };\n        setPayments((prevPayments)=>[\n                ...prevPayments,\n                newPayment\n            ]);\n        // Update vendor invoice status if fully paid\n        const vendorInvoice = getVendorInvoice(newPayment.invoiceId);\n        if (vendorInvoice) {\n            const allPayments = [\n                ...payments,\n                newPayment\n            ].filter((p)=>p.invoiceId === vendorInvoice.id);\n            const totalPayments = allPayments.reduce((sum, p)=>sum + p.amount, 0);\n            if (totalPayments >= vendorInvoice.totalAmount && vendorInvoice.status !== \"paid\") {\n                updateVendorInvoice(vendorInvoice.id, {\n                    status: \"paid\",\n                    paidDate: newPayment.receivedDate,\n                    paymentMethod: newPayment.method\n                });\n            }\n        }\n        return newPayment;\n    };\n    const updatePayment = (id, updates)=>{\n        setPayments((prevPayments)=>{\n            const index = prevPayments.findIndex((payment)=>payment.id === id);\n            if (index === -1) return prevPayments;\n            const updatedPayment = {\n                ...prevPayments[index],\n                ...updates\n            };\n            const newPayments = [\n                ...prevPayments\n            ];\n            newPayments[index] = updatedPayment;\n            return newPayments;\n        });\n        return true;\n    };\n    const deletePayment = (id)=>{\n        const payment = getPayment(id);\n        if (payment) {\n            // Update invoice status if needed\n            const invoice = getInvoice(payment.invoiceId);\n            if (invoice && invoice.status === \"paid\") {\n                const remainingPayments = payments.filter((p)=>p.invoiceId === payment.invoiceId && p.id !== id);\n                const totalRemainingPayments = remainingPayments.reduce((sum, p)=>sum + p.amount, 0);\n                if (totalRemainingPayments < invoice.totalAmount) {\n                    updateInvoice(invoice.id, {\n                        status: \"sent\",\n                        paidDate: undefined,\n                        paymentMethod: undefined\n                    });\n                }\n            }\n            // Update vendor invoice status if needed\n            const vendorInvoice = getVendorInvoice(payment.invoiceId);\n            if (vendorInvoice && vendorInvoice.status === \"paid\") {\n                const remainingPayments = payments.filter((p)=>p.invoiceId === payment.invoiceId && p.id !== id);\n                const totalRemainingPayments = remainingPayments.reduce((sum, p)=>sum + p.amount, 0);\n                if (totalRemainingPayments < vendorInvoice.totalAmount) {\n                    updateVendorInvoice(vendorInvoice.id, {\n                        status: \"approved\",\n                        paidDate: undefined,\n                        paymentMethod: undefined\n                    });\n                }\n            }\n        }\n        setPayments((prevPayments)=>prevPayments.filter((payment)=>payment.id !== id));\n        return true;\n    };\n    const refreshFinanceData = ()=>{\n        try {\n            const storedInvoices = localStorage.getItem(\"ampere_invoices\");\n            const storedPayments = localStorage.getItem(\"ampere_payments\");\n            const storedVendorInvoices = localStorage.getItem(\"ampere_vendor_invoices\");\n            if (storedInvoices) {\n                setInvoices(JSON.parse(storedInvoices));\n            } else {\n                setInvoices(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockInvoices);\n            }\n            if (storedPayments) {\n                setPayments(JSON.parse(storedPayments));\n            } else {\n                setPayments(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockPayments);\n            }\n            if (storedVendorInvoices) {\n                setVendorInvoices(JSON.parse(storedVendorInvoices));\n            }\n        } catch (error) {\n            console.error(\"Error refreshing finance data:\", error);\n            setInvoices(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockInvoices);\n            setPayments(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockPayments);\n            setVendorInvoices([]);\n        }\n    };\n    const value = {\n        invoices,\n        payments,\n        vendorInvoices,\n        getInvoice,\n        getPayment,\n        getVendorInvoice,\n        getInvoicePayments,\n        getVendorInvoicePayments,\n        addInvoice,\n        updateInvoice,\n        deleteInvoice,\n        addVendorInvoice,\n        updateVendorInvoice,\n        deleteVendorInvoice,\n        addPayment,\n        addVendorPayment,\n        updatePayment,\n        deletePayment,\n        getInvoicesByClient,\n        getVendorInvoicesByVendor,\n        getInvoicesByProject,\n        getVendorInvoicesByProject,\n        getInvoicesByStatus,\n        getVendorInvoicesByStatus,\n        getOverdueInvoices,\n        getOverdueVendorInvoices,\n        getTotalOutstanding,\n        getTotalVendorOutstanding,\n        getTotalPaid,\n        getTotalVendorPaid,\n        refreshFinanceData\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(FinanceContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\stamm\\\\AMPERE WEBAPP\\\\src\\\\contexts\\\\FinanceContext.tsx\",\n        lineNumber: 518,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(FinanceProvider, \"SraO+jwmnK1jkt8Onw6CHBtjO2A=\");\n_c = FinanceProvider;\nvar _c;\n$RefreshReg$(_c, \"FinanceProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb250ZXh0cy9GaW5hbmNlQ29udGV4dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFNkU7QUFFakI7QUFvQzVELE1BQU1PLCtCQUFpQk4sb0RBQWFBLENBQWlDTztBQUU5RCxNQUFNQyxhQUFhOztJQUN4QixNQUFNQyxVQUFVUixpREFBVUEsQ0FBQ0s7SUFDM0IsSUFBSUcsWUFBWUYsV0FBVztRQUN6QixNQUFNLElBQUlHLE1BQU07SUFDbEI7SUFDQSxPQUFPRDtBQUNULEVBQUM7R0FOWUQ7QUFZTixNQUFNRyxrQkFBa0Q7UUFBQyxFQUFFQyxRQUFRLEVBQUU7O0lBQzFFLE1BQU0sQ0FBQ0MsVUFBVUMsWUFBWSxHQUFHWiwrQ0FBUUEsQ0FBWUUsd0RBQVlBO0lBQ2hFLE1BQU0sQ0FBQ1csVUFBVUMsWUFBWSxHQUFHZCwrQ0FBUUEsQ0FBWUcsd0RBQVlBO0lBQ2hFLE1BQU0sQ0FBQ1ksZ0JBQWdCQyxrQkFBa0IsR0FBR2hCLCtDQUFRQSxDQUFrQixFQUFFO0lBRXhFLHlEQUF5RDtJQUN6REMsZ0RBQVNBLENBQUM7UUFDUixJQUFJO1lBQ0YsTUFBTWdCLGlCQUFpQkMsYUFBYUMsT0FBTyxDQUFDO1lBQzVDLE1BQU1DLGlCQUFpQkYsYUFBYUMsT0FBTyxDQUFDO1lBQzVDLE1BQU1FLHVCQUF1QkgsYUFBYUMsT0FBTyxDQUFDO1lBRWxELElBQUlGLGdCQUFnQjtnQkFDbEIsTUFBTUssaUJBQWlCQyxLQUFLQyxLQUFLLENBQUNQO2dCQUNsQyxJQUFJUSxNQUFNQyxPQUFPLENBQUNKLG1CQUFtQkEsZUFBZUssTUFBTSxHQUFHLEdBQUc7b0JBQzlEZixZQUFZVTtnQkFDZDtZQUNGO1lBRUEsSUFBSUYsZ0JBQWdCO2dCQUNsQixNQUFNUSxpQkFBaUJMLEtBQUtDLEtBQUssQ0FBQ0o7Z0JBQ2xDLElBQUlLLE1BQU1DLE9BQU8sQ0FBQ0UsbUJBQW1CQSxlQUFlRCxNQUFNLEdBQUcsR0FBRztvQkFDOURiLFlBQVljO2dCQUNkO1lBQ0Y7WUFFQSxJQUFJUCxzQkFBc0I7Z0JBQ3hCLE1BQU1RLHVCQUF1Qk4sS0FBS0MsS0FBSyxDQUFDSDtnQkFDeEMsSUFBSUksTUFBTUMsT0FBTyxDQUFDRyx5QkFBeUJBLHFCQUFxQkYsTUFBTSxHQUFHLEdBQUc7b0JBQzFFWCxrQkFBa0JhO2dCQUNwQjtZQUNGO1FBQ0YsRUFBRSxPQUFPQyxPQUFPO1lBQ2RDLFFBQVFELEtBQUssQ0FBQyxpREFBaURBO1lBQy9EbEIsWUFBWVYsd0RBQVlBO1lBQ3hCWSxZQUFZWCx3REFBWUE7WUFDeEJhLGtCQUFrQixFQUFFO1FBQ3RCO0lBQ0YsR0FBRyxFQUFFO0lBRUwseURBQXlEO0lBQ3pEZixnREFBU0EsQ0FBQztRQUNSLElBQUk7WUFDRmlCLGFBQWFjLE9BQU8sQ0FBQyxtQkFBbUJULEtBQUtVLFNBQVMsQ0FBQ3RCO1FBQ3pELEVBQUUsT0FBT21CLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLDBDQUEwQ0E7UUFDMUQ7SUFDRixHQUFHO1FBQUNuQjtLQUFTO0lBRWIseURBQXlEO0lBQ3pEVixnREFBU0EsQ0FBQztRQUNSLElBQUk7WUFDRmlCLGFBQWFjLE9BQU8sQ0FBQyxtQkFBbUJULEtBQUtVLFNBQVMsQ0FBQ3BCO1FBQ3pELEVBQUUsT0FBT2lCLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLDBDQUEwQ0E7UUFDMUQ7SUFDRixHQUFHO1FBQUNqQjtLQUFTO0lBRWIsdUVBQXVFO0lBQ3ZFWixnREFBU0EsQ0FBQztRQUNSLElBQUk7WUFDRmlCLGFBQWFjLE9BQU8sQ0FBQywwQkFBMEJULEtBQUtVLFNBQVMsQ0FBQ2xCO1FBQ2hFLEVBQUUsT0FBT2UsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsaURBQWlEQTtRQUNqRTtJQUNGLEdBQUc7UUFBQ2Y7S0FBZTtJQUVuQixNQUFNbUIsYUFBYSxDQUFDQztRQUNsQixPQUFPeEIsU0FBU3lCLElBQUksQ0FBQ0MsQ0FBQUEsVUFBV0EsUUFBUUYsRUFBRSxLQUFLQTtJQUNqRDtJQUVBLE1BQU1HLGFBQWEsQ0FBQ0g7UUFDbEIsT0FBT3RCLFNBQVN1QixJQUFJLENBQUNHLENBQUFBLFVBQVdBLFFBQVFKLEVBQUUsS0FBS0E7SUFDakQ7SUFFQSxNQUFNSyxtQkFBbUIsQ0FBQ0w7UUFDeEIsT0FBT3BCLGVBQWVxQixJQUFJLENBQUNLLENBQUFBLGdCQUFpQkEsY0FBY04sRUFBRSxLQUFLQTtJQUNuRTtJQUVBLE1BQU1PLHFCQUFxQixDQUFDQztRQUMxQixPQUFPOUIsU0FBUytCLE1BQU0sQ0FBQ0wsQ0FBQUEsVUFBV0EsUUFBUUksU0FBUyxLQUFLQTtJQUMxRDtJQUVBLE1BQU1FLDJCQUEyQixDQUFDQztRQUNoQyxPQUFPakMsU0FBUytCLE1BQU0sQ0FBQ0wsQ0FBQUEsVUFBV0EsUUFBUUksU0FBUyxLQUFLRztJQUMxRDtJQUVBLE1BQU1DLHNCQUFzQixDQUFDQztRQUMzQixPQUFPckMsU0FBU2lDLE1BQU0sQ0FBQ1AsQ0FBQUEsVUFBV0EsUUFBUVcsUUFBUSxLQUFLQTtJQUN6RDtJQUVBLE1BQU1DLDRCQUE0QixDQUFDQztRQUNqQyxPQUFPbkMsZUFBZTZCLE1BQU0sQ0FBQ0gsQ0FBQUEsZ0JBQWlCQSxjQUFjUyxRQUFRLEtBQUtBO0lBQzNFO0lBRUEsTUFBTUMsdUJBQXVCLENBQUNDO1FBQzVCLE9BQU96QyxTQUFTaUMsTUFBTSxDQUFDUCxDQUFBQSxVQUFXQSxRQUFRZSxTQUFTLEtBQUtBO0lBQzFEO0lBRUEsTUFBTUMsNkJBQTZCLENBQUNEO1FBQ2xDLE9BQU9yQyxlQUFlNkIsTUFBTSxDQUFDSCxDQUFBQSxnQkFBaUJBLGNBQWNXLFNBQVMsS0FBS0E7SUFDNUU7SUFFQSxNQUFNRSxzQkFBc0IsQ0FBQ0M7UUFDM0IsT0FBTzVDLFNBQVNpQyxNQUFNLENBQUNQLENBQUFBLFVBQVdBLFFBQVFrQixNQUFNLEtBQUtBO0lBQ3ZEO0lBRUEsTUFBTUMsNEJBQTRCLENBQUNEO1FBQ2pDLE9BQU94QyxlQUFlNkIsTUFBTSxDQUFDSCxDQUFBQSxnQkFBaUJBLGNBQWNjLE1BQU0sS0FBS0E7SUFDekU7SUFFQSxNQUFNRSxxQkFBcUI7UUFDekIsTUFBTUMsTUFBTSxJQUFJQztRQUNoQixPQUFPaEQsU0FBU2lDLE1BQU0sQ0FBQ1AsQ0FBQUEsVUFDckJBLFFBQVFrQixNQUFNLEtBQUssVUFDbkJsQixRQUFRa0IsTUFBTSxLQUFLLGVBQ25CLElBQUlJLEtBQUt0QixRQUFRdUIsT0FBTyxJQUFJRjtJQUVoQztJQUVBLE1BQU1HLDJCQUEyQjtRQUMvQixNQUFNSCxNQUFNLElBQUlDO1FBQ2hCLE9BQU81QyxlQUFlNkIsTUFBTSxDQUFDSCxDQUFBQSxnQkFDM0JBLGNBQWNjLE1BQU0sS0FBSyxVQUN6QmQsY0FBY2MsTUFBTSxLQUFLLGVBQ3pCLElBQUlJLEtBQUtsQixjQUFjbUIsT0FBTyxJQUFJRjtJQUV0QztJQUVBLE1BQU1JLHNCQUFzQjtRQUMxQixPQUFPbkQsU0FDSmlDLE1BQU0sQ0FBQ1AsQ0FBQUEsVUFBV0EsUUFBUWtCLE1BQU0sS0FBSyxVQUFVbEIsUUFBUWtCLE1BQU0sS0FBSyxhQUNsRVEsTUFBTSxDQUFDLENBQUNDLE9BQU8zQixVQUFZMkIsUUFBUTNCLFFBQVE0QixXQUFXLEVBQUU7SUFDN0Q7SUFFQSxNQUFNQyw0QkFBNEI7UUFDaEMsT0FBT25ELGVBQ0o2QixNQUFNLENBQUNILENBQUFBLGdCQUFpQkEsY0FBY2MsTUFBTSxLQUFLLFVBQVVkLGNBQWNjLE1BQU0sS0FBSyxhQUNwRlEsTUFBTSxDQUFDLENBQUNDLE9BQU92QixnQkFBa0J1QixRQUFRdkIsY0FBY3dCLFdBQVcsRUFBRTtJQUN6RTtJQUVBLE1BQU1FLGVBQWU7UUFDbkIsT0FBT3RELFNBQVNrRCxNQUFNLENBQUMsQ0FBQ0MsT0FBT3pCLFVBQVl5QixRQUFRekIsUUFBUTZCLE1BQU0sRUFBRTtJQUNyRTtJQUVBLE1BQU1DLHFCQUFxQjtRQUN6QixPQUFPeEQsU0FBU2tELE1BQU0sQ0FBQyxDQUFDQyxPQUFPekIsVUFBWXlCLFFBQVF6QixRQUFRNkIsTUFBTSxFQUFFO0lBQ3JFO0lBRUEsTUFBTUUsYUFBYSxDQUFDQztRQUNsQix1QkFBdUI7UUFDdkIsTUFBTUMsUUFBUSxDQUFDQyxLQUFLQyxHQUFHLElBQUkvRCxTQUFTZ0UsR0FBRyxDQUFDQyxDQUFBQSxJQUFLQyxTQUFTRCxFQUFFekMsRUFBRSxLQUFLLE1BQU0sR0FBRzJDLFFBQVE7UUFFaEYsMEJBQTBCO1FBQzFCLE1BQU1DLFFBQVEsSUFBSXBCO1FBQ2xCLE1BQU1xQixPQUFPRCxNQUFNRSxXQUFXO1FBQzlCLE1BQU1DLFFBQVFDLE9BQU9KLE1BQU1LLFFBQVEsS0FBSyxHQUFHQyxRQUFRLENBQUMsR0FBRztRQUN2RCxNQUFNQyxlQUFlM0UsU0FBU2lDLE1BQU0sQ0FBQzJDLENBQUFBLE1BQ25DQSxJQUFJQyxhQUFhLENBQUNDLFFBQVEsQ0FBQyxHQUFVUCxPQUFQRixNQUFhLE9BQU5FLFNBQ3JDdkQsTUFBTSxHQUFHO1FBQ1gsTUFBTTZELGdCQUFnQixXQUFrQk4sT0FBUEYsTUFBZ0JHLE9BQVRELE9BQU0sS0FBeUMsT0FBdENDLE9BQU9HLGNBQWNELFFBQVEsQ0FBQyxHQUFHO1FBRWxGLE1BQU1LLGFBQXNCO1lBQzFCdkQsSUFBSXFDO1lBQ0pnQjtZQUNBeEMsVUFBVXVCLFlBQVl2QixRQUFRLElBQUk7WUFDbENJLFdBQVdtQixZQUFZbkIsU0FBUztZQUNoQ3VDLGFBQWFwQixZQUFZb0IsV0FBVztZQUNwQ3ZCLFFBQVFHLFlBQVlILE1BQU0sSUFBSTtZQUM5QndCLFdBQVdyQixZQUFZcUIsU0FBUyxJQUFJLENBQUNyQixZQUFZSCxNQUFNLElBQUksS0FBSztZQUNoRUgsYUFBYU0sWUFBWU4sV0FBVyxJQUFJLENBQUNNLFlBQVlILE1BQU0sSUFBSSxLQUFLO1lBQ3BFYixRQUFRZ0IsWUFBWWhCLE1BQU0sSUFBSTtZQUM5QnNDLFdBQVd0QixZQUFZc0IsU0FBUyxJQUFJLElBQUlsQztZQUN4Q0MsU0FBU1csWUFBWVgsT0FBTyxJQUFJLElBQUlELEtBQUtBLEtBQUtELEdBQUcsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO1lBQzFFb0MsVUFBVXZCLFlBQVl1QixRQUFRO1lBQzlCQyxlQUFleEIsWUFBWXdCLGFBQWE7WUFDeENDLFdBQVcsSUFBSXJDO1lBQ2YsR0FBR1ksV0FBVztRQUNoQjtRQUVBM0QsWUFBWXFGLENBQUFBLGVBQWdCO21CQUFJQTtnQkFBY1A7YUFBVztRQUN6RCxPQUFPQTtJQUNUO0lBRUEsTUFBTVEsZ0JBQWdCLENBQUMvRCxJQUFZZ0U7UUFDakN2RixZQUFZcUYsQ0FBQUE7WUFDVixNQUFNRyxRQUFRSCxhQUFhSSxTQUFTLENBQUNoRSxDQUFBQSxVQUFXQSxRQUFRRixFQUFFLEtBQUtBO1lBQy9ELElBQUlpRSxVQUFVLENBQUMsR0FBRyxPQUFPSDtZQUV6QixNQUFNSyxpQkFBaUI7Z0JBQ3JCLEdBQUdMLFlBQVksQ0FBQ0csTUFBTTtnQkFDdEIsR0FBR0QsT0FBTztZQUNaO1lBRUEsaURBQWlEO1lBQ2pELElBQUlBLFFBQVEvQixNQUFNLElBQUksQ0FBQytCLFFBQVFQLFNBQVMsRUFBRTtnQkFDeENVLGVBQWVWLFNBQVMsR0FBR08sUUFBUS9CLE1BQU0sR0FBRztnQkFDNUNrQyxlQUFlckMsV0FBVyxHQUFHa0MsUUFBUS9CLE1BQU0sR0FBRztZQUNoRDtZQUVBLE1BQU1tQyxjQUFjO21CQUFJTjthQUFhO1lBQ3JDTSxXQUFXLENBQUNILE1BQU0sR0FBR0U7WUFDckIsT0FBT0M7UUFDVDtRQUNBLE9BQU87SUFDVDtJQUVBLE1BQU1DLGdCQUFnQixDQUFDckU7UUFDckIsa0NBQWtDO1FBQ2xDckIsWUFBWTJGLENBQUFBLGVBQWdCQSxhQUFhN0QsTUFBTSxDQUFDTCxDQUFBQSxVQUFXQSxRQUFRSSxTQUFTLEtBQUtSO1FBQ2pGdkIsWUFBWXFGLENBQUFBLGVBQWdCQSxhQUFhckQsTUFBTSxDQUFDUCxDQUFBQSxVQUFXQSxRQUFRRixFQUFFLEtBQUtBO1FBQzFFLE9BQU87SUFDVDtJQUVBLE1BQU11RSxtQkFBbUIsQ0FBQ0M7UUFDeEIsdUJBQXVCO1FBQ3ZCLE1BQU1uQyxRQUFRLENBQUNDLEtBQUtDLEdBQUcsSUFBSTNELGVBQWU0RCxHQUFHLENBQUNDLENBQUFBLElBQUtDLFNBQVNELEVBQUV6QyxFQUFFLEtBQUssTUFBTSxHQUFHMkMsUUFBUTtRQUV0RiwwQkFBMEI7UUFDMUIsTUFBTUMsUUFBUSxJQUFJcEI7UUFDbEIsTUFBTXFCLE9BQU9ELE1BQU1FLFdBQVc7UUFDOUIsTUFBTUMsUUFBUUMsT0FBT0osTUFBTUssUUFBUSxLQUFLLEdBQUdDLFFBQVEsQ0FBQyxHQUFHO1FBQ3ZELE1BQU1DLGVBQWV2RSxlQUFlNkIsTUFBTSxDQUFDMkMsQ0FBQUEsTUFDekNBLElBQUlDLGFBQWEsQ0FBQ0MsUUFBUSxDQUFDLEdBQVVQLE9BQVBGLE1BQWEsT0FBTkUsU0FDckN2RCxNQUFNLEdBQUc7UUFDWCxNQUFNNkQsZ0JBQWdCLFVBQWlCTixPQUFQRixNQUFnQkcsT0FBVEQsT0FBTSxLQUF5QyxPQUF0Q0MsT0FBT0csY0FBY0QsUUFBUSxDQUFDLEdBQUc7UUFFakYsTUFBTXVCLG1CQUFrQztZQUN0Q3pFLElBQUlxQztZQUNKZ0I7WUFDQXRDLFVBQVV5RCxrQkFBa0J6RCxRQUFRLElBQUk7WUFDeENFLFdBQVd1RCxrQkFBa0J2RCxTQUFTO1lBQ3RDeUQsaUJBQWlCRixrQkFBa0JFLGVBQWU7WUFDbER6QyxRQUFRdUMsa0JBQWtCdkMsTUFBTSxJQUFJO1lBQ3BDd0IsV0FBV2Usa0JBQWtCZixTQUFTLElBQUksQ0FBQ2Usa0JBQWtCdkMsTUFBTSxJQUFJLEtBQUs7WUFDNUVILGFBQWEwQyxrQkFBa0IxQyxXQUFXLElBQUksQ0FBQzBDLGtCQUFrQnZDLE1BQU0sSUFBSSxLQUFLO1lBQ2hGYixRQUFRb0Qsa0JBQWtCcEQsTUFBTSxJQUFJO1lBQ3BDc0MsV0FBV2Msa0JBQWtCZCxTQUFTLElBQUksSUFBSWxDO1lBQzlDQyxTQUFTK0Msa0JBQWtCL0MsT0FBTyxJQUFJLElBQUlELEtBQUtBLEtBQUtELEdBQUcsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO1lBQ2hGb0MsVUFBVWEsa0JBQWtCYixRQUFRO1lBQ3BDQyxlQUFlWSxrQkFBa0JaLGFBQWE7WUFDOUNDLFdBQVcsSUFBSXJDO1lBQ2ZtRCxVQUFVSCxrQkFBa0JHLFFBQVE7WUFDcENDLFNBQVNKLGtCQUFrQkksT0FBTztZQUNsQ0MsZUFBZUwsa0JBQWtCSyxhQUFhO1lBQzlDLEdBQUdMLGlCQUFpQjtRQUN0QjtRQUVBM0Ysa0JBQWtCaUcsQ0FBQUEscUJBQXNCO21CQUFJQTtnQkFBb0JMO2FBQWlCO1FBQ2pGLE9BQU9BO0lBQ1Q7SUFFQSxNQUFNTSxzQkFBc0IsQ0FBQy9FLElBQVlnRTtRQUN2Q25GLGtCQUFrQmlHLENBQUFBO1lBQ2hCLE1BQU1iLFFBQVFhLG1CQUFtQlosU0FBUyxDQUFDNUQsQ0FBQUEsZ0JBQWlCQSxjQUFjTixFQUFFLEtBQUtBO1lBQ2pGLElBQUlpRSxVQUFVLENBQUMsR0FBRyxPQUFPYTtZQUV6QixNQUFNRSx1QkFBdUI7Z0JBQzNCLEdBQUdGLGtCQUFrQixDQUFDYixNQUFNO2dCQUM1QixHQUFHRCxPQUFPO1lBQ1o7WUFFQSxpREFBaUQ7WUFDakQsSUFBSUEsUUFBUS9CLE1BQU0sSUFBSSxDQUFDK0IsUUFBUVAsU0FBUyxFQUFFO2dCQUN4Q3VCLHFCQUFxQnZCLFNBQVMsR0FBR08sUUFBUS9CLE1BQU0sR0FBRztnQkFDbEQrQyxxQkFBcUJsRCxXQUFXLEdBQUdrQyxRQUFRL0IsTUFBTSxHQUFHO1lBQ3REO1lBRUEsTUFBTWdELG9CQUFvQjttQkFBSUg7YUFBbUI7WUFDakRHLGlCQUFpQixDQUFDaEIsTUFBTSxHQUFHZTtZQUMzQixPQUFPQztRQUNUO1FBQ0EsT0FBTztJQUNUO0lBRUEsTUFBTUMsc0JBQXNCLENBQUNsRjtRQUMzQixrQ0FBa0M7UUFDbENyQixZQUFZMkYsQ0FBQUEsZUFBZ0JBLGFBQWE3RCxNQUFNLENBQUNMLENBQUFBLFVBQVdBLFFBQVFJLFNBQVMsS0FBS1I7UUFDakZuQixrQkFBa0JpRyxDQUFBQSxxQkFBc0JBLG1CQUFtQnJFLE1BQU0sQ0FBQ0gsQ0FBQUEsZ0JBQWlCQSxjQUFjTixFQUFFLEtBQUtBO1FBQ3hHLE9BQU87SUFDVDtJQUVBLE1BQU1tRixhQUFhLENBQUNDO1FBQ2xCLHVCQUF1QjtRQUN2QixNQUFNL0MsUUFBUSxDQUFDQyxLQUFLQyxHQUFHLElBQUk3RCxTQUFTOEQsR0FBRyxDQUFDNkMsQ0FBQUEsSUFBSzNDLFNBQVMyQyxFQUFFckYsRUFBRSxLQUFLLE1BQU0sR0FBRzJDLFFBQVE7UUFFaEYsTUFBTTJDLGFBQXNCO1lBQzFCdEYsSUFBSXFDO1lBQ0o3QixXQUFXNEUsWUFBWTVFLFNBQVMsSUFBSTtZQUNwQ3lCLFFBQVFtRCxZQUFZbkQsTUFBTSxJQUFJO1lBQzlCc0QsUUFBUUgsWUFBWUcsTUFBTSxJQUFJO1lBQzlCQyxXQUFXSixZQUFZSSxTQUFTLElBQUk7WUFDcENDLGNBQWNMLFlBQVlLLFlBQVksSUFBSSxJQUFJakU7WUFDOUNrRSxPQUFPTixZQUFZTSxLQUFLO1lBQ3hCLEdBQUdOLFdBQVc7UUFDaEI7UUFFQXpHLFlBQVkyRixDQUFBQSxlQUFnQjttQkFBSUE7Z0JBQWNnQjthQUFXO1FBRXpELHNDQUFzQztRQUN0QyxNQUFNcEYsVUFBVUgsV0FBV3VGLFdBQVc5RSxTQUFTO1FBQy9DLElBQUlOLFNBQVM7WUFDWCxNQUFNeUYsY0FBYzttQkFBSWpIO2dCQUFVNEc7YUFBVyxDQUFDN0UsTUFBTSxDQUFDNEUsQ0FBQUEsSUFBS0EsRUFBRTdFLFNBQVMsS0FBS04sUUFBUUYsRUFBRTtZQUNwRixNQUFNNEYsZ0JBQWdCRCxZQUFZL0QsTUFBTSxDQUFDLENBQUNpRSxLQUFLUixJQUFNUSxNQUFNUixFQUFFcEQsTUFBTSxFQUFFO1lBRXJFLElBQUkyRCxpQkFBaUIxRixRQUFRNEIsV0FBVyxJQUFJNUIsUUFBUWtCLE1BQU0sS0FBSyxRQUFRO2dCQUNyRTJDLGNBQWM3RCxRQUFRRixFQUFFLEVBQUU7b0JBQ3hCb0IsUUFBUTtvQkFDUnVDLFVBQVUyQixXQUFXRyxZQUFZO29CQUNqQzdCLGVBQWUwQixXQUFXQyxNQUFNO2dCQUNsQztZQUNGO1FBQ0Y7UUFFQSxPQUFPRDtJQUNUO0lBRUEsTUFBTVEsbUJBQW1CLENBQUNWO1FBQ3hCLHVCQUF1QjtRQUN2QixNQUFNL0MsUUFBUSxDQUFDQyxLQUFLQyxHQUFHLElBQUk3RCxTQUFTOEQsR0FBRyxDQUFDNkMsQ0FBQUEsSUFBSzNDLFNBQVMyQyxFQUFFckYsRUFBRSxLQUFLLE1BQU0sR0FBRzJDLFFBQVE7UUFFaEYsTUFBTTJDLGFBQXNCO1lBQzFCdEYsSUFBSXFDO1lBQ0o3QixXQUFXNEUsWUFBWTVFLFNBQVMsSUFBSTtZQUNwQ3lCLFFBQVFtRCxZQUFZbkQsTUFBTSxJQUFJO1lBQzlCc0QsUUFBUUgsWUFBWUcsTUFBTSxJQUFJO1lBQzlCQyxXQUFXSixZQUFZSSxTQUFTLElBQUk7WUFDcENDLGNBQWNMLFlBQVlLLFlBQVksSUFBSSxJQUFJakU7WUFDOUNrRSxPQUFPTixZQUFZTSxLQUFLO1lBQ3hCLEdBQUdOLFdBQVc7UUFDaEI7UUFFQXpHLFlBQVkyRixDQUFBQSxlQUFnQjttQkFBSUE7Z0JBQWNnQjthQUFXO1FBRXpELDZDQUE2QztRQUM3QyxNQUFNaEYsZ0JBQWdCRCxpQkFBaUJpRixXQUFXOUUsU0FBUztRQUMzRCxJQUFJRixlQUFlO1lBQ2pCLE1BQU1xRixjQUFjO21CQUFJakg7Z0JBQVU0RzthQUFXLENBQUM3RSxNQUFNLENBQUM0RSxDQUFBQSxJQUFLQSxFQUFFN0UsU0FBUyxLQUFLRixjQUFjTixFQUFFO1lBQzFGLE1BQU00RixnQkFBZ0JELFlBQVkvRCxNQUFNLENBQUMsQ0FBQ2lFLEtBQUtSLElBQU1RLE1BQU1SLEVBQUVwRCxNQUFNLEVBQUU7WUFFckUsSUFBSTJELGlCQUFpQnRGLGNBQWN3QixXQUFXLElBQUl4QixjQUFjYyxNQUFNLEtBQUssUUFBUTtnQkFDakYyRCxvQkFBb0J6RSxjQUFjTixFQUFFLEVBQUU7b0JBQ3BDb0IsUUFBUTtvQkFDUnVDLFVBQVUyQixXQUFXRyxZQUFZO29CQUNqQzdCLGVBQWUwQixXQUFXQyxNQUFNO2dCQUNsQztZQUNGO1FBQ0Y7UUFFQSxPQUFPRDtJQUNUO0lBRUEsTUFBTVMsZ0JBQWdCLENBQUMvRixJQUFZZ0U7UUFDakNyRixZQUFZMkYsQ0FBQUE7WUFDVixNQUFNTCxRQUFRSyxhQUFhSixTQUFTLENBQUM5RCxDQUFBQSxVQUFXQSxRQUFRSixFQUFFLEtBQUtBO1lBQy9ELElBQUlpRSxVQUFVLENBQUMsR0FBRyxPQUFPSztZQUV6QixNQUFNMEIsaUJBQWlCO2dCQUNyQixHQUFHMUIsWUFBWSxDQUFDTCxNQUFNO2dCQUN0QixHQUFHRCxPQUFPO1lBQ1o7WUFFQSxNQUFNaUMsY0FBYzttQkFBSTNCO2FBQWE7WUFDckMyQixXQUFXLENBQUNoQyxNQUFNLEdBQUcrQjtZQUNyQixPQUFPQztRQUNUO1FBQ0EsT0FBTztJQUNUO0lBRUEsTUFBTUMsZ0JBQWdCLENBQUNsRztRQUNyQixNQUFNSSxVQUFVRCxXQUFXSDtRQUMzQixJQUFJSSxTQUFTO1lBQ1gsa0NBQWtDO1lBQ2xDLE1BQU1GLFVBQVVILFdBQVdLLFFBQVFJLFNBQVM7WUFDNUMsSUFBSU4sV0FBV0EsUUFBUWtCLE1BQU0sS0FBSyxRQUFRO2dCQUN4QyxNQUFNK0Usb0JBQW9CekgsU0FBUytCLE1BQU0sQ0FBQzRFLENBQUFBLElBQUtBLEVBQUU3RSxTQUFTLEtBQUtKLFFBQVFJLFNBQVMsSUFBSTZFLEVBQUVyRixFQUFFLEtBQUtBO2dCQUM3RixNQUFNb0cseUJBQXlCRCxrQkFBa0J2RSxNQUFNLENBQUMsQ0FBQ2lFLEtBQUtSLElBQU1RLE1BQU1SLEVBQUVwRCxNQUFNLEVBQUU7Z0JBRXBGLElBQUltRSx5QkFBeUJsRyxRQUFRNEIsV0FBVyxFQUFFO29CQUNoRGlDLGNBQWM3RCxRQUFRRixFQUFFLEVBQUU7d0JBQUVvQixRQUFRO3dCQUFRdUMsVUFBVXpGO3dCQUFXMEYsZUFBZTFGO29CQUFVO2dCQUM1RjtZQUNGO1lBRUEseUNBQXlDO1lBQ3pDLE1BQU1vQyxnQkFBZ0JELGlCQUFpQkQsUUFBUUksU0FBUztZQUN4RCxJQUFJRixpQkFBaUJBLGNBQWNjLE1BQU0sS0FBSyxRQUFRO2dCQUNwRCxNQUFNK0Usb0JBQW9CekgsU0FBUytCLE1BQU0sQ0FBQzRFLENBQUFBLElBQUtBLEVBQUU3RSxTQUFTLEtBQUtKLFFBQVFJLFNBQVMsSUFBSTZFLEVBQUVyRixFQUFFLEtBQUtBO2dCQUM3RixNQUFNb0cseUJBQXlCRCxrQkFBa0J2RSxNQUFNLENBQUMsQ0FBQ2lFLEtBQUtSLElBQU1RLE1BQU1SLEVBQUVwRCxNQUFNLEVBQUU7Z0JBRXBGLElBQUltRSx5QkFBeUI5RixjQUFjd0IsV0FBVyxFQUFFO29CQUN0RGlELG9CQUFvQnpFLGNBQWNOLEVBQUUsRUFBRTt3QkFBRW9CLFFBQVE7d0JBQVl1QyxVQUFVekY7d0JBQVcwRixlQUFlMUY7b0JBQVU7Z0JBQzVHO1lBQ0Y7UUFDRjtRQUVBUyxZQUFZMkYsQ0FBQUEsZUFBZ0JBLGFBQWE3RCxNQUFNLENBQUNMLENBQUFBLFVBQVdBLFFBQVFKLEVBQUUsS0FBS0E7UUFDMUUsT0FBTztJQUNUO0lBRUEsTUFBTXFHLHFCQUFxQjtRQUN6QixJQUFJO1lBQ0YsTUFBTXZILGlCQUFpQkMsYUFBYUMsT0FBTyxDQUFDO1lBQzVDLE1BQU1DLGlCQUFpQkYsYUFBYUMsT0FBTyxDQUFDO1lBQzVDLE1BQU1FLHVCQUF1QkgsYUFBYUMsT0FBTyxDQUFDO1lBRWxELElBQUlGLGdCQUFnQjtnQkFDbEJMLFlBQVlXLEtBQUtDLEtBQUssQ0FBQ1A7WUFDekIsT0FBTztnQkFDTEwsWUFBWVYsd0RBQVlBO1lBQzFCO1lBRUEsSUFBSWtCLGdCQUFnQjtnQkFDbEJOLFlBQVlTLEtBQUtDLEtBQUssQ0FBQ0o7WUFDekIsT0FBTztnQkFDTE4sWUFBWVgsd0RBQVlBO1lBQzFCO1lBRUEsSUFBSWtCLHNCQUFzQjtnQkFDeEJMLGtCQUFrQk8sS0FBS0MsS0FBSyxDQUFDSDtZQUMvQjtRQUNGLEVBQUUsT0FBT1MsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsa0NBQWtDQTtZQUNoRGxCLFlBQVlWLHdEQUFZQTtZQUN4QlksWUFBWVgsd0RBQVlBO1lBQ3hCYSxrQkFBa0IsRUFBRTtRQUN0QjtJQUNGO0lBRUEsTUFBTXlILFFBQTRCO1FBQ2hDOUg7UUFDQUU7UUFDQUU7UUFDQW1CO1FBQ0FJO1FBQ0FFO1FBQ0FFO1FBQ0FHO1FBQ0F5QjtRQUNBNEI7UUFDQU07UUFDQUU7UUFDQVE7UUFDQUc7UUFDQUM7UUFDQVc7UUFDQUM7UUFDQUc7UUFDQXRGO1FBQ0FFO1FBQ0FFO1FBQ0FFO1FBQ0FDO1FBQ0FFO1FBQ0FDO1FBQ0FJO1FBQ0FDO1FBQ0FJO1FBQ0FDO1FBQ0FFO1FBQ0FtRTtJQUNGO0lBRUEscUJBQ0UsOERBQUNwSSxlQUFlc0ksUUFBUTtRQUFDRCxPQUFPQTtrQkFDN0IvSDs7Ozs7O0FBR1AsRUFBQztJQW5kWUQ7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbnRleHRzL0ZpbmFuY2VDb250ZXh0LnRzeD85Zjg2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xyXG5cclxuaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgSW52b2ljZSwgUGF5bWVudCwgSW52b2ljZVN0YXR1cywgUGF5bWVudE1ldGhvZCwgVmVuZG9ySW52b2ljZSwgVmVuZG9ySW52b2ljZVN0YXR1cyB9IGZyb20gJ0AvdHlwZXMnXHJcbmltcG9ydCB7IG1vY2tJbnZvaWNlcywgbW9ja1BheW1lbnRzIH0gZnJvbSAnQC9saWIvbW9jay1kYXRhJ1xyXG5cclxuaW50ZXJmYWNlIEZpbmFuY2VDb250ZXh0VHlwZSB7XHJcbiAgaW52b2ljZXM6IEludm9pY2VbXVxyXG4gIHBheW1lbnRzOiBQYXltZW50W11cclxuICB2ZW5kb3JJbnZvaWNlczogVmVuZG9ySW52b2ljZVtdXHJcbiAgZ2V0SW52b2ljZTogKGlkOiBzdHJpbmcpID0+IEludm9pY2UgfCB1bmRlZmluZWRcclxuICBnZXRQYXltZW50OiAoaWQ6IHN0cmluZykgPT4gUGF5bWVudCB8IHVuZGVmaW5lZFxyXG4gIGdldFZlbmRvckludm9pY2U6IChpZDogc3RyaW5nKSA9PiBWZW5kb3JJbnZvaWNlIHwgdW5kZWZpbmVkXHJcbiAgZ2V0SW52b2ljZVBheW1lbnRzOiAoaW52b2ljZUlkOiBzdHJpbmcpID0+IFBheW1lbnRbXVxyXG4gIGdldFZlbmRvckludm9pY2VQYXltZW50czogKHZlbmRvckludm9pY2VJZDogc3RyaW5nKSA9PiBQYXltZW50W11cclxuICBhZGRJbnZvaWNlOiAoaW52b2ljZTogUGFydGlhbDxJbnZvaWNlPikgPT4gSW52b2ljZVxyXG4gIHVwZGF0ZUludm9pY2U6IChpZDogc3RyaW5nLCB1cGRhdGVzOiBQYXJ0aWFsPEludm9pY2U+KSA9PiBib29sZWFuXHJcbiAgZGVsZXRlSW52b2ljZTogKGlkOiBzdHJpbmcpID0+IGJvb2xlYW5cclxuICBhZGRWZW5kb3JJbnZvaWNlOiAodmVuZG9ySW52b2ljZTogUGFydGlhbDxWZW5kb3JJbnZvaWNlPikgPT4gVmVuZG9ySW52b2ljZVxyXG4gIHVwZGF0ZVZlbmRvckludm9pY2U6IChpZDogc3RyaW5nLCB1cGRhdGVzOiBQYXJ0aWFsPFZlbmRvckludm9pY2U+KSA9PiBib29sZWFuXHJcbiAgZGVsZXRlVmVuZG9ySW52b2ljZTogKGlkOiBzdHJpbmcpID0+IGJvb2xlYW5cclxuICBhZGRQYXltZW50OiAocGF5bWVudDogUGFydGlhbDxQYXltZW50PikgPT4gUGF5bWVudFxyXG4gIGFkZFZlbmRvclBheW1lbnQ6IChwYXltZW50OiBQYXJ0aWFsPFBheW1lbnQ+KSA9PiBQYXltZW50XHJcbiAgdXBkYXRlUGF5bWVudDogKGlkOiBzdHJpbmcsIHVwZGF0ZXM6IFBhcnRpYWw8UGF5bWVudD4pID0+IGJvb2xlYW5cclxuICBkZWxldGVQYXltZW50OiAoaWQ6IHN0cmluZykgPT4gYm9vbGVhblxyXG4gIGdldEludm9pY2VzQnlDbGllbnQ6IChjbGllbnRJZDogc3RyaW5nKSA9PiBJbnZvaWNlW11cclxuICBnZXRWZW5kb3JJbnZvaWNlc0J5VmVuZG9yOiAodmVuZG9ySWQ6IHN0cmluZykgPT4gVmVuZG9ySW52b2ljZVtdXHJcbiAgZ2V0SW52b2ljZXNCeVByb2plY3Q6IChwcm9qZWN0SWQ6IHN0cmluZykgPT4gSW52b2ljZVtdXHJcbiAgZ2V0VmVuZG9ySW52b2ljZXNCeVByb2plY3Q6IChwcm9qZWN0SWQ6IHN0cmluZykgPT4gVmVuZG9ySW52b2ljZVtdXHJcbiAgZ2V0SW52b2ljZXNCeVN0YXR1czogKHN0YXR1czogSW52b2ljZVN0YXR1cykgPT4gSW52b2ljZVtdXHJcbiAgZ2V0VmVuZG9ySW52b2ljZXNCeVN0YXR1czogKHN0YXR1czogVmVuZG9ySW52b2ljZVN0YXR1cykgPT4gVmVuZG9ySW52b2ljZVtdXHJcbiAgZ2V0T3ZlcmR1ZUludm9pY2VzOiAoKSA9PiBJbnZvaWNlW11cclxuICBnZXRPdmVyZHVlVmVuZG9ySW52b2ljZXM6ICgpID0+IFZlbmRvckludm9pY2VbXVxyXG4gIGdldFRvdGFsT3V0c3RhbmRpbmc6ICgpID0+IG51bWJlclxyXG4gIGdldFRvdGFsVmVuZG9yT3V0c3RhbmRpbmc6ICgpID0+IG51bWJlclxyXG4gIGdldFRvdGFsUGFpZDogKCkgPT4gbnVtYmVyXHJcbiAgZ2V0VG90YWxWZW5kb3JQYWlkOiAoKSA9PiBudW1iZXJcclxuICByZWZyZXNoRmluYW5jZURhdGE6ICgpID0+IHZvaWRcclxufVxyXG5cclxuY29uc3QgRmluYW5jZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PEZpbmFuY2VDb250ZXh0VHlwZSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKVxyXG5cclxuZXhwb3J0IGNvbnN0IHVzZUZpbmFuY2UgPSAoKSA9PiB7XHJcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoRmluYW5jZUNvbnRleHQpXHJcbiAgaWYgKGNvbnRleHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VGaW5hbmNlIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBGaW5hbmNlUHJvdmlkZXInKVxyXG4gIH1cclxuICByZXR1cm4gY29udGV4dFxyXG59XHJcblxyXG5pbnRlcmZhY2UgRmluYW5jZVByb3ZpZGVyUHJvcHMge1xyXG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEZpbmFuY2VQcm92aWRlcjogUmVhY3QuRkM8RmluYW5jZVByb3ZpZGVyUHJvcHM+ID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xyXG4gIGNvbnN0IFtpbnZvaWNlcywgc2V0SW52b2ljZXNdID0gdXNlU3RhdGU8SW52b2ljZVtdPihtb2NrSW52b2ljZXMpXHJcbiAgY29uc3QgW3BheW1lbnRzLCBzZXRQYXltZW50c10gPSB1c2VTdGF0ZTxQYXltZW50W10+KG1vY2tQYXltZW50cylcclxuICBjb25zdCBbdmVuZG9ySW52b2ljZXMsIHNldFZlbmRvckludm9pY2VzXSA9IHVzZVN0YXRlPFZlbmRvckludm9pY2VbXT4oW10pXHJcblxyXG4gIC8vIEluaXRpYWxpemUgZmluYW5jZSBkYXRhIGZyb20gbG9jYWxTdG9yYWdlIGlmIGF2YWlsYWJsZVxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBzdG9yZWRJbnZvaWNlcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhbXBlcmVfaW52b2ljZXMnKVxyXG4gICAgICBjb25zdCBzdG9yZWRQYXltZW50cyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhbXBlcmVfcGF5bWVudHMnKVxyXG4gICAgICBjb25zdCBzdG9yZWRWZW5kb3JJbnZvaWNlcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhbXBlcmVfdmVuZG9yX2ludm9pY2VzJylcclxuICAgICAgXHJcbiAgICAgIGlmIChzdG9yZWRJbnZvaWNlcykge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZEludm9pY2VzID0gSlNPTi5wYXJzZShzdG9yZWRJbnZvaWNlcylcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJzZWRJbnZvaWNlcykgJiYgcGFyc2VkSW52b2ljZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgc2V0SW52b2ljZXMocGFyc2VkSW52b2ljZXMpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZiAoc3RvcmVkUGF5bWVudHMpIHtcclxuICAgICAgICBjb25zdCBwYXJzZWRQYXltZW50cyA9IEpTT04ucGFyc2Uoc3RvcmVkUGF5bWVudHMpXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyc2VkUGF5bWVudHMpICYmIHBhcnNlZFBheW1lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHNldFBheW1lbnRzKHBhcnNlZFBheW1lbnRzKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKHN0b3JlZFZlbmRvckludm9pY2VzKSB7XHJcbiAgICAgICAgY29uc3QgcGFyc2VkVmVuZG9ySW52b2ljZXMgPSBKU09OLnBhcnNlKHN0b3JlZFZlbmRvckludm9pY2VzKVxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcnNlZFZlbmRvckludm9pY2VzKSAmJiBwYXJzZWRWZW5kb3JJbnZvaWNlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBzZXRWZW5kb3JJbnZvaWNlcyhwYXJzZWRWZW5kb3JJbnZvaWNlcylcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgZmluYW5jZSBkYXRhIGZyb20gbG9jYWxTdG9yYWdlOicsIGVycm9yKVxyXG4gICAgICBzZXRJbnZvaWNlcyhtb2NrSW52b2ljZXMpXHJcbiAgICAgIHNldFBheW1lbnRzKG1vY2tQYXltZW50cylcclxuICAgICAgc2V0VmVuZG9ySW52b2ljZXMoW10pXHJcbiAgICB9XHJcbiAgfSwgW10pXHJcblxyXG4gIC8vIFNhdmUgaW52b2ljZXMgdG8gbG9jYWxTdG9yYWdlIHdoZW5ldmVyIGludm9pY2VzIGNoYW5nZVxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYW1wZXJlX2ludm9pY2VzJywgSlNPTi5zdHJpbmdpZnkoaW52b2ljZXMpKVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2F2aW5nIGludm9pY2VzIHRvIGxvY2FsU3RvcmFnZTonLCBlcnJvcilcclxuICAgIH1cclxuICB9LCBbaW52b2ljZXNdKVxyXG5cclxuICAvLyBTYXZlIHBheW1lbnRzIHRvIGxvY2FsU3RvcmFnZSB3aGVuZXZlciBwYXltZW50cyBjaGFuZ2VcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2FtcGVyZV9wYXltZW50cycsIEpTT04uc3RyaW5naWZ5KHBheW1lbnRzKSlcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyBwYXltZW50cyB0byBsb2NhbFN0b3JhZ2U6JywgZXJyb3IpXHJcbiAgICB9XHJcbiAgfSwgW3BheW1lbnRzXSlcclxuXHJcbiAgLy8gU2F2ZSB2ZW5kb3IgaW52b2ljZXMgdG8gbG9jYWxTdG9yYWdlIHdoZW5ldmVyIHZlbmRvciBpbnZvaWNlcyBjaGFuZ2VcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2FtcGVyZV92ZW5kb3JfaW52b2ljZXMnLCBKU09OLnN0cmluZ2lmeSh2ZW5kb3JJbnZvaWNlcykpXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzYXZpbmcgdmVuZG9yIGludm9pY2VzIHRvIGxvY2FsU3RvcmFnZTonLCBlcnJvcilcclxuICAgIH1cclxuICB9LCBbdmVuZG9ySW52b2ljZXNdKVxyXG5cclxuICBjb25zdCBnZXRJbnZvaWNlID0gKGlkOiBzdHJpbmcpOiBJbnZvaWNlIHwgdW5kZWZpbmVkID0+IHtcclxuICAgIHJldHVybiBpbnZvaWNlcy5maW5kKGludm9pY2UgPT4gaW52b2ljZS5pZCA9PT0gaWQpXHJcbiAgfVxyXG5cclxuICBjb25zdCBnZXRQYXltZW50ID0gKGlkOiBzdHJpbmcpOiBQYXltZW50IHwgdW5kZWZpbmVkID0+IHtcclxuICAgIHJldHVybiBwYXltZW50cy5maW5kKHBheW1lbnQgPT4gcGF5bWVudC5pZCA9PT0gaWQpXHJcbiAgfVxyXG5cclxuICBjb25zdCBnZXRWZW5kb3JJbnZvaWNlID0gKGlkOiBzdHJpbmcpOiBWZW5kb3JJbnZvaWNlIHwgdW5kZWZpbmVkID0+IHtcclxuICAgIHJldHVybiB2ZW5kb3JJbnZvaWNlcy5maW5kKHZlbmRvckludm9pY2UgPT4gdmVuZG9ySW52b2ljZS5pZCA9PT0gaWQpXHJcbiAgfVxyXG5cclxuICBjb25zdCBnZXRJbnZvaWNlUGF5bWVudHMgPSAoaW52b2ljZUlkOiBzdHJpbmcpOiBQYXltZW50W10gPT4ge1xyXG4gICAgcmV0dXJuIHBheW1lbnRzLmZpbHRlcihwYXltZW50ID0+IHBheW1lbnQuaW52b2ljZUlkID09PSBpbnZvaWNlSWQpXHJcbiAgfVxyXG5cclxuICBjb25zdCBnZXRWZW5kb3JJbnZvaWNlUGF5bWVudHMgPSAodmVuZG9ySW52b2ljZUlkOiBzdHJpbmcpOiBQYXltZW50W10gPT4ge1xyXG4gICAgcmV0dXJuIHBheW1lbnRzLmZpbHRlcihwYXltZW50ID0+IHBheW1lbnQuaW52b2ljZUlkID09PSB2ZW5kb3JJbnZvaWNlSWQpXHJcbiAgfVxyXG5cclxuICBjb25zdCBnZXRJbnZvaWNlc0J5Q2xpZW50ID0gKGNsaWVudElkOiBzdHJpbmcpOiBJbnZvaWNlW10gPT4ge1xyXG4gICAgcmV0dXJuIGludm9pY2VzLmZpbHRlcihpbnZvaWNlID0+IGludm9pY2UuY2xpZW50SWQgPT09IGNsaWVudElkKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgZ2V0VmVuZG9ySW52b2ljZXNCeVZlbmRvciA9ICh2ZW5kb3JJZDogc3RyaW5nKTogVmVuZG9ySW52b2ljZVtdID0+IHtcclxuICAgIHJldHVybiB2ZW5kb3JJbnZvaWNlcy5maWx0ZXIodmVuZG9ySW52b2ljZSA9PiB2ZW5kb3JJbnZvaWNlLnZlbmRvcklkID09PSB2ZW5kb3JJZClcclxuICB9XHJcblxyXG4gIGNvbnN0IGdldEludm9pY2VzQnlQcm9qZWN0ID0gKHByb2plY3RJZDogc3RyaW5nKTogSW52b2ljZVtdID0+IHtcclxuICAgIHJldHVybiBpbnZvaWNlcy5maWx0ZXIoaW52b2ljZSA9PiBpbnZvaWNlLnByb2plY3RJZCA9PT0gcHJvamVjdElkKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgZ2V0VmVuZG9ySW52b2ljZXNCeVByb2plY3QgPSAocHJvamVjdElkOiBzdHJpbmcpOiBWZW5kb3JJbnZvaWNlW10gPT4ge1xyXG4gICAgcmV0dXJuIHZlbmRvckludm9pY2VzLmZpbHRlcih2ZW5kb3JJbnZvaWNlID0+IHZlbmRvckludm9pY2UucHJvamVjdElkID09PSBwcm9qZWN0SWQpXHJcbiAgfVxyXG5cclxuICBjb25zdCBnZXRJbnZvaWNlc0J5U3RhdHVzID0gKHN0YXR1czogSW52b2ljZVN0YXR1cyk6IEludm9pY2VbXSA9PiB7XHJcbiAgICByZXR1cm4gaW52b2ljZXMuZmlsdGVyKGludm9pY2UgPT4gaW52b2ljZS5zdGF0dXMgPT09IHN0YXR1cylcclxuICB9XHJcblxyXG4gIGNvbnN0IGdldFZlbmRvckludm9pY2VzQnlTdGF0dXMgPSAoc3RhdHVzOiBWZW5kb3JJbnZvaWNlU3RhdHVzKTogVmVuZG9ySW52b2ljZVtdID0+IHtcclxuICAgIHJldHVybiB2ZW5kb3JJbnZvaWNlcy5maWx0ZXIodmVuZG9ySW52b2ljZSA9PiB2ZW5kb3JJbnZvaWNlLnN0YXR1cyA9PT0gc3RhdHVzKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgZ2V0T3ZlcmR1ZUludm9pY2VzID0gKCk6IEludm9pY2VbXSA9PiB7XHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpXHJcbiAgICByZXR1cm4gaW52b2ljZXMuZmlsdGVyKGludm9pY2UgPT4gXHJcbiAgICAgIGludm9pY2Uuc3RhdHVzICE9PSAncGFpZCcgJiYgXHJcbiAgICAgIGludm9pY2Uuc3RhdHVzICE9PSAnY2FuY2VsbGVkJyAmJiBcclxuICAgICAgbmV3IERhdGUoaW52b2ljZS5kdWVEYXRlKSA8IG5vd1xyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgZ2V0T3ZlcmR1ZVZlbmRvckludm9pY2VzID0gKCk6IFZlbmRvckludm9pY2VbXSA9PiB7XHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpXHJcbiAgICByZXR1cm4gdmVuZG9ySW52b2ljZXMuZmlsdGVyKHZlbmRvckludm9pY2UgPT4gXHJcbiAgICAgIHZlbmRvckludm9pY2Uuc3RhdHVzICE9PSAncGFpZCcgJiYgXHJcbiAgICAgIHZlbmRvckludm9pY2Uuc3RhdHVzICE9PSAnY2FuY2VsbGVkJyAmJiBcclxuICAgICAgbmV3IERhdGUodmVuZG9ySW52b2ljZS5kdWVEYXRlKSA8IG5vd1xyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgZ2V0VG90YWxPdXRzdGFuZGluZyA9ICgpOiBudW1iZXIgPT4ge1xyXG4gICAgcmV0dXJuIGludm9pY2VzXHJcbiAgICAgIC5maWx0ZXIoaW52b2ljZSA9PiBpbnZvaWNlLnN0YXR1cyAhPT0gJ3BhaWQnICYmIGludm9pY2Uuc3RhdHVzICE9PSAnY2FuY2VsbGVkJylcclxuICAgICAgLnJlZHVjZSgodG90YWwsIGludm9pY2UpID0+IHRvdGFsICsgaW52b2ljZS50b3RhbEFtb3VudCwgMClcclxuICB9XHJcblxyXG4gIGNvbnN0IGdldFRvdGFsVmVuZG9yT3V0c3RhbmRpbmcgPSAoKTogbnVtYmVyID0+IHtcclxuICAgIHJldHVybiB2ZW5kb3JJbnZvaWNlc1xyXG4gICAgICAuZmlsdGVyKHZlbmRvckludm9pY2UgPT4gdmVuZG9ySW52b2ljZS5zdGF0dXMgIT09ICdwYWlkJyAmJiB2ZW5kb3JJbnZvaWNlLnN0YXR1cyAhPT0gJ2NhbmNlbGxlZCcpXHJcbiAgICAgIC5yZWR1Y2UoKHRvdGFsLCB2ZW5kb3JJbnZvaWNlKSA9PiB0b3RhbCArIHZlbmRvckludm9pY2UudG90YWxBbW91bnQsIDApXHJcbiAgfVxyXG5cclxuICBjb25zdCBnZXRUb3RhbFBhaWQgPSAoKTogbnVtYmVyID0+IHtcclxuICAgIHJldHVybiBwYXltZW50cy5yZWR1Y2UoKHRvdGFsLCBwYXltZW50KSA9PiB0b3RhbCArIHBheW1lbnQuYW1vdW50LCAwKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgZ2V0VG90YWxWZW5kb3JQYWlkID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICByZXR1cm4gcGF5bWVudHMucmVkdWNlKCh0b3RhbCwgcGF5bWVudCkgPT4gdG90YWwgKyBwYXltZW50LmFtb3VudCwgMClcclxuICB9XHJcblxyXG4gIGNvbnN0IGFkZEludm9pY2UgPSAoaW52b2ljZURhdGE6IFBhcnRpYWw8SW52b2ljZT4pOiBJbnZvaWNlID0+IHtcclxuICAgIC8vIEdlbmVyYXRlIGEgdW5pcXVlIElEXHJcbiAgICBjb25zdCBuZXdJZCA9IChNYXRoLm1heCguLi5pbnZvaWNlcy5tYXAoaSA9PiBwYXJzZUludChpLmlkKSB8fCAwKSkgKyAxKS50b1N0cmluZygpXHJcbiAgICBcclxuICAgIC8vIEdlbmVyYXRlIGludm9pY2UgbnVtYmVyXHJcbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKClcclxuICAgIGNvbnN0IHllYXIgPSB0b2RheS5nZXRGdWxsWWVhcigpXHJcbiAgICBjb25zdCBtb250aCA9IFN0cmluZyh0b2RheS5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKVxyXG4gICAgY29uc3QgaW52b2ljZUNvdW50ID0gaW52b2ljZXMuZmlsdGVyKGludiA9PiBcclxuICAgICAgaW52Lmludm9pY2VOdW1iZXIuaW5jbHVkZXMoYCR7eWVhcn0ke21vbnRofWApXHJcbiAgICApLmxlbmd0aCArIDFcclxuICAgIGNvbnN0IGludm9pY2VOdW1iZXIgPSBgQU1QLUlOVi0ke3llYXJ9JHttb250aH0tJHtTdHJpbmcoaW52b2ljZUNvdW50KS5wYWRTdGFydCgzLCAnMCcpfWBcclxuICAgIFxyXG4gICAgY29uc3QgbmV3SW52b2ljZTogSW52b2ljZSA9IHtcclxuICAgICAgaWQ6IG5ld0lkLFxyXG4gICAgICBpbnZvaWNlTnVtYmVyLFxyXG4gICAgICBjbGllbnRJZDogaW52b2ljZURhdGEuY2xpZW50SWQgfHwgJycsXHJcbiAgICAgIHByb2plY3RJZDogaW52b2ljZURhdGEucHJvamVjdElkLFxyXG4gICAgICBxdW90YXRpb25JZDogaW52b2ljZURhdGEucXVvdGF0aW9uSWQsXHJcbiAgICAgIGFtb3VudDogaW52b2ljZURhdGEuYW1vdW50IHx8IDAsXHJcbiAgICAgIGdzdEFtb3VudDogaW52b2ljZURhdGEuZ3N0QW1vdW50IHx8IChpbnZvaWNlRGF0YS5hbW91bnQgfHwgMCkgKiAwLjA3LCAvLyA3JSBHU1QgZm9yIFNpbmdhcG9yZVxyXG4gICAgICB0b3RhbEFtb3VudDogaW52b2ljZURhdGEudG90YWxBbW91bnQgfHwgKGludm9pY2VEYXRhLmFtb3VudCB8fCAwKSAqIDEuMDcsXHJcbiAgICAgIHN0YXR1czogaW52b2ljZURhdGEuc3RhdHVzIHx8ICdkcmFmdCcsXHJcbiAgICAgIGlzc3VlRGF0ZTogaW52b2ljZURhdGEuaXNzdWVEYXRlIHx8IG5ldyBEYXRlKCksXHJcbiAgICAgIGR1ZURhdGU6IGludm9pY2VEYXRhLmR1ZURhdGUgfHwgbmV3IERhdGUoRGF0ZS5ub3coKSArIDMwICogMjQgKiA2MCAqIDYwICogMTAwMCksIC8vIDMwIGRheXMgZnJvbSBub3dcclxuICAgICAgcGFpZERhdGU6IGludm9pY2VEYXRhLnBhaWREYXRlLFxyXG4gICAgICBwYXltZW50TWV0aG9kOiBpbnZvaWNlRGF0YS5wYXltZW50TWV0aG9kLFxyXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXHJcbiAgICAgIC4uLmludm9pY2VEYXRhXHJcbiAgICB9XHJcblxyXG4gICAgc2V0SW52b2ljZXMocHJldkludm9pY2VzID0+IFsuLi5wcmV2SW52b2ljZXMsIG5ld0ludm9pY2VdKVxyXG4gICAgcmV0dXJuIG5ld0ludm9pY2VcclxuICB9XHJcblxyXG4gIGNvbnN0IHVwZGF0ZUludm9pY2UgPSAoaWQ6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDxJbnZvaWNlPik6IGJvb2xlYW4gPT4ge1xyXG4gICAgc2V0SW52b2ljZXMocHJldkludm9pY2VzID0+IHtcclxuICAgICAgY29uc3QgaW5kZXggPSBwcmV2SW52b2ljZXMuZmluZEluZGV4KGludm9pY2UgPT4gaW52b2ljZS5pZCA9PT0gaWQpXHJcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBwcmV2SW52b2ljZXNcclxuXHJcbiAgICAgIGNvbnN0IHVwZGF0ZWRJbnZvaWNlID0ge1xyXG4gICAgICAgIC4uLnByZXZJbnZvaWNlc1tpbmRleF0sXHJcbiAgICAgICAgLi4udXBkYXRlc1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBdXRvLWNhbGN1bGF0ZSBHU1QgYW5kIHRvdGFsIGlmIGFtb3VudCBjaGFuZ2VzXHJcbiAgICAgIGlmICh1cGRhdGVzLmFtb3VudCAmJiAhdXBkYXRlcy5nc3RBbW91bnQpIHtcclxuICAgICAgICB1cGRhdGVkSW52b2ljZS5nc3RBbW91bnQgPSB1cGRhdGVzLmFtb3VudCAqIDAuMDdcclxuICAgICAgICB1cGRhdGVkSW52b2ljZS50b3RhbEFtb3VudCA9IHVwZGF0ZXMuYW1vdW50ICogMS4wN1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBuZXdJbnZvaWNlcyA9IFsuLi5wcmV2SW52b2ljZXNdXHJcbiAgICAgIG5ld0ludm9pY2VzW2luZGV4XSA9IHVwZGF0ZWRJbnZvaWNlXHJcbiAgICAgIHJldHVybiBuZXdJbnZvaWNlc1xyXG4gICAgfSlcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG5cclxuICBjb25zdCBkZWxldGVJbnZvaWNlID0gKGlkOiBzdHJpbmcpOiBib29sZWFuID0+IHtcclxuICAgIC8vIEFsc28gZGVsZXRlIGFzc29jaWF0ZWQgcGF5bWVudHNcclxuICAgIHNldFBheW1lbnRzKHByZXZQYXltZW50cyA9PiBwcmV2UGF5bWVudHMuZmlsdGVyKHBheW1lbnQgPT4gcGF5bWVudC5pbnZvaWNlSWQgIT09IGlkKSlcclxuICAgIHNldEludm9pY2VzKHByZXZJbnZvaWNlcyA9PiBwcmV2SW52b2ljZXMuZmlsdGVyKGludm9pY2UgPT4gaW52b2ljZS5pZCAhPT0gaWQpKVxyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIGNvbnN0IGFkZFZlbmRvckludm9pY2UgPSAodmVuZG9ySW52b2ljZURhdGE6IFBhcnRpYWw8VmVuZG9ySW52b2ljZT4pOiBWZW5kb3JJbnZvaWNlID0+IHtcclxuICAgIC8vIEdlbmVyYXRlIGEgdW5pcXVlIElEXHJcbiAgICBjb25zdCBuZXdJZCA9IChNYXRoLm1heCguLi52ZW5kb3JJbnZvaWNlcy5tYXAoaSA9PiBwYXJzZUludChpLmlkKSB8fCAwKSkgKyAxKS50b1N0cmluZygpXHJcbiAgICBcclxuICAgIC8vIEdlbmVyYXRlIGludm9pY2UgbnVtYmVyXHJcbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKClcclxuICAgIGNvbnN0IHllYXIgPSB0b2RheS5nZXRGdWxsWWVhcigpXHJcbiAgICBjb25zdCBtb250aCA9IFN0cmluZyh0b2RheS5nZXRNb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKVxyXG4gICAgY29uc3QgaW52b2ljZUNvdW50ID0gdmVuZG9ySW52b2ljZXMuZmlsdGVyKGludiA9PiBcclxuICAgICAgaW52Lmludm9pY2VOdW1iZXIuaW5jbHVkZXMoYCR7eWVhcn0ke21vbnRofWApXHJcbiAgICApLmxlbmd0aCArIDFcclxuICAgIGNvbnN0IGludm9pY2VOdW1iZXIgPSBgQU1QLVZJLSR7eWVhcn0ke21vbnRofS0ke1N0cmluZyhpbnZvaWNlQ291bnQpLnBhZFN0YXJ0KDMsICcwJyl9YFxyXG4gICAgXHJcbiAgICBjb25zdCBuZXdWZW5kb3JJbnZvaWNlOiBWZW5kb3JJbnZvaWNlID0ge1xyXG4gICAgICBpZDogbmV3SWQsXHJcbiAgICAgIGludm9pY2VOdW1iZXIsXHJcbiAgICAgIHZlbmRvcklkOiB2ZW5kb3JJbnZvaWNlRGF0YS52ZW5kb3JJZCB8fCAnJyxcclxuICAgICAgcHJvamVjdElkOiB2ZW5kb3JJbnZvaWNlRGF0YS5wcm9qZWN0SWQsXHJcbiAgICAgIHB1cmNoYXNlT3JkZXJJZDogdmVuZG9ySW52b2ljZURhdGEucHVyY2hhc2VPcmRlcklkLFxyXG4gICAgICBhbW91bnQ6IHZlbmRvckludm9pY2VEYXRhLmFtb3VudCB8fCAwLFxyXG4gICAgICBnc3RBbW91bnQ6IHZlbmRvckludm9pY2VEYXRhLmdzdEFtb3VudCB8fCAodmVuZG9ySW52b2ljZURhdGEuYW1vdW50IHx8IDApICogMC4wNywgLy8gNyUgR1NUIGZvciBTaW5nYXBvcmVcclxuICAgICAgdG90YWxBbW91bnQ6IHZlbmRvckludm9pY2VEYXRhLnRvdGFsQW1vdW50IHx8ICh2ZW5kb3JJbnZvaWNlRGF0YS5hbW91bnQgfHwgMCkgKiAxLjA3LFxyXG4gICAgICBzdGF0dXM6IHZlbmRvckludm9pY2VEYXRhLnN0YXR1cyB8fCAncmVjZWl2ZWQnLFxyXG4gICAgICBpc3N1ZURhdGU6IHZlbmRvckludm9pY2VEYXRhLmlzc3VlRGF0ZSB8fCBuZXcgRGF0ZSgpLFxyXG4gICAgICBkdWVEYXRlOiB2ZW5kb3JJbnZvaWNlRGF0YS5kdWVEYXRlIHx8IG5ldyBEYXRlKERhdGUubm93KCkgKyAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDApLCAvLyAzMCBkYXlzIGZyb20gbm93XHJcbiAgICAgIHBhaWREYXRlOiB2ZW5kb3JJbnZvaWNlRGF0YS5wYWlkRGF0ZSxcclxuICAgICAgcGF5bWVudE1ldGhvZDogdmVuZG9ySW52b2ljZURhdGEucGF5bWVudE1ldGhvZCxcclxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgICBmaWxlTmFtZTogdmVuZG9ySW52b2ljZURhdGEuZmlsZU5hbWUsXHJcbiAgICAgIGZpbGVVcmw6IHZlbmRvckludm9pY2VEYXRhLmZpbGVVcmwsXHJcbiAgICAgIHByb2Nlc3NlZERhdGE6IHZlbmRvckludm9pY2VEYXRhLnByb2Nlc3NlZERhdGEsXHJcbiAgICAgIC4uLnZlbmRvckludm9pY2VEYXRhXHJcbiAgICB9XHJcblxyXG4gICAgc2V0VmVuZG9ySW52b2ljZXMocHJldlZlbmRvckludm9pY2VzID0+IFsuLi5wcmV2VmVuZG9ySW52b2ljZXMsIG5ld1ZlbmRvckludm9pY2VdKVxyXG4gICAgcmV0dXJuIG5ld1ZlbmRvckludm9pY2VcclxuICB9XHJcblxyXG4gIGNvbnN0IHVwZGF0ZVZlbmRvckludm9pY2UgPSAoaWQ6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDxWZW5kb3JJbnZvaWNlPik6IGJvb2xlYW4gPT4ge1xyXG4gICAgc2V0VmVuZG9ySW52b2ljZXMocHJldlZlbmRvckludm9pY2VzID0+IHtcclxuICAgICAgY29uc3QgaW5kZXggPSBwcmV2VmVuZG9ySW52b2ljZXMuZmluZEluZGV4KHZlbmRvckludm9pY2UgPT4gdmVuZG9ySW52b2ljZS5pZCA9PT0gaWQpXHJcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBwcmV2VmVuZG9ySW52b2ljZXNcclxuXHJcbiAgICAgIGNvbnN0IHVwZGF0ZWRWZW5kb3JJbnZvaWNlID0ge1xyXG4gICAgICAgIC4uLnByZXZWZW5kb3JJbnZvaWNlc1tpbmRleF0sXHJcbiAgICAgICAgLi4udXBkYXRlc1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBdXRvLWNhbGN1bGF0ZSBHU1QgYW5kIHRvdGFsIGlmIGFtb3VudCBjaGFuZ2VzXHJcbiAgICAgIGlmICh1cGRhdGVzLmFtb3VudCAmJiAhdXBkYXRlcy5nc3RBbW91bnQpIHtcclxuICAgICAgICB1cGRhdGVkVmVuZG9ySW52b2ljZS5nc3RBbW91bnQgPSB1cGRhdGVzLmFtb3VudCAqIDAuMDdcclxuICAgICAgICB1cGRhdGVkVmVuZG9ySW52b2ljZS50b3RhbEFtb3VudCA9IHVwZGF0ZXMuYW1vdW50ICogMS4wN1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBuZXdWZW5kb3JJbnZvaWNlcyA9IFsuLi5wcmV2VmVuZG9ySW52b2ljZXNdXHJcbiAgICAgIG5ld1ZlbmRvckludm9pY2VzW2luZGV4XSA9IHVwZGF0ZWRWZW5kb3JJbnZvaWNlXHJcbiAgICAgIHJldHVybiBuZXdWZW5kb3JJbnZvaWNlc1xyXG4gICAgfSlcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG5cclxuICBjb25zdCBkZWxldGVWZW5kb3JJbnZvaWNlID0gKGlkOiBzdHJpbmcpOiBib29sZWFuID0+IHtcclxuICAgIC8vIEFsc28gZGVsZXRlIGFzc29jaWF0ZWQgcGF5bWVudHNcclxuICAgIHNldFBheW1lbnRzKHByZXZQYXltZW50cyA9PiBwcmV2UGF5bWVudHMuZmlsdGVyKHBheW1lbnQgPT4gcGF5bWVudC5pbnZvaWNlSWQgIT09IGlkKSlcclxuICAgIHNldFZlbmRvckludm9pY2VzKHByZXZWZW5kb3JJbnZvaWNlcyA9PiBwcmV2VmVuZG9ySW52b2ljZXMuZmlsdGVyKHZlbmRvckludm9pY2UgPT4gdmVuZG9ySW52b2ljZS5pZCAhPT0gaWQpKVxyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIGNvbnN0IGFkZFBheW1lbnQgPSAocGF5bWVudERhdGE6IFBhcnRpYWw8UGF5bWVudD4pOiBQYXltZW50ID0+IHtcclxuICAgIC8vIEdlbmVyYXRlIGEgdW5pcXVlIElEXHJcbiAgICBjb25zdCBuZXdJZCA9IChNYXRoLm1heCguLi5wYXltZW50cy5tYXAocCA9PiBwYXJzZUludChwLmlkKSB8fCAwKSkgKyAxKS50b1N0cmluZygpXHJcbiAgICBcclxuICAgIGNvbnN0IG5ld1BheW1lbnQ6IFBheW1lbnQgPSB7XHJcbiAgICAgIGlkOiBuZXdJZCxcclxuICAgICAgaW52b2ljZUlkOiBwYXltZW50RGF0YS5pbnZvaWNlSWQgfHwgJycsXHJcbiAgICAgIGFtb3VudDogcGF5bWVudERhdGEuYW1vdW50IHx8IDAsXHJcbiAgICAgIG1ldGhvZDogcGF5bWVudERhdGEubWV0aG9kIHx8ICdiYW5rX3RyYW5zZmVyJyxcclxuICAgICAgcmVmZXJlbmNlOiBwYXltZW50RGF0YS5yZWZlcmVuY2UgfHwgJycsXHJcbiAgICAgIHJlY2VpdmVkRGF0ZTogcGF5bWVudERhdGEucmVjZWl2ZWREYXRlIHx8IG5ldyBEYXRlKCksXHJcbiAgICAgIG5vdGVzOiBwYXltZW50RGF0YS5ub3RlcyxcclxuICAgICAgLi4ucGF5bWVudERhdGFcclxuICAgIH1cclxuXHJcbiAgICBzZXRQYXltZW50cyhwcmV2UGF5bWVudHMgPT4gWy4uLnByZXZQYXltZW50cywgbmV3UGF5bWVudF0pXHJcblxyXG4gICAgLy8gVXBkYXRlIGludm9pY2Ugc3RhdHVzIGlmIGZ1bGx5IHBhaWRcclxuICAgIGNvbnN0IGludm9pY2UgPSBnZXRJbnZvaWNlKG5ld1BheW1lbnQuaW52b2ljZUlkKVxyXG4gICAgaWYgKGludm9pY2UpIHtcclxuICAgICAgY29uc3QgYWxsUGF5bWVudHMgPSBbLi4ucGF5bWVudHMsIG5ld1BheW1lbnRdLmZpbHRlcihwID0+IHAuaW52b2ljZUlkID09PSBpbnZvaWNlLmlkKVxyXG4gICAgICBjb25zdCB0b3RhbFBheW1lbnRzID0gYWxsUGF5bWVudHMucmVkdWNlKChzdW0sIHApID0+IHN1bSArIHAuYW1vdW50LCAwKVxyXG4gICAgICBcclxuICAgICAgaWYgKHRvdGFsUGF5bWVudHMgPj0gaW52b2ljZS50b3RhbEFtb3VudCAmJiBpbnZvaWNlLnN0YXR1cyAhPT0gJ3BhaWQnKSB7XHJcbiAgICAgICAgdXBkYXRlSW52b2ljZShpbnZvaWNlLmlkLCB7IFxyXG4gICAgICAgICAgc3RhdHVzOiAncGFpZCcsIFxyXG4gICAgICAgICAgcGFpZERhdGU6IG5ld1BheW1lbnQucmVjZWl2ZWREYXRlLFxyXG4gICAgICAgICAgcGF5bWVudE1ldGhvZDogbmV3UGF5bWVudC5tZXRob2QgXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXdQYXltZW50XHJcbiAgfVxyXG5cclxuICBjb25zdCBhZGRWZW5kb3JQYXltZW50ID0gKHBheW1lbnREYXRhOiBQYXJ0aWFsPFBheW1lbnQ+KTogUGF5bWVudCA9PiB7XHJcbiAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBJRFxyXG4gICAgY29uc3QgbmV3SWQgPSAoTWF0aC5tYXgoLi4ucGF5bWVudHMubWFwKHAgPT4gcGFyc2VJbnQocC5pZCkgfHwgMCkpICsgMSkudG9TdHJpbmcoKVxyXG4gICAgXHJcbiAgICBjb25zdCBuZXdQYXltZW50OiBQYXltZW50ID0ge1xyXG4gICAgICBpZDogbmV3SWQsXHJcbiAgICAgIGludm9pY2VJZDogcGF5bWVudERhdGEuaW52b2ljZUlkIHx8ICcnLFxyXG4gICAgICBhbW91bnQ6IHBheW1lbnREYXRhLmFtb3VudCB8fCAwLFxyXG4gICAgICBtZXRob2Q6IHBheW1lbnREYXRhLm1ldGhvZCB8fCAnYmFua190cmFuc2ZlcicsXHJcbiAgICAgIHJlZmVyZW5jZTogcGF5bWVudERhdGEucmVmZXJlbmNlIHx8ICcnLFxyXG4gICAgICByZWNlaXZlZERhdGU6IHBheW1lbnREYXRhLnJlY2VpdmVkRGF0ZSB8fCBuZXcgRGF0ZSgpLFxyXG4gICAgICBub3RlczogcGF5bWVudERhdGEubm90ZXMsXHJcbiAgICAgIC4uLnBheW1lbnREYXRhXHJcbiAgICB9XHJcblxyXG4gICAgc2V0UGF5bWVudHMocHJldlBheW1lbnRzID0+IFsuLi5wcmV2UGF5bWVudHMsIG5ld1BheW1lbnRdKVxyXG5cclxuICAgIC8vIFVwZGF0ZSB2ZW5kb3IgaW52b2ljZSBzdGF0dXMgaWYgZnVsbHkgcGFpZFxyXG4gICAgY29uc3QgdmVuZG9ySW52b2ljZSA9IGdldFZlbmRvckludm9pY2UobmV3UGF5bWVudC5pbnZvaWNlSWQpXHJcbiAgICBpZiAodmVuZG9ySW52b2ljZSkge1xyXG4gICAgICBjb25zdCBhbGxQYXltZW50cyA9IFsuLi5wYXltZW50cywgbmV3UGF5bWVudF0uZmlsdGVyKHAgPT4gcC5pbnZvaWNlSWQgPT09IHZlbmRvckludm9pY2UuaWQpXHJcbiAgICAgIGNvbnN0IHRvdGFsUGF5bWVudHMgPSBhbGxQYXltZW50cy5yZWR1Y2UoKHN1bSwgcCkgPT4gc3VtICsgcC5hbW91bnQsIDApXHJcbiAgICAgIFxyXG4gICAgICBpZiAodG90YWxQYXltZW50cyA+PSB2ZW5kb3JJbnZvaWNlLnRvdGFsQW1vdW50ICYmIHZlbmRvckludm9pY2Uuc3RhdHVzICE9PSAncGFpZCcpIHtcclxuICAgICAgICB1cGRhdGVWZW5kb3JJbnZvaWNlKHZlbmRvckludm9pY2UuaWQsIHsgXHJcbiAgICAgICAgICBzdGF0dXM6ICdwYWlkJywgXHJcbiAgICAgICAgICBwYWlkRGF0ZTogbmV3UGF5bWVudC5yZWNlaXZlZERhdGUsXHJcbiAgICAgICAgICBwYXltZW50TWV0aG9kOiBuZXdQYXltZW50Lm1ldGhvZCBcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ld1BheW1lbnRcclxuICB9XHJcblxyXG4gIGNvbnN0IHVwZGF0ZVBheW1lbnQgPSAoaWQ6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDxQYXltZW50Pik6IGJvb2xlYW4gPT4ge1xyXG4gICAgc2V0UGF5bWVudHMocHJldlBheW1lbnRzID0+IHtcclxuICAgICAgY29uc3QgaW5kZXggPSBwcmV2UGF5bWVudHMuZmluZEluZGV4KHBheW1lbnQgPT4gcGF5bWVudC5pZCA9PT0gaWQpXHJcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBwcmV2UGF5bWVudHNcclxuXHJcbiAgICAgIGNvbnN0IHVwZGF0ZWRQYXltZW50ID0ge1xyXG4gICAgICAgIC4uLnByZXZQYXltZW50c1tpbmRleF0sXHJcbiAgICAgICAgLi4udXBkYXRlc1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBuZXdQYXltZW50cyA9IFsuLi5wcmV2UGF5bWVudHNdXHJcbiAgICAgIG5ld1BheW1lbnRzW2luZGV4XSA9IHVwZGF0ZWRQYXltZW50XHJcbiAgICAgIHJldHVybiBuZXdQYXltZW50c1xyXG4gICAgfSlcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG5cclxuICBjb25zdCBkZWxldGVQYXltZW50ID0gKGlkOiBzdHJpbmcpOiBib29sZWFuID0+IHtcclxuICAgIGNvbnN0IHBheW1lbnQgPSBnZXRQYXltZW50KGlkKVxyXG4gICAgaWYgKHBheW1lbnQpIHtcclxuICAgICAgLy8gVXBkYXRlIGludm9pY2Ugc3RhdHVzIGlmIG5lZWRlZFxyXG4gICAgICBjb25zdCBpbnZvaWNlID0gZ2V0SW52b2ljZShwYXltZW50Lmludm9pY2VJZClcclxuICAgICAgaWYgKGludm9pY2UgJiYgaW52b2ljZS5zdGF0dXMgPT09ICdwYWlkJykge1xyXG4gICAgICAgIGNvbnN0IHJlbWFpbmluZ1BheW1lbnRzID0gcGF5bWVudHMuZmlsdGVyKHAgPT4gcC5pbnZvaWNlSWQgPT09IHBheW1lbnQuaW52b2ljZUlkICYmIHAuaWQgIT09IGlkKVxyXG4gICAgICAgIGNvbnN0IHRvdGFsUmVtYWluaW5nUGF5bWVudHMgPSByZW1haW5pbmdQYXltZW50cy5yZWR1Y2UoKHN1bSwgcCkgPT4gc3VtICsgcC5hbW91bnQsIDApXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRvdGFsUmVtYWluaW5nUGF5bWVudHMgPCBpbnZvaWNlLnRvdGFsQW1vdW50KSB7XHJcbiAgICAgICAgICB1cGRhdGVJbnZvaWNlKGludm9pY2UuaWQsIHsgc3RhdHVzOiAnc2VudCcsIHBhaWREYXRlOiB1bmRlZmluZWQsIHBheW1lbnRNZXRob2Q6IHVuZGVmaW5lZCB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gVXBkYXRlIHZlbmRvciBpbnZvaWNlIHN0YXR1cyBpZiBuZWVkZWRcclxuICAgICAgY29uc3QgdmVuZG9ySW52b2ljZSA9IGdldFZlbmRvckludm9pY2UocGF5bWVudC5pbnZvaWNlSWQpXHJcbiAgICAgIGlmICh2ZW5kb3JJbnZvaWNlICYmIHZlbmRvckludm9pY2Uuc3RhdHVzID09PSAncGFpZCcpIHtcclxuICAgICAgICBjb25zdCByZW1haW5pbmdQYXltZW50cyA9IHBheW1lbnRzLmZpbHRlcihwID0+IHAuaW52b2ljZUlkID09PSBwYXltZW50Lmludm9pY2VJZCAmJiBwLmlkICE9PSBpZClcclxuICAgICAgICBjb25zdCB0b3RhbFJlbWFpbmluZ1BheW1lbnRzID0gcmVtYWluaW5nUGF5bWVudHMucmVkdWNlKChzdW0sIHApID0+IHN1bSArIHAuYW1vdW50LCAwKVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0b3RhbFJlbWFpbmluZ1BheW1lbnRzIDwgdmVuZG9ySW52b2ljZS50b3RhbEFtb3VudCkge1xyXG4gICAgICAgICAgdXBkYXRlVmVuZG9ySW52b2ljZSh2ZW5kb3JJbnZvaWNlLmlkLCB7IHN0YXR1czogJ2FwcHJvdmVkJywgcGFpZERhdGU6IHVuZGVmaW5lZCwgcGF5bWVudE1ldGhvZDogdW5kZWZpbmVkIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNldFBheW1lbnRzKHByZXZQYXltZW50cyA9PiBwcmV2UGF5bWVudHMuZmlsdGVyKHBheW1lbnQgPT4gcGF5bWVudC5pZCAhPT0gaWQpKVxyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIGNvbnN0IHJlZnJlc2hGaW5hbmNlRGF0YSA9ICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHN0b3JlZEludm9pY2VzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FtcGVyZV9pbnZvaWNlcycpXHJcbiAgICAgIGNvbnN0IHN0b3JlZFBheW1lbnRzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FtcGVyZV9wYXltZW50cycpXHJcbiAgICAgIGNvbnN0IHN0b3JlZFZlbmRvckludm9pY2VzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FtcGVyZV92ZW5kb3JfaW52b2ljZXMnKVxyXG4gICAgICBcclxuICAgICAgaWYgKHN0b3JlZEludm9pY2VzKSB7XHJcbiAgICAgICAgc2V0SW52b2ljZXMoSlNPTi5wYXJzZShzdG9yZWRJbnZvaWNlcykpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V0SW52b2ljZXMobW9ja0ludm9pY2VzKVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZiAoc3RvcmVkUGF5bWVudHMpIHtcclxuICAgICAgICBzZXRQYXltZW50cyhKU09OLnBhcnNlKHN0b3JlZFBheW1lbnRzKSlcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZXRQYXltZW50cyhtb2NrUGF5bWVudHMpXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmIChzdG9yZWRWZW5kb3JJbnZvaWNlcykge1xyXG4gICAgICAgIHNldFZlbmRvckludm9pY2VzKEpTT04ucGFyc2Uoc3RvcmVkVmVuZG9ySW52b2ljZXMpKVxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZWZyZXNoaW5nIGZpbmFuY2UgZGF0YTonLCBlcnJvcilcclxuICAgICAgc2V0SW52b2ljZXMobW9ja0ludm9pY2VzKVxyXG4gICAgICBzZXRQYXltZW50cyhtb2NrUGF5bWVudHMpXHJcbiAgICAgIHNldFZlbmRvckludm9pY2VzKFtdKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3QgdmFsdWU6IEZpbmFuY2VDb250ZXh0VHlwZSA9IHtcclxuICAgIGludm9pY2VzLFxyXG4gICAgcGF5bWVudHMsXHJcbiAgICB2ZW5kb3JJbnZvaWNlcyxcclxuICAgIGdldEludm9pY2UsXHJcbiAgICBnZXRQYXltZW50LFxyXG4gICAgZ2V0VmVuZG9ySW52b2ljZSxcclxuICAgIGdldEludm9pY2VQYXltZW50cyxcclxuICAgIGdldFZlbmRvckludm9pY2VQYXltZW50cyxcclxuICAgIGFkZEludm9pY2UsXHJcbiAgICB1cGRhdGVJbnZvaWNlLFxyXG4gICAgZGVsZXRlSW52b2ljZSxcclxuICAgIGFkZFZlbmRvckludm9pY2UsXHJcbiAgICB1cGRhdGVWZW5kb3JJbnZvaWNlLFxyXG4gICAgZGVsZXRlVmVuZG9ySW52b2ljZSxcclxuICAgIGFkZFBheW1lbnQsXHJcbiAgICBhZGRWZW5kb3JQYXltZW50LFxyXG4gICAgdXBkYXRlUGF5bWVudCxcclxuICAgIGRlbGV0ZVBheW1lbnQsXHJcbiAgICBnZXRJbnZvaWNlc0J5Q2xpZW50LFxyXG4gICAgZ2V0VmVuZG9ySW52b2ljZXNCeVZlbmRvcixcclxuICAgIGdldEludm9pY2VzQnlQcm9qZWN0LFxyXG4gICAgZ2V0VmVuZG9ySW52b2ljZXNCeVByb2plY3QsXHJcbiAgICBnZXRJbnZvaWNlc0J5U3RhdHVzLFxyXG4gICAgZ2V0VmVuZG9ySW52b2ljZXNCeVN0YXR1cyxcclxuICAgIGdldE92ZXJkdWVJbnZvaWNlcyxcclxuICAgIGdldE92ZXJkdWVWZW5kb3JJbnZvaWNlcyxcclxuICAgIGdldFRvdGFsT3V0c3RhbmRpbmcsXHJcbiAgICBnZXRUb3RhbFZlbmRvck91dHN0YW5kaW5nLFxyXG4gICAgZ2V0VG90YWxQYWlkLFxyXG4gICAgZ2V0VG90YWxWZW5kb3JQYWlkLFxyXG4gICAgcmVmcmVzaEZpbmFuY2VEYXRhXHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEZpbmFuY2VDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt2YWx1ZX0+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvRmluYW5jZUNvbnRleHQuUHJvdmlkZXI+XHJcbiAgKVxyXG59Il0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInVzZUNvbnRleHQiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIm1vY2tJbnZvaWNlcyIsIm1vY2tQYXltZW50cyIsIkZpbmFuY2VDb250ZXh0IiwidW5kZWZpbmVkIiwidXNlRmluYW5jZSIsImNvbnRleHQiLCJFcnJvciIsIkZpbmFuY2VQcm92aWRlciIsImNoaWxkcmVuIiwiaW52b2ljZXMiLCJzZXRJbnZvaWNlcyIsInBheW1lbnRzIiwic2V0UGF5bWVudHMiLCJ2ZW5kb3JJbnZvaWNlcyIsInNldFZlbmRvckludm9pY2VzIiwic3RvcmVkSW52b2ljZXMiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic3RvcmVkUGF5bWVudHMiLCJzdG9yZWRWZW5kb3JJbnZvaWNlcyIsInBhcnNlZEludm9pY2VzIiwiSlNPTiIsInBhcnNlIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwicGFyc2VkUGF5bWVudHMiLCJwYXJzZWRWZW5kb3JJbnZvaWNlcyIsImVycm9yIiwiY29uc29sZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJnZXRJbnZvaWNlIiwiaWQiLCJmaW5kIiwiaW52b2ljZSIsImdldFBheW1lbnQiLCJwYXltZW50IiwiZ2V0VmVuZG9ySW52b2ljZSIsInZlbmRvckludm9pY2UiLCJnZXRJbnZvaWNlUGF5bWVudHMiLCJpbnZvaWNlSWQiLCJmaWx0ZXIiLCJnZXRWZW5kb3JJbnZvaWNlUGF5bWVudHMiLCJ2ZW5kb3JJbnZvaWNlSWQiLCJnZXRJbnZvaWNlc0J5Q2xpZW50IiwiY2xpZW50SWQiLCJnZXRWZW5kb3JJbnZvaWNlc0J5VmVuZG9yIiwidmVuZG9ySWQiLCJnZXRJbnZvaWNlc0J5UHJvamVjdCIsInByb2plY3RJZCIsImdldFZlbmRvckludm9pY2VzQnlQcm9qZWN0IiwiZ2V0SW52b2ljZXNCeVN0YXR1cyIsInN0YXR1cyIsImdldFZlbmRvckludm9pY2VzQnlTdGF0dXMiLCJnZXRPdmVyZHVlSW52b2ljZXMiLCJub3ciLCJEYXRlIiwiZHVlRGF0ZSIsImdldE92ZXJkdWVWZW5kb3JJbnZvaWNlcyIsImdldFRvdGFsT3V0c3RhbmRpbmciLCJyZWR1Y2UiLCJ0b3RhbCIsInRvdGFsQW1vdW50IiwiZ2V0VG90YWxWZW5kb3JPdXRzdGFuZGluZyIsImdldFRvdGFsUGFpZCIsImFtb3VudCIsImdldFRvdGFsVmVuZG9yUGFpZCIsImFkZEludm9pY2UiLCJpbnZvaWNlRGF0YSIsIm5ld0lkIiwiTWF0aCIsIm1heCIsIm1hcCIsImkiLCJwYXJzZUludCIsInRvU3RyaW5nIiwidG9kYXkiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJtb250aCIsIlN0cmluZyIsImdldE1vbnRoIiwicGFkU3RhcnQiLCJpbnZvaWNlQ291bnQiLCJpbnYiLCJpbnZvaWNlTnVtYmVyIiwiaW5jbHVkZXMiLCJuZXdJbnZvaWNlIiwicXVvdGF0aW9uSWQiLCJnc3RBbW91bnQiLCJpc3N1ZURhdGUiLCJwYWlkRGF0ZSIsInBheW1lbnRNZXRob2QiLCJjcmVhdGVkQXQiLCJwcmV2SW52b2ljZXMiLCJ1cGRhdGVJbnZvaWNlIiwidXBkYXRlcyIsImluZGV4IiwiZmluZEluZGV4IiwidXBkYXRlZEludm9pY2UiLCJuZXdJbnZvaWNlcyIsImRlbGV0ZUludm9pY2UiLCJwcmV2UGF5bWVudHMiLCJhZGRWZW5kb3JJbnZvaWNlIiwidmVuZG9ySW52b2ljZURhdGEiLCJuZXdWZW5kb3JJbnZvaWNlIiwicHVyY2hhc2VPcmRlcklkIiwiZmlsZU5hbWUiLCJmaWxlVXJsIiwicHJvY2Vzc2VkRGF0YSIsInByZXZWZW5kb3JJbnZvaWNlcyIsInVwZGF0ZVZlbmRvckludm9pY2UiLCJ1cGRhdGVkVmVuZG9ySW52b2ljZSIsIm5ld1ZlbmRvckludm9pY2VzIiwiZGVsZXRlVmVuZG9ySW52b2ljZSIsImFkZFBheW1lbnQiLCJwYXltZW50RGF0YSIsInAiLCJuZXdQYXltZW50IiwibWV0aG9kIiwicmVmZXJlbmNlIiwicmVjZWl2ZWREYXRlIiwibm90ZXMiLCJhbGxQYXltZW50cyIsInRvdGFsUGF5bWVudHMiLCJzdW0iLCJhZGRWZW5kb3JQYXltZW50IiwidXBkYXRlUGF5bWVudCIsInVwZGF0ZWRQYXltZW50IiwibmV3UGF5bWVudHMiLCJkZWxldGVQYXltZW50IiwicmVtYWluaW5nUGF5bWVudHMiLCJ0b3RhbFJlbWFpbmluZ1BheW1lbnRzIiwicmVmcmVzaEZpbmFuY2VEYXRhIiwidmFsdWUiLCJQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/FinanceContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/contexts/ProjectContext.tsx":
/*!*****************************************!*\
  !*** ./src/contexts/ProjectContext.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProjectProvider: function() { return /* binding */ ProjectProvider; },\n/* harmony export */   useProjects: function() { return /* binding */ useProjects; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_mock_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/mock-data */ \"(app-pages-browser)/./src/lib/mock-data.ts\");\n/* harmony import */ var _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/contexts/AuthContext */ \"(app-pages-browser)/./src/contexts/AuthContext.tsx\");\n/* __next_internal_client_entry_do_not_use__ useProjects,ProjectProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst ProjectContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useProjects = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ProjectContext);\n    if (context === undefined) {\n        throw new Error(\"useProjects must be used within a ProjectProvider\");\n    }\n    return context;\n};\n_s(useProjects, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst ProjectProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [projects, setProjects] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockProjects);\n    const { user, getAccessibleProjects } = (0,_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_3__.useAuth)();\n    // Initialize projects from localStorage if available\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            const storedProjects = localStorage.getItem(\"ampere_projects\");\n            if (storedProjects) {\n                const parsedProjects = JSON.parse(storedProjects);\n                // Validate that the data structure is correct\n                if (Array.isArray(parsedProjects) && parsedProjects.length > 0) {\n                    setProjects(parsedProjects);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error loading projects from localStorage:\", error);\n            // Fall back to mock data if there's an error\n            setProjects(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockProjects);\n        }\n    }, []);\n    // Save projects to localStorage whenever projects change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            localStorage.setItem(\"ampere_projects\", JSON.stringify(projects));\n        } catch (error) {\n            console.error(\"Error saving projects to localStorage:\", error);\n        }\n    }, [\n        projects\n    ]);\n    // Get accessible projects based on user permissions\n    const accessibleProjects = getAccessibleProjects(projects);\n    const allProjects = projects // Full list for admin/super_admin\n    ;\n    const getProject = (id)=>{\n        const project = projects.find((project)=>project.id === id);\n        // Check if user can access this specific project\n        if (project && user) {\n            const hasAccess = accessibleProjects.some((p)=>p.id === id);\n            return hasAccess ? project : undefined;\n        }\n        return project;\n    };\n    const getProjectsByClient = (clientId)=>{\n        return accessibleProjects.filter((project)=>project.clientId === clientId);\n    };\n    const getProjectsByStatus = (status)=>{\n        return accessibleProjects.filter((project)=>project.status === status);\n    };\n    const canUserAccessProject = (projectId)=>{\n        return accessibleProjects.some((project)=>project.id === projectId);\n    };\n    const addProject = (projectData)=>{\n        // Generate a unique ID\n        const newId = (Math.max(...projects.map((p)=>parseInt(p.id) || 0)) + 1).toString();\n        const newProject = {\n            id: newId,\n            name: projectData.name || \"\",\n            clientId: projectData.clientId || \"\",\n            type: projectData.type || \"renovation\",\n            status: projectData.status || \"planning\",\n            description: projectData.description || \"\",\n            location: projectData.location || {\n                street: \"\",\n                postalCode: \"\",\n                district: \"\"\n            },\n            contractValue: projectData.contractValue || 0,\n            estimatedCost: projectData.estimatedCost || 0,\n            actualCost: projectData.actualCost || undefined,\n            startDate: projectData.startDate || new Date(),\n            expectedEndDate: projectData.expectedEndDate || new Date(),\n            actualEndDate: projectData.actualEndDate || undefined,\n            projectManager: projectData.projectManager || \"\",\n            team: projectData.team || [],\n            permits: projectData.permits || [],\n            milestones: projectData.milestones || [],\n            vendors: (projectData.vendors || []).map((vendor)=>({\n                    ...vendor,\n                    budgetAllocated: vendor.budgetAllocated !== undefined ? vendor.budgetAllocated : 0,\n                    budgetUsed: vendor.budgetUsed !== undefined ? vendor.budgetUsed : 0\n                })),\n            documents: projectData.documents || [],\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            ...projectData\n        };\n        setProjects((prevProjects)=>[\n                ...prevProjects,\n                newProject\n            ]);\n        return newProject;\n    };\n    const updateProject = (id, updates)=>{\n        setProjects((prevProjects)=>{\n            const index = prevProjects.findIndex((project)=>project.id === id);\n            if (index === -1) return prevProjects;\n            // If updating vendors, ensure budget fields are initialized\n            let updatedVendors = prevProjects[index].vendors;\n            if (updates.vendors) {\n                updatedVendors = updates.vendors.map((vendor)=>({\n                        ...vendor,\n                        budgetAllocated: vendor.budgetAllocated !== undefined ? vendor.budgetAllocated : vendor.budgetAllocated || 0,\n                        budgetUsed: vendor.budgetUsed !== undefined ? vendor.budgetUsed : vendor.budgetUsed || 0\n                    }));\n            }\n            const updatedProject = {\n                ...prevProjects[index],\n                ...updates,\n                vendors: updatedVendors,\n                updatedAt: new Date()\n            };\n            const newProjects = [\n                ...prevProjects\n            ];\n            newProjects[index] = updatedProject;\n            return newProjects;\n        });\n        return true;\n    };\n    const deleteProject = (id)=>{\n        setProjects((prevProjects)=>prevProjects.filter((project)=>project.id !== id));\n        return true;\n    };\n    const refreshProjects = ()=>{\n        // Refresh from localStorage or reset to mock data\n        try {\n            const storedProjects = localStorage.getItem(\"ampere_projects\");\n            if (storedProjects) {\n                setProjects(JSON.parse(storedProjects));\n            } else {\n                setProjects(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockProjects);\n            }\n        } catch (error) {\n            console.error(\"Error refreshing projects:\", error);\n            setProjects(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockProjects);\n        }\n    };\n    // Permit management methods\n    const addPermit = (projectId, permitData)=>{\n        setProjects((prevProjects)=>{\n            const index = prevProjects.findIndex((project)=>project.id === projectId);\n            if (index === -1) return prevProjects;\n            const project = prevProjects[index];\n            const newPermitId = (Math.max(0, ...project.permits.map((p)=>parseInt(p.id) || 0)) + 1).toString();\n            const newPermit = {\n                id: newPermitId,\n                type: permitData.type || \"renovation_permit\",\n                applicationNumber: permitData.applicationNumber || \"\",\n                status: permitData.status || \"draft\",\n                submittedDate: permitData.submittedDate || new Date(),\n                approvedDate: permitData.approvedDate,\n                expiryDate: permitData.expiryDate,\n                authority: permitData.authority || \"bca\",\n                fee: permitData.fee || 0,\n                documents: permitData.documents || [],\n                notes: permitData.notes,\n                ...permitData\n            };\n            const updatedProject = {\n                ...project,\n                permits: [\n                    ...project.permits,\n                    newPermit\n                ],\n                updatedAt: new Date()\n            };\n            const newProjects = [\n                ...prevProjects\n            ];\n            newProjects[index] = updatedProject;\n            return newProjects;\n        });\n        return true;\n    };\n    const updatePermit = (projectId, permitId, updates)=>{\n        setProjects((prevProjects)=>{\n            const projectIndex = prevProjects.findIndex((project)=>project.id === projectId);\n            if (projectIndex === -1) return prevProjects;\n            const project = prevProjects[projectIndex];\n            const permitIndex = project.permits.findIndex((permit)=>permit.id === permitId);\n            if (permitIndex === -1) return prevProjects;\n            const updatedPermits = [\n                ...project.permits\n            ];\n            updatedPermits[permitIndex] = {\n                ...updatedPermits[permitIndex],\n                ...updates\n            };\n            const updatedProject = {\n                ...project,\n                permits: updatedPermits,\n                updatedAt: new Date()\n            };\n            const newProjects = [\n                ...prevProjects\n            ];\n            newProjects[projectIndex] = updatedProject;\n            return newProjects;\n        });\n        return true;\n    };\n    const deletePermit = (projectId, permitId)=>{\n        setProjects((prevProjects)=>{\n            const projectIndex = prevProjects.findIndex((project)=>project.id === projectId);\n            if (projectIndex === -1) return prevProjects;\n            const project = prevProjects[projectIndex];\n            const updatedPermits = project.permits.filter((permit)=>permit.id !== permitId);\n            const updatedProject = {\n                ...project,\n                permits: updatedPermits,\n                updatedAt: new Date()\n            };\n            const newProjects = [\n                ...prevProjects\n            ];\n            newProjects[projectIndex] = updatedProject;\n            return newProjects;\n        });\n        return true;\n    };\n    // Milestone management methods\n    const addMilestone = (projectId, milestoneData)=>{\n        setProjects((prevProjects)=>{\n            const index = prevProjects.findIndex((project)=>project.id === projectId);\n            if (index === -1) return prevProjects;\n            const project = prevProjects[index];\n            const newMilestoneId = (Math.max(0, ...project.milestones.map((m)=>parseInt(m.id) || 0)) + 1).toString();\n            const newMilestone = {\n                id: newMilestoneId,\n                name: milestoneData.name || \"\",\n                description: milestoneData.description || \"\",\n                targetDate: milestoneData.targetDate || new Date(),\n                actualDate: milestoneData.actualDate,\n                status: milestoneData.status || \"pending\",\n                dependencies: milestoneData.dependencies || [],\n                completionPercentage: milestoneData.completionPercentage || 0,\n                ...milestoneData\n            };\n            const updatedProject = {\n                ...project,\n                milestones: [\n                    ...project.milestones,\n                    newMilestone\n                ],\n                updatedAt: new Date()\n            };\n            const newProjects = [\n                ...prevProjects\n            ];\n            newProjects[index] = updatedProject;\n            return newProjects;\n        });\n        return true;\n    };\n    const updateMilestone = (projectId, milestoneId, updates)=>{\n        setProjects((prevProjects)=>{\n            const projectIndex = prevProjects.findIndex((project)=>project.id === projectId);\n            if (projectIndex === -1) return prevProjects;\n            const project = prevProjects[projectIndex];\n            const milestoneIndex = project.milestones.findIndex((milestone)=>milestone.id === milestoneId);\n            if (milestoneIndex === -1) return prevProjects;\n            const updatedMilestones = [\n                ...project.milestones\n            ];\n            updatedMilestones[milestoneIndex] = {\n                ...updatedMilestones[milestoneIndex],\n                ...updates\n            };\n            const updatedProject = {\n                ...project,\n                milestones: updatedMilestones,\n                updatedAt: new Date()\n            };\n            const newProjects = [\n                ...prevProjects\n            ];\n            newProjects[projectIndex] = updatedProject;\n            return newProjects;\n        });\n        return true;\n    };\n    const deleteMilestone = (projectId, milestoneId)=>{\n        setProjects((prevProjects)=>{\n            const projectIndex = prevProjects.findIndex((project)=>project.id === projectId);\n            if (projectIndex === -1) return prevProjects;\n            const project = prevProjects[projectIndex];\n            const updatedMilestones = project.milestones.filter((milestone)=>milestone.id !== milestoneId);\n            // Also remove this milestone from any dependencies\n            const cleanedMilestones = updatedMilestones.map((milestone)=>({\n                    ...milestone,\n                    dependencies: milestone.dependencies.filter((depId)=>depId !== milestoneId)\n                }));\n            const updatedProject = {\n                ...project,\n                milestones: cleanedMilestones,\n                updatedAt: new Date()\n            };\n            const newProjects = [\n                ...prevProjects\n            ];\n            newProjects[projectIndex] = updatedProject;\n            return newProjects;\n        });\n        return true;\n    };\n    // Project vendor management methods\n    const addProjectVendor = (projectId, vendorData)=>{\n        setProjects((prevProjects)=>{\n            const index = prevProjects.findIndex((project)=>project.id === projectId);\n            if (index === -1) return prevProjects;\n            const project = prevProjects[index];\n            // Initialize budget fields if not provided\n            const newVendor = {\n                vendorId: vendorData.vendorId || \"\",\n                role: vendorData.role || \"\",\n                contractValue: vendorData.contractValue || 0,\n                budgetAllocated: vendorData.budgetAllocated !== undefined ? vendorData.budgetAllocated : 0,\n                budgetUsed: vendorData.budgetUsed !== undefined ? vendorData.budgetUsed : 0,\n                startDate: vendorData.startDate || new Date(),\n                endDate: vendorData.endDate,\n                status: vendorData.status || \"assigned\"\n            };\n            const updatedProject = {\n                ...project,\n                vendors: [\n                    ...project.vendors,\n                    newVendor\n                ],\n                updatedAt: new Date()\n            };\n            const newProjects = [\n                ...prevProjects\n            ];\n            newProjects[index] = updatedProject;\n            return newProjects;\n        });\n        return true;\n    };\n    const updateProjectVendor = (projectId, vendorId, updates)=>{\n        setProjects((prevProjects)=>{\n            const projectIndex = prevProjects.findIndex((project)=>project.id === projectId);\n            if (projectIndex === -1) return prevProjects;\n            const project = prevProjects[projectIndex];\n            const vendorIndex = project.vendors.findIndex((v)=>v.vendorId === vendorId);\n            if (vendorIndex === -1) return prevProjects;\n            const updatedVendors = [\n                ...project.vendors\n            ];\n            updatedVendors[vendorIndex] = {\n                ...updatedVendors[vendorIndex],\n                ...updates,\n                // Ensure budget fields are not overwritten with undefined\n                budgetAllocated: updates.budgetAllocated !== undefined ? updates.budgetAllocated : updatedVendors[vendorIndex].budgetAllocated,\n                budgetUsed: updates.budgetUsed !== undefined ? updates.budgetUsed : updatedVendors[vendorIndex].budgetUsed\n            };\n            const updatedProject = {\n                ...project,\n                vendors: updatedVendors,\n                updatedAt: new Date()\n            };\n            const newProjects = [\n                ...prevProjects\n            ];\n            newProjects[projectIndex] = updatedProject;\n            return newProjects;\n        });\n        return true;\n    };\n    // Method to update vendor budget usage\n    const updateVendorBudgetUsage = (projectId, vendorId, amount)=>{\n        setProjects((prevProjects)=>{\n            const projectIndex = prevProjects.findIndex((project)=>project.id === projectId);\n            if (projectIndex === -1) return prevProjects;\n            const project = prevProjects[projectIndex];\n            const vendorIndex = project.vendors.findIndex((v)=>v.vendorId === vendorId);\n            if (vendorIndex === -1) return prevProjects;\n            const updatedVendors = [\n                ...project.vendors\n            ];\n            const currentBudgetUsed = updatedVendors[vendorIndex].budgetUsed || 0;\n            updatedVendors[vendorIndex] = {\n                ...updatedVendors[vendorIndex],\n                budgetUsed: Math.max(0, currentBudgetUsed + amount) // Ensure budget used doesn't go negative\n            };\n            const updatedProject = {\n                ...project,\n                vendors: updatedVendors,\n                updatedAt: new Date()\n            };\n            const newProjects = [\n                ...prevProjects\n            ];\n            newProjects[projectIndex] = updatedProject;\n            return newProjects;\n        });\n        return true;\n    };\n    const deleteProjectVendor = (projectId, vendorId)=>{\n        setProjects((prevProjects)=>{\n            const projectIndex = prevProjects.findIndex((project)=>project.id === projectId);\n            if (projectIndex === -1) return prevProjects;\n            const project = prevProjects[projectIndex];\n            const updatedVendors = project.vendors.filter((vendor)=>vendor.vendorId !== vendorId);\n            const updatedProject = {\n                ...project,\n                vendors: updatedVendors,\n                updatedAt: new Date()\n            };\n            const newProjects = [\n                ...prevProjects\n            ];\n            newProjects[projectIndex] = updatedProject;\n            return newProjects;\n        });\n        return true;\n    };\n    const value = {\n        projects,\n        accessibleProjects,\n        allProjects,\n        getProject,\n        addProject,\n        updateProject,\n        deleteProject,\n        refreshProjects,\n        getProjectsByClient,\n        getProjectsByStatus,\n        canUserAccessProject,\n        addPermit,\n        updatePermit,\n        deletePermit,\n        addMilestone,\n        updateMilestone,\n        deleteMilestone,\n        addProjectVendor,\n        updateProjectVendor,\n        deleteProjectVendor,\n        updateVendorBudgetUsage\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ProjectContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\stamm\\\\AMPERE WEBAPP\\\\src\\\\contexts\\\\ProjectContext.tsx\",\n        lineNumber: 505,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(ProjectProvider, \"NPP+ZZTE+Ms9RUEOontRO/Xv5pg=\", false, function() {\n    return [\n        _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_3__.useAuth\n    ];\n});\n_c = ProjectProvider;\nvar _c;\n$RefreshReg$(_c, \"ProjectProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/ProjectContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/contexts/PurchaseOrderContext.tsx":
/*!***********************************************!*\
  !*** ./src/contexts/PurchaseOrderContext.tsx ***!
  \***********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PurchaseOrderProvider: function() { return /* binding */ PurchaseOrderProvider; },\n/* harmony export */   usePurchaseOrders: function() { return /* binding */ usePurchaseOrders; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/contexts/AuthContext */ \"(app-pages-browser)/./src/contexts/AuthContext.tsx\");\n/* harmony import */ var _contexts_ProjectContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/contexts/ProjectContext */ \"(app-pages-browser)/./src/contexts/ProjectContext.tsx\");\n/* harmony import */ var _contexts_VendorContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/contexts/VendorContext */ \"(app-pages-browser)/./src/contexts/VendorContext.tsx\");\n/* __next_internal_client_entry_do_not_use__ usePurchaseOrders,PurchaseOrderProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\nconst PurchaseOrderContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst usePurchaseOrders = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PurchaseOrderContext);\n    if (context === undefined) {\n        throw new Error(\"usePurchaseOrders must be used within a PurchaseOrderProvider\");\n    }\n    return context;\n};\n_s(usePurchaseOrders, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Mock purchase orders data\nconst mockPurchaseOrders = [\n    {\n        id: \"1\",\n        poNumber: \"AMP-PO-202401-001\",\n        projectId: \"1\",\n        vendorId: \"1\",\n        title: \"Electrical Materials for Marina Bay Project\",\n        description: \"Purchase order for electrical materials and components\",\n        status: \"approved\",\n        issueDate: new Date(\"2024-01-15\"),\n        requiredDate: new Date(\"2024-02-15\"),\n        deliveryDate: new Date(\"2024-02-10\"),\n        items: [\n            {\n                id: \"1\",\n                description: \"Circuit Breakers\",\n                quantity: 20,\n                unit: \"pcs\",\n                unitPrice: 45.50,\n                totalPrice: 910.00,\n                category: \"Materials\",\n                receivedQuantity: 20\n            },\n            {\n                id: \"2\",\n                description: \"Electrical Cables\",\n                quantity: 100,\n                unit: \"meters\",\n                unitPrice: 3.25,\n                totalPrice: 325.00,\n                category: \"Materials\",\n                receivedQuantity: 100\n            }\n        ],\n        subtotal: 1235.00,\n        gst: 86.45,\n        totalAmount: 1321.45,\n        terms: [\n            \"Payment terms: 30 days from invoice date\",\n            \"Delivery within 30 days of order confirmation\"\n        ],\n        preparedBy: \"1\",\n        approvedBy: \"2\",\n        approvedDate: new Date(\"2024-01-16\"),\n        createdAt: new Date(\"2024-01-15\"),\n        updatedAt: new Date(\"2024-02-10\"),\n        notes: \"Urgent delivery required\"\n    }\n];\nconst PurchaseOrderProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [purchaseOrders, setPurchaseOrders] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(mockPurchaseOrders);\n    const { user } = (0,_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_2__.useAuth)();\n    const { accessibleProjects, updateVendorBudgetUsage// Add this new method\n     } = (0,_contexts_ProjectContext__WEBPACK_IMPORTED_MODULE_3__.useProjects)();\n    const { vendors } = (0,_contexts_VendorContext__WEBPACK_IMPORTED_MODULE_4__.useVendors)();\n    // Initialize purchase orders from localStorage if available\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            const storedPurchaseOrders = localStorage.getItem(\"ampere_purchase_orders\");\n            if (storedPurchaseOrders) {\n                const parsedPurchaseOrders = JSON.parse(storedPurchaseOrders);\n                // Validate that the data structure is correct\n                if (Array.isArray(parsedPurchaseOrders) && parsedPurchaseOrders.length > 0) {\n                    setPurchaseOrders(parsedPurchaseOrders);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error loading purchase orders from localStorage:\", error);\n            // Fall back to mock data if there's an error\n            setPurchaseOrders(mockPurchaseOrders);\n        }\n    }, []);\n    // Save purchase orders to localStorage whenever purchase orders change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            localStorage.setItem(\"ampere_purchase_orders\", JSON.stringify(purchaseOrders));\n        } catch (error) {\n            console.error(\"Error saving purchase orders to localStorage:\", error);\n        }\n    }, [\n        purchaseOrders\n    ]);\n    // Get accessible purchase orders based on user permissions\n    const accessiblePurchaseOrders = purchaseOrders.filter((po)=>{\n        // For now, we'll allow access to all purchase orders\n        // In a real implementation, this would be filtered based on user permissions\n        return true;\n    });\n    const getPurchaseOrder = (id)=>{\n        return purchaseOrders.find((po)=>po.id === id);\n    };\n    const getPurchaseOrdersByProject = (projectId)=>{\n        return accessiblePurchaseOrders.filter((po)=>po.projectId === projectId);\n    };\n    const getPurchaseOrdersByVendor = (vendorId)=>{\n        return accessiblePurchaseOrders.filter((po)=>po.vendorId === vendorId);\n    };\n    const getPurchaseOrdersByStatus = (status)=>{\n        return accessiblePurchaseOrders.filter((po)=>po.status === status);\n    };\n    // Generate next PO number\n    const getNextPONumber = ()=>{\n        const today = new Date();\n        const year = today.getFullYear();\n        const month = String(today.getMonth() + 1).padStart(2, \"0\");\n        // Count existing POs for this month\n        const poCount = purchaseOrders.filter((po)=>po.poNumber.includes(\"\".concat(year).concat(month))).length + 1;\n        return \"AMP-PO-\".concat(year).concat(month, \"-\").concat(String(poCount).padStart(3, \"0\"));\n    };\n    const addPurchaseOrder = (purchaseOrderData)=>{\n        // Generate a unique ID\n        const newId = (Math.max(...purchaseOrders.map((po)=>parseInt(po.id) || 0)) + 1).toString();\n        // Generate PO number if not provided\n        const poNumber = purchaseOrderData.poNumber || getNextPONumber();\n        const newPurchaseOrder = {\n            id: newId,\n            poNumber,\n            projectId: purchaseOrderData.projectId || \"\",\n            vendorId: purchaseOrderData.vendorId || \"\",\n            clientId: purchaseOrderData.clientId,\n            title: purchaseOrderData.title || \"\",\n            description: purchaseOrderData.description || \"\",\n            status: purchaseOrderData.status || \"draft\",\n            issueDate: purchaseOrderData.issueDate || new Date(),\n            requiredDate: purchaseOrderData.requiredDate || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n            deliveryDate: purchaseOrderData.deliveryDate,\n            items: purchaseOrderData.items || [],\n            subtotal: purchaseOrderData.subtotal || 0,\n            gst: purchaseOrderData.gst || 0,\n            discount: purchaseOrderData.discount,\n            totalAmount: purchaseOrderData.totalAmount || 0,\n            terms: purchaseOrderData.terms || [],\n            preparedBy: purchaseOrderData.preparedBy || (user === null || user === void 0 ? void 0 : user.id) || \"\",\n            approvedBy: purchaseOrderData.approvedBy,\n            approvedDate: purchaseOrderData.approvedDate,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            notes: purchaseOrderData.notes,\n            ...purchaseOrderData\n        };\n        setPurchaseOrders((prevPurchaseOrders)=>[\n                ...prevPurchaseOrders,\n                newPurchaseOrder\n            ]);\n        // Deduct budget from vendor if this is a new PO with a total amount\n        if (newPurchaseOrder.totalAmount > 0 && newPurchaseOrder.projectId && newPurchaseOrder.vendorId) {\n            updateVendorBudgetUsage(newPurchaseOrder.projectId, newPurchaseOrder.vendorId, newPurchaseOrder.totalAmount);\n        }\n        return newPurchaseOrder;\n    };\n    const updatePurchaseOrder = (id, updates)=>{\n        const originalPO = purchaseOrders.find((po)=>po.id === id);\n        setPurchaseOrders((prevPurchaseOrders)=>{\n            const index = prevPurchaseOrders.findIndex((po)=>po.id === id);\n            if (index === -1) return prevPurchaseOrders;\n            const updatedPurchaseOrder = {\n                ...prevPurchaseOrders[index],\n                ...updates,\n                updatedAt: new Date()\n            };\n            const newPurchaseOrders = [\n                ...prevPurchaseOrders\n            ];\n            newPurchaseOrders[index] = updatedPurchaseOrder;\n            return newPurchaseOrders;\n        });\n        // If the total amount changed, adjust the vendor budget accordingly\n        if (originalPO && updates.totalAmount !== undefined && originalPO.totalAmount !== updates.totalAmount) {\n            const amountDifference = updates.totalAmount - originalPO.totalAmount;\n            if (originalPO.projectId && originalPO.vendorId && amountDifference !== 0) {\n                updateVendorBudgetUsage(originalPO.projectId, originalPO.vendorId, amountDifference);\n            }\n        }\n        return true;\n    };\n    const deletePurchaseOrder = (id)=>{\n        // Get the PO before deleting to adjust vendor budget\n        const poToDelete = purchaseOrders.find((po)=>po.id === id);\n        setPurchaseOrders((prevPurchaseOrders)=>prevPurchaseOrders.filter((po)=>po.id !== id));\n        // If the PO existed, add back the budget (negative amount to increase budget)\n        if (poToDelete && poToDelete.totalAmount > 0 && poToDelete.projectId && poToDelete.vendorId) {\n            updateVendorBudgetUsage(poToDelete.projectId, poToDelete.vendorId, -poToDelete.totalAmount);\n        }\n        return true;\n    };\n    const refreshPurchaseOrders = ()=>{\n        // Refresh from localStorage or reset to mock data\n        try {\n            const storedPurchaseOrders = localStorage.getItem(\"ampere_purchase_orders\");\n            if (storedPurchaseOrders) {\n                setPurchaseOrders(JSON.parse(storedPurchaseOrders));\n            } else {\n                setPurchaseOrders(mockPurchaseOrders);\n            }\n        } catch (error) {\n            console.error(\"Error refreshing purchase orders:\", error);\n            setPurchaseOrders(mockPurchaseOrders);\n        }\n    };\n    // Item management methods\n    const addPurchaseOrderItem = (poId, itemData)=>{\n        const originalPO = purchaseOrders.find((po)=>po.id === poId);\n        setPurchaseOrders((prevPurchaseOrders)=>{\n            const poIndex = prevPurchaseOrders.findIndex((po)=>po.id === poId);\n            if (poIndex === -1) return prevPurchaseOrders;\n            const purchaseOrder = prevPurchaseOrders[poIndex];\n            const newItemId = (Math.max(0, ...purchaseOrder.items.map((i)=>parseInt(i.id) || 0)) + 1).toString();\n            const newItem = {\n                id: newItemId,\n                description: itemData.description || \"\",\n                quantity: itemData.quantity || 0,\n                unit: itemData.unit || \"pcs\",\n                unitPrice: itemData.unitPrice || 0,\n                totalPrice: itemData.totalPrice || (itemData.quantity || 0) * (itemData.unitPrice || 0),\n                category: itemData.category || \"Materials\",\n                notes: itemData.notes,\n                receivedQuantity: itemData.receivedQuantity,\n                ...itemData\n            };\n            const updatedPurchaseOrder = {\n                ...purchaseOrder,\n                items: [\n                    ...purchaseOrder.items,\n                    newItem\n                ],\n                updatedAt: new Date()\n            };\n            // Recalculate totals\n            const subtotal = updatedPurchaseOrder.items.reduce((sum, item)=>sum + item.totalPrice, 0);\n            const gst = subtotal * 0.07 // 7% GST for Singapore\n            ;\n            const discount = updatedPurchaseOrder.discount || 0;\n            const totalAmount = subtotal + gst - discount;\n            updatedPurchaseOrder.subtotal = subtotal;\n            updatedPurchaseOrder.gst = gst;\n            updatedPurchaseOrder.totalAmount = totalAmount;\n            const newPurchaseOrders = [\n                ...prevPurchaseOrders\n            ];\n            newPurchaseOrders[poIndex] = updatedPurchaseOrder;\n            return newPurchaseOrders;\n        });\n        // If the PO existed, adjust the vendor budget for the added item value\n        if (originalPO) {\n            const newItemTotal = (itemData.quantity || 0) * (itemData.unitPrice || 0);\n            const gstAmount = newItemTotal * 0.07;\n            const totalWithGst = newItemTotal + gstAmount;\n            if (originalPO.projectId && originalPO.vendorId && totalWithGst > 0) {\n                updateVendorBudgetUsage(originalPO.projectId, originalPO.vendorId, totalWithGst);\n            }\n        }\n        return true;\n    };\n    const updatePurchaseOrderItem = (poId, itemId, updates)=>{\n        const originalPO = purchaseOrders.find((po)=>po.id === poId);\n        const originalItem = originalPO === null || originalPO === void 0 ? void 0 : originalPO.items.find((item)=>item.id === itemId);\n        setPurchaseOrders((prevPurchaseOrders)=>{\n            const poIndex = prevPurchaseOrders.findIndex((po)=>po.id === poId);\n            if (poIndex === -1) return prevPurchaseOrders;\n            const purchaseOrder = prevPurchaseOrders[poIndex];\n            const itemIndex = purchaseOrder.items.findIndex((item)=>item.id === itemId);\n            if (itemIndex === -1) return prevPurchaseOrders;\n            const updatedItem = {\n                ...purchaseOrder.items[itemIndex],\n                ...updates\n            };\n            // Recalculate total price if quantity or unit price changes\n            if (updates.quantity !== undefined || updates.unitPrice !== undefined) {\n                updatedItem.totalPrice = (updates.quantity !== undefined ? updates.quantity : updatedItem.quantity) * (updates.unitPrice !== undefined ? updates.unitPrice : updatedItem.unitPrice);\n            }\n            const updatedItems = [\n                ...purchaseOrder.items\n            ];\n            updatedItems[itemIndex] = updatedItem;\n            const updatedPurchaseOrder = {\n                ...purchaseOrder,\n                items: updatedItems,\n                updatedAt: new Date()\n            };\n            // Recalculate totals\n            const subtotal = updatedPurchaseOrder.items.reduce((sum, item)=>sum + item.totalPrice, 0);\n            const gst = subtotal * 0.07 // 7% GST for Singapore\n            ;\n            const discount = updatedPurchaseOrder.discount || 0;\n            const totalAmount = subtotal + gst - discount;\n            updatedPurchaseOrder.subtotal = subtotal;\n            updatedPurchaseOrder.gst = gst;\n            updatedPurchaseOrder.totalAmount = totalAmount;\n            const newPurchaseOrders = [\n                ...prevPurchaseOrders\n            ];\n            newPurchaseOrders[poIndex] = updatedPurchaseOrder;\n            return newPurchaseOrders;\n        });\n        // If the item existed and values changed, adjust the vendor budget\n        if (originalPO && originalItem) {\n            const originalTotal = originalItem.totalPrice;\n            const newTotal = (updates.quantity !== undefined ? updates.quantity : originalItem.quantity) * (updates.unitPrice !== undefined ? updates.unitPrice : originalItem.unitPrice);\n            const difference = newTotal - originalTotal;\n            const gstDifference = difference * 0.07;\n            const totalDifference = difference + gstDifference;\n            if (originalPO.projectId && originalPO.vendorId && totalDifference !== 0) {\n                updateVendorBudgetUsage(originalPO.projectId, originalPO.vendorId, totalDifference);\n            }\n        }\n        return true;\n    };\n    const deletePurchaseOrderItem = (poId, itemId)=>{\n        const originalPO = purchaseOrders.find((po)=>po.id === poId);\n        const itemToDelete = originalPO === null || originalPO === void 0 ? void 0 : originalPO.items.find((item)=>item.id === itemId);\n        setPurchaseOrders((prevPurchaseOrders)=>{\n            const poIndex = prevPurchaseOrders.findIndex((po)=>po.id === poId);\n            if (poIndex === -1) return prevPurchaseOrders;\n            const purchaseOrder = prevPurchaseOrders[poIndex];\n            const updatedItems = purchaseOrder.items.filter((item)=>item.id !== itemId);\n            const updatedPurchaseOrder = {\n                ...purchaseOrder,\n                items: updatedItems,\n                updatedAt: new Date()\n            };\n            // Recalculate totals\n            const subtotal = updatedPurchaseOrder.items.reduce((sum, item)=>sum + item.totalPrice, 0);\n            const gst = subtotal * 0.07 // 7% GST for Singapore\n            ;\n            const discount = updatedPurchaseOrder.discount || 0;\n            const totalAmount = subtotal + gst - discount;\n            updatedPurchaseOrder.subtotal = subtotal;\n            updatedPurchaseOrder.gst = gst;\n            updatedPurchaseOrder.totalAmount = totalAmount;\n            const newPurchaseOrders = [\n                ...prevPurchaseOrders\n            ];\n            newPurchaseOrders[poIndex] = updatedPurchaseOrder;\n            return newPurchaseOrders;\n        });\n        // If the item existed, subtract its value from the vendor budget (negative to reduce budget usage)\n        if (originalPO && itemToDelete) {\n            const itemTotal = itemToDelete.totalPrice;\n            const gstAmount = itemTotal * 0.07;\n            const totalWithGst = itemTotal + gstAmount;\n            if (originalPO.projectId && originalPO.vendorId && totalWithGst > 0) {\n                updateVendorBudgetUsage(originalPO.projectId, originalPO.vendorId, -totalWithGst);\n            }\n        }\n        return true;\n    };\n    const contextValue = {\n        purchaseOrders,\n        accessiblePurchaseOrders,\n        getPurchaseOrder,\n        addPurchaseOrder,\n        updatePurchaseOrder,\n        deletePurchaseOrder,\n        refreshPurchaseOrders,\n        getPurchaseOrdersByProject,\n        getPurchaseOrdersByVendor,\n        getPurchaseOrdersByStatus,\n        getNextPONumber,\n        addPurchaseOrderItem,\n        updatePurchaseOrderItem,\n        deletePurchaseOrderItem\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(PurchaseOrderContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\stamm\\\\AMPERE WEBAPP\\\\src\\\\contexts\\\\PurchaseOrderContext.tsx\",\n        lineNumber: 478,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(PurchaseOrderProvider, \"onSV9KKIgUmOnar0BjL6Y0whu5E=\", false, function() {\n    return [\n        _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_2__.useAuth,\n        _contexts_ProjectContext__WEBPACK_IMPORTED_MODULE_3__.useProjects,\n        _contexts_VendorContext__WEBPACK_IMPORTED_MODULE_4__.useVendors\n    ];\n});\n_c = PurchaseOrderProvider;\nvar _c;\n$RefreshReg$(_c, \"PurchaseOrderProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/PurchaseOrderContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/contexts/QuotationContext.tsx":
/*!*******************************************!*\
  !*** ./src/contexts/QuotationContext.tsx ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QuotationProvider: function() { return /* binding */ QuotationProvider; },\n/* harmony export */   useQuotations: function() { return /* binding */ useQuotations; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_mock_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/mock-data */ \"(app-pages-browser)/./src/lib/mock-data.ts\");\n/* __next_internal_client_entry_do_not_use__ useQuotations,QuotationProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst QuotationContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useQuotations = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(QuotationContext);\n    if (context === undefined) {\n        throw new Error(\"useQuotations must be used within a QuotationProvider\");\n    }\n    return context;\n};\n_s(useQuotations, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst QuotationProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [quotations, setQuotations] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockQuotations);\n    // Initialize quotations from localStorage if available\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            const storedQuotations = localStorage.getItem(\"ampere_quotations\");\n            if (storedQuotations) {\n                const parsedQuotations = JSON.parse(storedQuotations);\n                // Validate that the data structure is correct\n                if (Array.isArray(parsedQuotations) && parsedQuotations.length > 0) {\n                    setQuotations(parsedQuotations);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error loading quotations from localStorage:\", error);\n            // Fall back to mock data if there's an error\n            setQuotations(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockQuotations);\n        }\n    }, []);\n    // Save quotations to localStorage whenever quotations change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            localStorage.setItem(\"ampere_quotations\", JSON.stringify(quotations));\n        } catch (error) {\n            console.error(\"Error saving quotations to localStorage:\", error);\n        }\n    }, [\n        quotations\n    ]);\n    const getQuotation = (id)=>{\n        return quotations.find((quotation)=>quotation.id === id);\n    };\n    const generateQuotationNumber = ()=>{\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = String(now.getMonth() + 1).padStart(2, \"0\");\n        // Find the highest existing quotation number for this month\n        const monthPrefix = \"AMP-\".concat(year).concat(month, \"-\");\n        const existingNumbers = quotations.filter((q)=>q.quotationNumber.startsWith(monthPrefix)).map((q)=>{\n            const numberPart = q.quotationNumber.split(\"-\")[2];\n            return parseInt(numberPart) || 0;\n        });\n        const nextNumber = Math.max(0, ...existingNumbers) + 1;\n        return \"\".concat(monthPrefix).concat(String(nextNumber).padStart(3, \"0\"));\n    };\n    const addQuotation = (quotationData)=>{\n        // Generate a unique ID\n        const newId = (Math.max(...quotations.map((q)=>parseInt(q.id) || 0)) + 1).toString();\n        // Generate quotation number if not provided\n        const quotationNumber = quotationData.quotationNumber || generateQuotationNumber();\n        // Calculate totals based on items\n        const items = quotationData.items || [];\n        const subtotal = items.reduce((sum, item)=>sum + item.totalPrice, 0);\n        const gst = subtotal * 0.07 // 7% GST in Singapore\n        ;\n        const discount = quotationData.discount || 0;\n        const totalAmount = subtotal + gst - discount;\n        const newQuotation = {\n            id: newId,\n            clientId: quotationData.clientId || \"\",\n            projectId: quotationData.projectId,\n            tenderId: quotationData.tenderId,\n            quotationNumber,\n            title: quotationData.title || \"\",\n            description: quotationData.description || \"\",\n            status: quotationData.status || \"draft\",\n            validUntil: quotationData.validUntil || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n            items: items,\n            subtotal,\n            gst,\n            discount,\n            totalAmount,\n            terms: quotationData.terms || [\n                \"Prices valid for 30 days\",\n                \"Payment terms: 30 days from invoice date\",\n                \"All materials comply with Singapore standards\"\n            ],\n            preparedBy: quotationData.preparedBy || \"\",\n            approvedBy: quotationData.approvedBy,\n            sentDate: quotationData.sentDate,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            notes: quotationData.notes,\n            ...quotationData\n        };\n        setQuotations((prevQuotations)=>[\n                ...prevQuotations,\n                newQuotation\n            ]);\n        return newQuotation;\n    };\n    const updateQuotation = (id, updates)=>{\n        setQuotations((prevQuotations)=>{\n            const index = prevQuotations.findIndex((quotation)=>quotation.id === id);\n            if (index === -1) return prevQuotations;\n            // If items are being updated, recalculate totals\n            let calculatedUpdates = {\n                ...updates\n            };\n            if (updates.items) {\n                const subtotal = updates.items.reduce((sum, item)=>sum + item.totalPrice, 0);\n                const gst = subtotal * 0.07;\n                const discount = updates.discount || prevQuotations[index].discount || 0;\n                const totalAmount = subtotal + gst - discount;\n                calculatedUpdates = {\n                    ...updates,\n                    subtotal,\n                    gst,\n                    totalAmount\n                };\n            }\n            const updatedQuotation = {\n                ...prevQuotations[index],\n                ...calculatedUpdates,\n                updatedAt: new Date()\n            };\n            const newQuotations = [\n                ...prevQuotations\n            ];\n            newQuotations[index] = updatedQuotation;\n            return newQuotations;\n        });\n        return true;\n    };\n    const deleteQuotation = (id)=>{\n        setQuotations((prevQuotations)=>prevQuotations.filter((quotation)=>quotation.id !== id));\n        return true;\n    };\n    const refreshQuotations = ()=>{\n        // Refresh from localStorage or reset to mock data\n        try {\n            const storedQuotations = localStorage.getItem(\"ampere_quotations\");\n            if (storedQuotations) {\n                setQuotations(JSON.parse(storedQuotations));\n            } else {\n                setQuotations(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockQuotations);\n            }\n        } catch (error) {\n            console.error(\"Error refreshing quotations:\", error);\n            setQuotations(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockQuotations);\n        }\n    };\n    const value = {\n        quotations,\n        getQuotation,\n        addQuotation,\n        updateQuotation,\n        deleteQuotation,\n        refreshQuotations,\n        generateQuotationNumber\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(QuotationContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\stamm\\\\AMPERE WEBAPP\\\\src\\\\contexts\\\\QuotationContext.tsx\",\n        lineNumber: 195,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(QuotationProvider, \"YDHZiZXncnA90IzntW2ZnFAxXGg=\");\n_c = QuotationProvider;\nvar _c;\n$RefreshReg$(_c, \"QuotationProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/QuotationContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/contexts/ReportsContext.tsx":
/*!*****************************************!*\
  !*** ./src/contexts/ReportsContext.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReportsProvider: function() { return /* binding */ ReportsProvider; },\n/* harmony export */   useReports: function() { return /* binding */ useReports; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_mock_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/mock-data */ \"(app-pages-browser)/./src/lib/mock-data.ts\");\n/* __next_internal_client_entry_do_not_use__ useReports,ReportsProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst ReportsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useReports = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ReportsContext);\n    if (context === undefined) {\n        throw new Error(\"useReports must be used within a ReportsProvider\");\n    }\n    return context;\n};\n_s(useReports, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst ReportsProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [reports, setReports] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockReports);\n    // Initialize reports data from localStorage if available\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            const storedReports = localStorage.getItem(\"ampere_reports\");\n            if (storedReports) {\n                const parsedReports = JSON.parse(storedReports);\n                if (Array.isArray(parsedReports) && parsedReports.length > 0) {\n                    setReports(parsedReports);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error loading reports data from localStorage:\", error);\n            setReports(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockReports);\n        }\n    }, []);\n    // Save reports to localStorage whenever reports change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            localStorage.setItem(\"ampere_reports\", JSON.stringify(reports));\n        } catch (error) {\n            console.error(\"Error saving reports to localStorage:\", error);\n        }\n    }, [\n        reports\n    ]);\n    const getReport = (id)=>{\n        return reports.find((report)=>report.id === id);\n    };\n    const getReportsByCategory = (category)=>{\n        return reports.filter((report)=>report.category === category);\n    };\n    const getRecentReports = function() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n        return reports.sort((a, b)=>new Date(b.generatedAt).getTime() - new Date(a.generatedAt).getTime()).slice(0, limit);\n    };\n    // Generate Financial Summary Data\n    const generateFinancialSummary = (parameters)=>{\n        // Get data from localStorage or use mock data\n        const invoices = JSON.parse(localStorage.getItem(\"ampere_invoices\") || \"[]\");\n        const payments = JSON.parse(localStorage.getItem(\"ampere_payments\") || \"[]\");\n        const projects = JSON.parse(localStorage.getItem(\"ampere_projects\") || \"[]\");\n        const clients = JSON.parse(localStorage.getItem(\"ampere_clients\") || \"[]\");\n        const { startDate, endDate } = parameters.dateRange;\n        // Filter data by date range\n        const filteredInvoices = invoices.filter((invoice)=>{\n            const invoiceDate = new Date(invoice.issueDate);\n            return invoiceDate >= startDate && invoiceDate <= endDate;\n        });\n        const filteredPayments = payments.filter((payment)=>{\n            const paymentDate = new Date(payment.receivedDate);\n            return paymentDate >= startDate && paymentDate <= endDate;\n        });\n        // Calculate revenue metrics\n        const totalRevenue = filteredPayments.reduce((sum, payment)=>sum + payment.amount, 0);\n        // Revenue by month\n        const revenueByMonth = filteredPayments.reduce((acc, payment)=>{\n            const month = new Date(payment.receivedDate).toISOString().substring(0, 7);\n            acc[month] = (acc[month] || 0) + payment.amount;\n            return acc;\n        }, {});\n        // Revenue by client\n        const revenueByClient = filteredPayments.reduce((acc, payment)=>{\n            const invoice = invoices.find((inv)=>inv.id === payment.invoiceId);\n            if (invoice) {\n                const client = clients.find((c)=>c.id === invoice.clientId);\n                const clientName = (client === null || client === void 0 ? void 0 : client.name) || \"Unknown Client\";\n                const existing = acc.find((item)=>item.clientId === invoice.clientId);\n                if (existing) {\n                    existing.amount += payment.amount;\n                } else {\n                    acc.push({\n                        clientId: invoice.clientId,\n                        clientName,\n                        amount: payment.amount\n                    });\n                }\n            }\n            return acc;\n        }, []);\n        // Revenue by project\n        const revenueByProject = filteredPayments.reduce((acc, payment)=>{\n            const invoice = invoices.find((inv)=>inv.id === payment.invoiceId);\n            if (invoice && invoice.projectId) {\n                const project = projects.find((p)=>p.id === invoice.projectId);\n                const projectName = (project === null || project === void 0 ? void 0 : project.name) || \"Unknown Project\";\n                const existing = acc.find((item)=>item.projectId === invoice.projectId);\n                if (existing) {\n                    existing.amount += payment.amount;\n                } else {\n                    acc.push({\n                        projectId: invoice.projectId,\n                        projectName,\n                        amount: payment.amount\n                    });\n                }\n            }\n            return acc;\n        }, []);\n        // Calculate expenses (simplified - using project actual costs)\n        const totalExpenses = projects.filter((project)=>{\n            const projectStart = new Date(project.startDate);\n            return projectStart >= startDate && projectStart <= endDate;\n        }).reduce((sum, project)=>sum + (project.actualCost || project.estimatedCost || 0), 0);\n        // Calculate profitability\n        const grossProfit = totalRevenue - totalExpenses;\n        const profitMargin = totalRevenue > 0 ? grossProfit / totalRevenue * 100 : 0;\n        // Calculate cash flow\n        const totalInvoiced = filteredInvoices.reduce((sum, invoice)=>sum + invoice.totalAmount, 0);\n        const outstanding = totalInvoiced - totalRevenue;\n        const overdue = filteredInvoices.filter((invoice)=>{\n            const dueDate = new Date(invoice.dueDate);\n            return dueDate < new Date() && invoice.status !== \"paid\";\n        }).reduce((sum, invoice)=>sum + invoice.totalAmount, 0);\n        // Calculate GST\n        const totalGSTCollected = filteredInvoices.reduce((sum, invoice)=>sum + (invoice.gstAmount || 0), 0);\n        return {\n            period: {\n                startDate,\n                endDate\n            },\n            revenue: {\n                total: totalRevenue,\n                byMonth: Object.entries(revenueByMonth).map((param)=>{\n                    let [month, amount] = param;\n                    return {\n                        month,\n                        amount: amount\n                    };\n                }),\n                byClient: revenueByClient,\n                byProject: revenueByProject\n            },\n            expenses: {\n                total: totalExpenses,\n                byCategory: [\n                    {\n                        category: \"Labor\",\n                        amount: totalExpenses * 0.4\n                    },\n                    {\n                        category: \"Materials\",\n                        amount: totalExpenses * 0.35\n                    },\n                    {\n                        category: \"Equipment\",\n                        amount: totalExpenses * 0.15\n                    },\n                    {\n                        category: \"Overhead\",\n                        amount: totalExpenses * 0.1\n                    }\n                ],\n                byVendor: []\n            },\n            profitability: {\n                grossProfit,\n                netProfit: grossProfit * 0.85,\n                profitMargin,\n                byProject: projects.map((project)=>({\n                        projectId: project.id,\n                        projectName: project.name,\n                        profit: project.contractValue - (project.actualCost || project.estimatedCost),\n                        margin: (project.contractValue - (project.actualCost || project.estimatedCost)) / project.contractValue * 100\n                    }))\n            },\n            cashFlow: {\n                inflow: totalRevenue,\n                outflow: totalExpenses,\n                netCashFlow: totalRevenue - totalExpenses,\n                outstanding,\n                overdue\n            },\n            gst: {\n                totalGSTCollected,\n                totalGSTPaid: totalExpenses * 0.07,\n                netGST: totalGSTCollected - totalExpenses * 0.07\n            }\n        };\n    };\n    // Generate Project Analytics Data\n    const generateProjectAnalytics = (parameters)=>{\n        const projects = JSON.parse(localStorage.getItem(\"ampere_projects\") || \"[]\");\n        const { startDate, endDate } = parameters.dateRange;\n        const filteredProjects = projects.filter((project)=>{\n            const projectStart = new Date(project.startDate);\n            return projectStart >= startDate && projectStart <= endDate;\n        });\n        const totalProjects = filteredProjects.length;\n        const activeProjects = filteredProjects.filter((p)=>p.status === \"in_progress\").length;\n        const completedProjects = filteredProjects.filter((p)=>p.status === \"completed\").length;\n        const delayedProjects = filteredProjects.filter((p)=>{\n            const expectedEnd = new Date(p.expectedEndDate);\n            const actualEnd = p.actualEndDate ? new Date(p.actualEndDate) : new Date();\n            return actualEnd > expectedEnd;\n        }).length;\n        const totalContractValue = filteredProjects.reduce((sum, p)=>sum + p.contractValue, 0);\n        const averageProjectValue = totalProjects > 0 ? totalContractValue / totalProjects : 0;\n        // Calculate performance metrics\n        const onTimeCompletionRate = completedProjects > 0 ? (completedProjects - delayedProjects) / completedProjects * 100 : 0;\n        const averageProjectDuration = filteredProjects.reduce((sum, p)=>{\n            const start = new Date(p.startDate);\n            const end = p.actualEndDate ? new Date(p.actualEndDate) : new Date(p.expectedEndDate);\n            const duration = (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24);\n            return sum + duration;\n        }, 0) / (totalProjects || 1);\n        // Budget variance calculations\n        const projectsWithBudgetData = filteredProjects.filter((p)=>p.actualCost || p.estimatedCost);\n        const budgetVariances = projectsWithBudgetData.map((p)=>{\n            const planned = p.estimatedCost || p.contractValue * 0.8;\n            const actual = p.actualCost || planned;\n            return (actual - planned) / planned * 100;\n        });\n        const averageVariance = budgetVariances.length > 0 ? budgetVariances.reduce((sum, variance)=>sum + variance, 0) / budgetVariances.length : 0;\n        const projectsOverBudget = budgetVariances.filter((v)=>v > 0).length;\n        const projectsUnderBudget = budgetVariances.filter((v)=>v < 0).length;\n        return {\n            overview: {\n                totalProjects,\n                activeProjects,\n                completedProjects,\n                delayedProjects,\n                averageProjectValue,\n                totalContractValue\n            },\n            performance: {\n                onTimeCompletionRate,\n                averageProjectDuration,\n                budgetVariance: {\n                    averageVariance,\n                    projectsOverBudget,\n                    projectsUnderBudget\n                }\n            },\n            byType: [\n                {\n                    type: \"renovation\",\n                    count: filteredProjects.filter((p)=>p.type === \"renovation\").length,\n                    totalValue: filteredProjects.filter((p)=>p.type === \"renovation\").reduce((sum, p)=>sum + p.contractValue, 0),\n                    averageDuration: 45,\n                    completionRate: 85\n                },\n                {\n                    type: \"addition_alteration\",\n                    count: filteredProjects.filter((p)=>p.type === \"addition_alteration\").length,\n                    totalValue: filteredProjects.filter((p)=>p.type === \"addition_alteration\").reduce((sum, p)=>sum + p.contractValue, 0),\n                    averageDuration: 60,\n                    completionRate: 78\n                }\n            ],\n            byStatus: [\n                {\n                    status: \"planning\",\n                    count: filteredProjects.filter((p)=>p.status === \"planning\").length,\n                    totalValue: 0\n                },\n                {\n                    status: \"in_progress\",\n                    count: activeProjects,\n                    totalValue: 0\n                },\n                {\n                    status: \"completed\",\n                    count: completedProjects,\n                    totalValue: 0\n                },\n                {\n                    status: \"on_hold\",\n                    count: filteredProjects.filter((p)=>p.status === \"on_hold\").length,\n                    totalValue: 0\n                }\n            ],\n            timeline: [\n                {\n                    month: \"2024-06\",\n                    started: 2,\n                    completed: 1,\n                    value: 750000\n                },\n                {\n                    month: \"2024-07\",\n                    started: 3,\n                    completed: 2,\n                    value: 1200000\n                },\n                {\n                    month: \"2024-08\",\n                    started: 1,\n                    completed: 1,\n                    value: 480000\n                }\n            ]\n        };\n    };\n    // Generate Client Performance Data\n    const generateClientPerformance = (parameters)=>{\n        const clients = JSON.parse(localStorage.getItem(\"ampere_clients\") || \"[]\");\n        const projects = JSON.parse(localStorage.getItem(\"ampere_projects\") || \"[]\");\n        const invoices = JSON.parse(localStorage.getItem(\"ampere_invoices\") || \"[]\");\n        const payments = JSON.parse(localStorage.getItem(\"ampere_payments\") || \"[]\");\n        const totalClients = clients.length;\n        const activeClients = clients.filter((c)=>c.status === \"active\").length;\n        const newClients = clients.filter((c)=>{\n            const createdDate = new Date(c.createdAt);\n            return createdDate >= parameters.dateRange.startDate && createdDate <= parameters.dateRange.endDate;\n        }).length;\n        // Calculate client metrics\n        const clientMetrics = clients.map((client)=>{\n            const clientProjects = projects.filter((p)=>p.clientId === client.id);\n            const clientInvoices = invoices.filter((i)=>i.clientId === client.id);\n            const clientPayments = payments.filter((payment)=>{\n                const invoice = invoices.find((i)=>i.id === payment.invoiceId);\n                return invoice && invoice.clientId === client.id;\n            });\n            const totalValue = clientProjects.reduce((sum, p)=>sum + p.contractValue, 0);\n            // Calculate average payment days\n            const paidInvoices = clientInvoices.filter((i)=>i.status === \"paid\");\n            const averagePaymentDays = paidInvoices.length > 0 ? paidInvoices.reduce((sum, invoice)=>{\n                if (invoice.paidDate) {\n                    const issueDate = new Date(invoice.issueDate);\n                    const paidDate = new Date(invoice.paidDate);\n                    const days = (paidDate.getTime() - issueDate.getTime()) / (1000 * 60 * 60 * 24);\n                    return sum + days;\n                }\n                return sum;\n            }, 0) / paidInvoices.length : 0;\n            const lastProject = clientProjects.length > 0 ? clientProjects.sort((a, b)=>new Date(b.startDate).getTime() - new Date(a.startDate).getTime())[0] : null;\n            return {\n                clientId: client.id,\n                clientName: client.name,\n                projectCount: clientProjects.length,\n                totalValue,\n                averagePaymentDays,\n                lastProjectDate: lastProject ? new Date(lastProject.startDate) : new Date(client.createdAt),\n                status: client.status,\n                profitability: totalValue * 0.15 // Assume 15% profit margin\n            };\n        });\n        const averageProjectValue = clientMetrics.reduce((sum, c)=>sum + c.totalValue, 0) / (totalClients || 1);\n        const repeatClientRate = clients.filter((c)=>{\n            const clientProjects = projects.filter((p)=>p.clientId === c.id);\n            return clientProjects.length > 1;\n        }).length / totalClients * 100;\n        return {\n            overview: {\n                totalClients,\n                activeClients,\n                newClients,\n                averageProjectValue,\n                repeatClientRate\n            },\n            byClient: clientMetrics,\n            paymentAnalysis: {\n                averagePaymentDays: clientMetrics.reduce((sum, c)=>sum + c.averagePaymentDays, 0) / (clientMetrics.length || 1),\n                onTimePaymentRate: 78,\n                overdueAmount: 342400,\n                clientsWithOverdue: 1\n            },\n            growth: [\n                {\n                    month: \"2024-06\",\n                    newClients: 1,\n                    revenue: 64200,\n                    repeatBusinessRate: 65\n                },\n                {\n                    month: \"2024-07\",\n                    newClients: 0,\n                    revenue: 0,\n                    repeatBusinessRate: 70\n                },\n                {\n                    month: \"2024-08\",\n                    newClients: 2,\n                    revenue: 545700,\n                    repeatBusinessRate: 75\n                }\n            ]\n        };\n    };\n    // Generate Vendor Analysis Data\n    const generateVendorAnalysis = (parameters)=>{\n        const vendors = JSON.parse(localStorage.getItem(\"ampere_vendors\") || \"[]\");\n        const projects = JSON.parse(localStorage.getItem(\"ampere_projects\") || \"[]\");\n        const totalVendors = vendors.length;\n        const activeVendors = vendors.filter((v)=>v.status === \"active\").length;\n        const totalSpent = projects.reduce((sum, project)=>{\n            if (project.vendors && project.vendors.length > 0) {\n                return sum + project.vendors.reduce((vendorSum, vendor)=>vendorSum + (vendor.contractValue || 0), 0);\n            }\n            return sum;\n        }, 0);\n        const averageRating = vendors.reduce((sum, v)=>sum + v.rating, 0) / (totalVendors || 1);\n        return {\n            overview: {\n                totalVendors,\n                activeVendors,\n                totalSpent,\n                averageRating\n            },\n            byVendor: vendors.map((vendor)=>{\n                var _vendor_projects;\n                return {\n                    vendorId: vendor.id,\n                    vendorName: vendor.name,\n                    category: vendor.category,\n                    projectCount: ((_vendor_projects = vendor.projects) === null || _vendor_projects === void 0 ? void 0 : _vendor_projects.length) || 0,\n                    totalValue: 0,\n                    averageRating: vendor.rating,\n                    onTimeDeliveryRate: 85,\n                    lastEngagementDate: new Date(\"2024-08-01\")\n                };\n            }),\n            byCategory: [\n                {\n                    category: \"subcontractor\",\n                    vendorCount: vendors.filter((v)=>v.category === \"subcontractor\").length,\n                    totalSpent: totalSpent * 0.6,\n                    averageRating: 4.2\n                },\n                {\n                    category: \"supplier\",\n                    vendorCount: vendors.filter((v)=>v.category === \"supplier\").length,\n                    totalSpent: totalSpent * 0.3,\n                    averageRating: 4.1\n                },\n                {\n                    category: \"consultant\",\n                    vendorCount: vendors.filter((v)=>v.category === \"consultant\").length,\n                    totalSpent: totalSpent * 0.1,\n                    averageRating: 4.8\n                }\n            ],\n            performance: [\n                {\n                    month: \"2024-06\",\n                    totalSpent: totalSpent * 0.3,\n                    vendorCount: activeVendors,\n                    averageRating: 4.2\n                },\n                {\n                    month: \"2024-07\",\n                    totalSpent: totalSpent * 0.4,\n                    vendorCount: activeVendors,\n                    averageRating: 4.3\n                },\n                {\n                    month: \"2024-08\",\n                    totalSpent: totalSpent * 0.3,\n                    vendorCount: activeVendors,\n                    averageRating: 4.1\n                }\n            ]\n        };\n    };\n    // Generate Tender Success Data\n    const generateTenderSuccess = (parameters)=>{\n        const tenders = JSON.parse(localStorage.getItem(\"ampere_tenders\") || \"[]\");\n        const totalTenders = tenders.length;\n        const submittedTenders = tenders.filter((t)=>[\n                \"submitted\",\n                \"under_evaluation\",\n                \"won\",\n                \"lost\"\n            ].includes(t.status)).length;\n        const wonTenders = tenders.filter((t)=>t.status === \"won\").length;\n        const winRate = submittedTenders > 0 ? wonTenders / submittedTenders * 100 : 0;\n        const totalValue = tenders.reduce((sum, t)=>sum + t.estimatedValue, 0);\n        const averageTenderValue = totalTenders > 0 ? totalValue / totalTenders : 0;\n        return {\n            overview: {\n                totalTenders,\n                submittedTenders,\n                wonTenders,\n                winRate,\n                totalValue,\n                averageTenderValue\n            },\n            byType: [\n                {\n                    type: \"open\",\n                    submitted: 5,\n                    won: 2,\n                    winRate: 40,\n                    totalValue: 2500000\n                },\n                {\n                    type: \"selective\",\n                    submitted: 3,\n                    won: 2,\n                    winRate: 67,\n                    totalValue: 1800000\n                },\n                {\n                    type: \"nominated\",\n                    submitted: 2,\n                    won: 1,\n                    winRate: 50,\n                    totalValue: 750000\n                }\n            ],\n            byStatus: [\n                {\n                    status: \"opportunity\",\n                    count: tenders.filter((t)=>t.status === \"opportunity\").length,\n                    totalValue: 0\n                },\n                {\n                    status: \"preparing\",\n                    count: tenders.filter((t)=>t.status === \"preparing\").length,\n                    totalValue: 0\n                },\n                {\n                    status: \"submitted\",\n                    count: tenders.filter((t)=>t.status === \"submitted\").length,\n                    totalValue: 0\n                },\n                {\n                    status: \"won\",\n                    count: wonTenders,\n                    totalValue: 0\n                },\n                {\n                    status: \"lost\",\n                    count: tenders.filter((t)=>t.status === \"lost\").length,\n                    totalValue: 0\n                }\n            ],\n            timeline: [\n                {\n                    month: \"2024-01\",\n                    submitted: 2,\n                    won: 1,\n                    winRate: 50,\n                    value: 850000\n                },\n                {\n                    month: \"2024-02\",\n                    submitted: 1,\n                    won: 0,\n                    winRate: 0,\n                    value: 0\n                },\n                {\n                    month: \"2024-03\",\n                    submitted: 3,\n                    won: 1,\n                    winRate: 33,\n                    value: 450000\n                }\n            ],\n            competitorAnalysis: {\n                averageCompetitors: 4.2,\n                winRateByCompetitorCount: [\n                    {\n                        competitorCount: 2,\n                        winRate: 75,\n                        tenderCount: 2\n                    },\n                    {\n                        competitorCount: 3,\n                        winRate: 50,\n                        tenderCount: 4\n                    },\n                    {\n                        competitorCount: 5,\n                        winRate: 25,\n                        tenderCount: 6\n                    }\n                ]\n            }\n        };\n    };\n    const generateReport = (type, parameters)=>{\n        const newId = (Math.max(...reports.map((r)=>parseInt(r.id) || 0)) + 1).toString();\n        let data = {};\n        // Generate appropriate data based on report type\n        switch(type){\n            case \"financial_summary\":\n                data = generateFinancialSummary(parameters);\n                break;\n            case \"project_analytics\":\n                data = generateProjectAnalytics(parameters);\n                break;\n            case \"client_performance\":\n                data = generateClientPerformance(parameters);\n                break;\n            case \"vendor_analysis\":\n                data = generateVendorAnalysis(parameters);\n                break;\n            case \"tender_success\":\n                data = generateTenderSuccess(parameters);\n                break;\n            default:\n                data = {};\n        }\n        const newReport = {\n            id: newId,\n            title: \"\".concat(type.replace(\"_\", \" \").replace(/\\b\\w/g, (l)=>l.toUpperCase()), \" - \").concat(new Date().toLocaleDateString()),\n            type: type,\n            category: type.includes(\"financial\") || type.includes(\"cash\") || type.includes(\"profitability\") ? \"financial\" : type.includes(\"project\") || type.includes(\"vendor\") ? \"operational\" : \"analytics\",\n            description: \"Generated \".concat(type.replace(\"_\", \" \"), \" report\"),\n            status: \"completed\",\n            generatedBy: \"1\",\n            generatedAt: new Date(),\n            parameters,\n            data\n        };\n        setReports((prev)=>[\n                ...prev,\n                newReport\n            ]);\n        return newReport;\n    };\n    const updateReport = (id, updates)=>{\n        setReports((prevReports)=>{\n            const index = prevReports.findIndex((report)=>report.id === id);\n            if (index === -1) return prevReports;\n            const updatedReport = {\n                ...prevReports[index],\n                ...updates\n            };\n            const newReports = [\n                ...prevReports\n            ];\n            newReports[index] = updatedReport;\n            return newReports;\n        });\n        return true;\n    };\n    const deleteReport = (id)=>{\n        setReports((prevReports)=>prevReports.filter((report)=>report.id !== id));\n        return true;\n    };\n    const refreshReportsData = ()=>{\n        try {\n            const storedReports = localStorage.getItem(\"ampere_reports\");\n            if (storedReports) {\n                setReports(JSON.parse(storedReports));\n            } else {\n                setReports(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockReports);\n            }\n        } catch (error) {\n            console.error(\"Error refreshing reports data:\", error);\n            setReports(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockReports);\n        }\n    };\n    const value = {\n        reports,\n        getReport,\n        generateReport,\n        updateReport,\n        deleteReport,\n        getReportsByCategory,\n        getRecentReports,\n        generateFinancialSummary,\n        generateProjectAnalytics,\n        generateClientPerformance,\n        generateVendorAnalysis,\n        generateTenderSuccess,\n        refreshReportsData\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ReportsContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\stamm\\\\AMPERE WEBAPP\\\\src\\\\contexts\\\\ReportsContext.tsx\",\n        lineNumber: 590,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(ReportsProvider, \"JTDS+VrqwJAHtohdGfvBwjNcYKM=\");\n_c = ReportsProvider;\nvar _c;\n$RefreshReg$(_c, \"ReportsProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/ReportsContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/contexts/SettingsContext.tsx":
/*!******************************************!*\
  !*** ./src/contexts/SettingsContext.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SettingsProvider: function() { return /* binding */ SettingsProvider; },\n/* harmony export */   useSettings: function() { return /* binding */ useSettings; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ useSettings,SettingsProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\nconst SettingsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useSettings = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SettingsContext);\n    if (context === undefined) {\n        throw new Error(\"useSettings must be used within a SettingsProvider\");\n    }\n    return context;\n};\n_s(useSettings, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Default settings data\nconst defaultClientTypes = [\n    {\n        id: \"1\",\n        value: \"individual\",\n        label: \"Individual\",\n        description: \"Individual homeowners and private clients\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"2\",\n        value: \"corporate\",\n        label: \"Corporate\",\n        description: \"Business entities and corporations\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"3\",\n        value: \"government\",\n        label: \"Government\",\n        description: \"Government agencies and statutory boards\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"4\",\n        value: \"hdb\",\n        label: \"HDB\",\n        description: \"Housing Development Board\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"5\",\n        value: \"private_developer\",\n        label: \"Private Developer\",\n        description: \"Private property developers and real estate companies\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    }\n];\nconst defaultVendorSpecializations = [\n    {\n        id: \"1\",\n        value: \"electrical_works\",\n        label: \"Electrical Works\",\n        description: \"Electrical installation, wiring, and maintenance services\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"2\",\n        value: \"plumbing_sanitary\",\n        label: \"Plumbing & Sanitary\",\n        description: \"Plumbing installation, pipe fitting, and sanitary works\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"3\",\n        value: \"aircon_mechanical\",\n        label: \"Air-conditioning & Mechanical\",\n        description: \"HVAC systems, air-conditioning, and mechanical ventilation\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"4\",\n        value: \"fire_protection\",\n        label: \"Fire Protection\",\n        description: \"Fire alarm systems, sprinkler systems, and fire safety equipment\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"5\",\n        value: \"security_systems\",\n        label: \"Security Systems\",\n        description: \"CCTV, access control, alarm systems, and security equipment\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"6\",\n        value: \"building_automation\",\n        label: \"Building Automation\",\n        description: \"BMS, smart building systems, and automation controls\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"7\",\n        value: \"renewable_energy\",\n        label: \"Renewable Energy\",\n        description: \"Solar panels, energy storage systems, and green technology\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"8\",\n        value: \"structural_works\",\n        label: \"Structural Works\",\n        description: \"Structural engineering, reinforcement, and construction\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    }\n];\nconst defaultFrequentlyUsedItems = [\n    {\n        id: \"1\",\n        description: \"Site Supervision (Daily Rate)\",\n        unit: \"days\",\n        unitPrice: 350,\n        category: \"Labour\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"2\",\n        description: \"Project Management (Monthly Rate)\",\n        unit: \"months\",\n        unitPrice: 8500,\n        category: \"Labour\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"3\",\n        description: \"Concrete Works\",\n        unit: \"cubic meter\",\n        unitPrice: 180,\n        category: \"Materials\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"4\",\n        description: \"Steel Reinforcement\",\n        unit: \"kg\",\n        unitPrice: 1.2,\n        category: \"Materials\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"5\",\n        description: \"Scaffolding Rental\",\n        unit: \"sqm\",\n        unitPrice: 8.5,\n        category: \"Equipment\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    },\n    {\n        id: \"6\",\n        description: \"Excavation Works\",\n        unit: \"cubic meter\",\n        unitPrice: 45,\n        category: \"Labour\",\n        isActive: true,\n        isDefault: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n    }\n];\nconst defaultSettings = {\n    id: \"1\",\n    companyInfo: {\n        name: \"Ampere Engineering Pte Ltd\",\n        registrationNumber: \"201234567X\",\n        gstNumber: \"201234567X\",\n        address: {\n            street: \"123 Engineering Road\",\n            building: \"Tech Hub Building\",\n            unit: \"#05-01\",\n            postalCode: \"123456\",\n            district: \"Central\"\n        },\n        phone: \"+65 6123 4567\",\n        email: \"info@ampere.com.sg\",\n        website: \"www.ampere.com.sg\"\n    },\n    clientTypes: defaultClientTypes,\n    vendorSpecializations: defaultVendorSpecializations,\n    frequentlyUsedItems: defaultFrequentlyUsedItems,\n    systemPreferences: {\n        defaultCurrency: \"SGD\",\n        defaultGSTRate: 7,\n        defaultPaymentTerms: 30,\n        dateFormat: \"DD/MM/YYYY\",\n        timeZone: \"Asia/Singapore\",\n        fiscalYearStart: \"01-01\",\n        autoBackup: true,\n        maintenanceMode: false\n    },\n    emailSettings: {\n        smtpHost: \"smtp.gmail.com\",\n        smtpPort: 587,\n        smtpUser: \"system@ampere.com.sg\",\n        smtpPassword: \"\",\n        fromEmail: \"noreply@ampere.com.sg\",\n        fromName: \"Ampere Engineering System\",\n        isEnabled: false\n    },\n    notificationSettings: {\n        emailNotifications: {\n            newProjects: true,\n            projectUpdates: true,\n            invoiceGenerated: true,\n            paymentReceived: true,\n            quotationSent: true,\n            tenderDeadlines: true\n        },\n        systemAlerts: {\n            lowInventory: true,\n            projectDelays: true,\n            overdueInvoices: true,\n            permitExpiry: true\n        }\n    },\n    securitySettings: {\n        passwordPolicy: {\n            minLength: 8,\n            requireUppercase: true,\n            requireLowercase: true,\n            requireNumbers: true,\n            requireSpecialChars: false,\n            expiryDays: 90\n        },\n        sessionTimeout: 60,\n        maxLoginAttempts: 5,\n        lockoutDuration: 30,\n        twoFactorAuth: false\n    },\n    updatedAt: new Date(),\n    updatedBy: \"1\"\n};\nconst SettingsProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [settings, setSettings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(defaultSettings);\n    // Initialize settings from localStorage on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            const storedSettings = localStorage.getItem(\"ampere_settings\");\n            if (storedSettings) {\n                const parsedSettings = JSON.parse(storedSettings);\n                // Ensure dates are properly converted\n                if (parsedSettings) {\n                    parsedSettings.updatedAt = new Date(parsedSettings.updatedAt);\n                    parsedSettings.clientTypes = parsedSettings.clientTypes.map((ct)=>({\n                            ...ct,\n                            createdAt: new Date(ct.createdAt),\n                            updatedAt: new Date(ct.updatedAt)\n                        }));\n                    // Handle vendor specializations with backward compatibility\n                    if (parsedSettings.vendorSpecializations) {\n                        parsedSettings.vendorSpecializations = parsedSettings.vendorSpecializations.map((vs)=>({\n                                ...vs,\n                                createdAt: new Date(vs.createdAt),\n                                updatedAt: new Date(vs.updatedAt)\n                            }));\n                    } else {\n                        parsedSettings.vendorSpecializations = defaultVendorSpecializations;\n                    }\n                    setSettings(parsedSettings);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error loading settings from localStorage:\", error);\n            setSettings(defaultSettings);\n        }\n    }, []);\n    // Save settings to localStorage whenever settings change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            localStorage.setItem(\"ampere_settings\", JSON.stringify(settings));\n        } catch (error) {\n            console.error(\"Error saving settings to localStorage:\", error);\n        }\n    }, [\n        settings\n    ]);\n    const clientTypes = (settings === null || settings === void 0 ? void 0 : settings.clientTypes) || defaultClientTypes;\n    // Vendor Specializations Management\n    const vendorSpecializations = (settings === null || settings === void 0 ? void 0 : settings.vendorSpecializations) || defaultVendorSpecializations;\n    // Frequently Used Items Management\n    const frequentlyUsedItems = (settings === null || settings === void 0 ? void 0 : settings.frequentlyUsedItems) || defaultFrequentlyUsedItems;\n    const getVendorSpecialization = (id)=>{\n        return vendorSpecializations.find((vs)=>vs.id === id);\n    };\n    const getActiveVendorSpecializations = ()=>{\n        return vendorSpecializations.filter((vs)=>vs.isActive);\n    };\n    const generateVendorSpecializationId = ()=>{\n        const existingIds = vendorSpecializations.map((vs)=>parseInt(vs.id)).filter((id)=>!isNaN(id));\n        const maxId = existingIds.length > 0 ? Math.max(...existingIds) : 0;\n        return (maxId + 1).toString();\n    };\n    const addVendorSpecialization = (specializationData)=>{\n        const newSpecialization = {\n            ...specializationData,\n            id: generateVendorSpecializationId(),\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        setSettings((prevSettings)=>({\n                ...prevSettings,\n                vendorSpecializations: [\n                    ...prevSettings.vendorSpecializations,\n                    newSpecialization\n                ],\n                updatedAt: new Date()\n            }));\n        return newSpecialization;\n    };\n    const updateVendorSpecialization = (id, updates)=>{\n        setSettings((prevSettings)=>{\n            const specializationIndex = prevSettings.vendorSpecializations.findIndex((vs)=>vs.id === id);\n            if (specializationIndex === -1) return prevSettings;\n            const updatedSpecializations = [\n                ...prevSettings.vendorSpecializations\n            ];\n            updatedSpecializations[specializationIndex] = {\n                ...updatedSpecializations[specializationIndex],\n                ...updates,\n                id,\n                updatedAt: new Date()\n            };\n            return {\n                ...prevSettings,\n                vendorSpecializations: updatedSpecializations,\n                updatedAt: new Date()\n            };\n        });\n        return true;\n    };\n    const deleteVendorSpecialization = (id)=>{\n        const specialization = getVendorSpecialization(id);\n        if (specialization === null || specialization === void 0 ? void 0 : specialization.isDefault) {\n            console.warn(\"Cannot delete default vendor specializations\");\n            return false;\n        }\n        setSettings((prevSettings)=>({\n                ...prevSettings,\n                vendorSpecializations: prevSettings.vendorSpecializations.filter((vs)=>vs.id !== id),\n                updatedAt: new Date()\n            }));\n        return true;\n    };\n    const toggleVendorSpecializationStatus = (id)=>{\n        const specialization = getVendorSpecialization(id);\n        if (!specialization) return false;\n        return updateVendorSpecialization(id, {\n            isActive: !specialization.isActive\n        });\n    };\n    const getFrequentlyUsedItem = (id)=>{\n        return frequentlyUsedItems.find((item)=>item.id === id);\n    };\n    const getActiveFrequentlyUsedItems = ()=>{\n        return frequentlyUsedItems.filter((item)=>item.isActive);\n    };\n    const generateFrequentlyUsedItemId = ()=>{\n        const existingIds = frequentlyUsedItems.map((item)=>parseInt(item.id)).filter((id)=>!isNaN(id));\n        const maxId = existingIds.length > 0 ? Math.max(...existingIds) : 0;\n        return (maxId + 1).toString();\n    };\n    const addFrequentlyUsedItem = (itemData)=>{\n        const newItem = {\n            ...itemData,\n            id: generateFrequentlyUsedItemId(),\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        setSettings((prevSettings)=>({\n                ...prevSettings,\n                frequentlyUsedItems: [\n                    ...prevSettings.frequentlyUsedItems,\n                    newItem\n                ],\n                updatedAt: new Date()\n            }));\n        return newItem;\n    };\n    const updateFrequentlyUsedItem = (id, updates)=>{\n        setSettings((prevSettings)=>{\n            const itemIndex = prevSettings.frequentlyUsedItems.findIndex((item)=>item.id === id);\n            if (itemIndex === -1) return prevSettings;\n            const updatedItems = [\n                ...prevSettings.frequentlyUsedItems\n            ];\n            updatedItems[itemIndex] = {\n                ...updatedItems[itemIndex],\n                ...updates,\n                id,\n                updatedAt: new Date()\n            };\n            return {\n                ...prevSettings,\n                frequentlyUsedItems: updatedItems,\n                updatedAt: new Date()\n            };\n        });\n        return true;\n    };\n    const deleteFrequentlyUsedItem = (id)=>{\n        const item = getFrequentlyUsedItem(id);\n        if (item === null || item === void 0 ? void 0 : item.isDefault) {\n            console.warn(\"Cannot delete default frequently used items\");\n            return false;\n        }\n        setSettings((prevSettings)=>({\n                ...prevSettings,\n                frequentlyUsedItems: prevSettings.frequentlyUsedItems.filter((item)=>item.id !== id),\n                updatedAt: new Date()\n            }));\n        return true;\n    };\n    const toggleFrequentlyUsedItemStatus = (id)=>{\n        const item = getFrequentlyUsedItem(id);\n        if (!item) return false;\n        return updateFrequentlyUsedItem(id, {\n            isActive: !item.isActive\n        });\n    };\n    const getClientType = (id)=>{\n        return clientTypes.find((ct)=>ct.id === id);\n    };\n    const getActiveClientTypes = ()=>{\n        return clientTypes.filter((ct)=>ct.isActive);\n    };\n    const generateClientTypeId = ()=>{\n        const existingIds = clientTypes.map((ct)=>parseInt(ct.id)).filter((id)=>!isNaN(id));\n        const maxId = existingIds.length > 0 ? Math.max(...existingIds) : 0;\n        return (maxId + 1).toString();\n    };\n    const addClientType = (clientTypeData)=>{\n        const newClientType = {\n            ...clientTypeData,\n            id: generateClientTypeId(),\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        setSettings((prevSettings)=>({\n                ...prevSettings,\n                clientTypes: [\n                    ...prevSettings.clientTypes,\n                    newClientType\n                ],\n                updatedAt: new Date()\n            }));\n        return newClientType;\n    };\n    const updateClientType = (id, updates)=>{\n        setSettings((prevSettings)=>{\n            const clientTypeIndex = prevSettings.clientTypes.findIndex((ct)=>ct.id === id);\n            if (clientTypeIndex === -1) return prevSettings;\n            const updatedClientTypes = [\n                ...prevSettings.clientTypes\n            ];\n            updatedClientTypes[clientTypeIndex] = {\n                ...updatedClientTypes[clientTypeIndex],\n                ...updates,\n                id,\n                updatedAt: new Date()\n            };\n            return {\n                ...prevSettings,\n                clientTypes: updatedClientTypes,\n                updatedAt: new Date()\n            };\n        });\n        return true;\n    };\n    const deleteClientType = (id)=>{\n        const clientType = getClientType(id);\n        if (clientType === null || clientType === void 0 ? void 0 : clientType.isDefault) {\n            console.warn(\"Cannot delete default client types\");\n            return false;\n        }\n        setSettings((prevSettings)=>({\n                ...prevSettings,\n                clientTypes: prevSettings.clientTypes.filter((ct)=>ct.id !== id),\n                updatedAt: new Date()\n            }));\n        return true;\n    };\n    const toggleClientTypeStatus = (id)=>{\n        const clientType = getClientType(id);\n        if (!clientType) return false;\n        return updateClientType(id, {\n            isActive: !clientType.isActive\n        });\n    };\n    const updateCompanyInfo = (companyInfo)=>{\n        if (!settings) return false;\n        const updatedSettings = {\n            ...settings,\n            companyInfo,\n            updatedAt: new Date(),\n            updatedBy: \"current_user_id\" // This would be replaced with actual user ID\n        };\n        setSettings(updatedSettings);\n        saveSettingsToStorage(updatedSettings);\n        return true;\n    };\n    const updateSystemPreferences = (preferences)=>{\n        if (!settings) return false;\n        const updatedSettings = {\n            ...settings,\n            systemPreferences: preferences,\n            updatedAt: new Date(),\n            updatedBy: \"current_user_id\" // This would be replaced with actual user ID\n        };\n        setSettings(updatedSettings);\n        saveSettingsToStorage(updatedSettings);\n        return true;\n    };\n    const updateEmailSettings = (emailSettings)=>{\n        if (!settings) return false;\n        const updatedSettings = {\n            ...settings,\n            emailSettings,\n            updatedAt: new Date(),\n            updatedBy: \"current_user_id\" // This would be replaced with actual user ID\n        };\n        setSettings(updatedSettings);\n        saveSettingsToStorage(updatedSettings);\n        return true;\n    };\n    const updateNotificationSettings = (notifications)=>{\n        if (!settings) return false;\n        const updatedSettings = {\n            ...settings,\n            notificationSettings: notifications,\n            updatedAt: new Date(),\n            updatedBy: \"current_user_id\" // This would be replaced with actual user ID\n        };\n        setSettings(updatedSettings);\n        saveSettingsToStorage(updatedSettings);\n        return true;\n    };\n    const updateSecuritySettings = (security)=>{\n        if (!settings) return false;\n        const updatedSettings = {\n            ...settings,\n            securitySettings: security,\n            updatedAt: new Date(),\n            updatedBy: \"current_user_id\" // This would be replaced with actual user ID\n        };\n        setSettings(updatedSettings);\n        saveSettingsToStorage(updatedSettings);\n        return true;\n    };\n    // Add Xero settings update function\n    const updateXeroSettings = (xeroSettings)=>{\n        if (!settings) return false;\n        const updatedSettings = {\n            ...settings,\n            xeroSettings: {\n                ...settings.xeroSettings,\n                ...xeroSettings\n            },\n            updatedAt: new Date(),\n            updatedBy: \"current_user_id\" // This would be replaced with actual user ID\n        };\n        setSettings(updatedSettings);\n        saveSettingsToStorage(updatedSettings);\n        return true;\n    };\n    const refreshSettings = ()=>{\n        try {\n            const storedSettings = localStorage.getItem(\"ampere_settings\");\n            if (storedSettings) {\n                setSettings(JSON.parse(storedSettings));\n            } else {\n                setSettings(defaultSettings);\n            }\n        } catch (error) {\n            console.error(\"Error refreshing settings:\", error);\n            setSettings(defaultSettings);\n        }\n    };\n    const exportSettings = ()=>{\n        if (!settings) return \"\";\n        return JSON.stringify(settings, null, 2);\n    };\n    const importSettings = (settingsJson)=>{\n        try {\n            const parsedSettings = JSON.parse(settingsJson);\n            setSettings(parsedSettings);\n            saveSettingsToStorage(parsedSettings);\n            return true;\n        } catch (error) {\n            console.error(\"Error importing settings:\", error);\n            return false;\n        }\n    };\n    const value = {\n        settings,\n        clientTypes,\n        getClientType,\n        getActiveClientTypes,\n        addClientType,\n        updateClientType,\n        deleteClientType,\n        toggleClientTypeStatus,\n        vendorSpecializations,\n        getVendorSpecialization,\n        getActiveVendorSpecializations,\n        addVendorSpecialization,\n        updateVendorSpecialization,\n        deleteVendorSpecialization,\n        toggleVendorSpecializationStatus,\n        frequentlyUsedItems,\n        getFrequentlyUsedItem,\n        getActiveFrequentlyUsedItems,\n        addFrequentlyUsedItem,\n        updateFrequentlyUsedItem,\n        deleteFrequentlyUsedItem,\n        toggleFrequentlyUsedItemStatus,\n        updateCompanyInfo,\n        updateSystemPreferences,\n        updateEmailSettings,\n        updateNotificationSettings,\n        updateSecuritySettings,\n        updateXeroSettings,\n        refreshSettings,\n        exportSettings,\n        importSettings\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SettingsContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\stamm\\\\AMPERE WEBAPP\\\\src\\\\contexts\\\\SettingsContext.tsx\",\n        lineNumber: 771,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(SettingsProvider, \"Wc799zRIYoLkx3R/ul10RMsdhe0=\");\n_c = SettingsProvider;\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/SettingsContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/contexts/TenderContext.tsx":
/*!****************************************!*\
  !*** ./src/contexts/TenderContext.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TenderProvider: function() { return /* binding */ TenderProvider; },\n/* harmony export */   useTenders: function() { return /* binding */ useTenders; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_mock_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/mock-data */ \"(app-pages-browser)/./src/lib/mock-data.ts\");\n/* harmony import */ var _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/contexts/AuthContext */ \"(app-pages-browser)/./src/contexts/AuthContext.tsx\");\n/* harmony import */ var _contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/contexts/AuditLogContext */ \"(app-pages-browser)/./src/contexts/AuditLogContext.tsx\");\n/* __next_internal_client_entry_do_not_use__ useTenders,TenderProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\nconst TenderContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useTenders = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(TenderContext);\n    if (context === undefined) {\n        throw new Error(\"useTenders must be used within a TenderProvider\");\n    }\n    return context;\n};\n_s(useTenders, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst TenderProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [tenders, setTenders] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockTenders);\n    const { user: currentUser } = (0,_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_3__.useAuth)();\n    const auditLog = (0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_4__.useAuditLog)();\n    // Initialize tenders from localStorage if available\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            const storedTenders = localStorage.getItem(\"ampere_tenders\");\n            if (storedTenders) {\n                const parsedTenders = JSON.parse(storedTenders);\n                // Validate that the data structure is correct\n                if (Array.isArray(parsedTenders) && parsedTenders.length > 0) {\n                    setTenders(parsedTenders);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error loading tenders from localStorage:\", error);\n            // Fall back to mock data if there's an error\n            setTenders(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockTenders);\n        }\n    }, []);\n    // Save tenders to localStorage whenever tenders change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            localStorage.setItem(\"ampere_tenders\", JSON.stringify(tenders));\n        } catch (error) {\n            console.error(\"Error saving tenders to localStorage:\", error);\n        }\n    }, [\n        tenders\n    ]);\n    const getTender = (id)=>{\n        return tenders.find((tender)=>tender.id === id);\n    };\n    const addTender = (tenderData)=>{\n        // Generate a unique ID\n        const newId = (Math.max(...tenders.map((t)=>parseInt(t.id) || 0)) + 1).toString();\n        const newTender = {\n            id: newId,\n            title: tenderData.title || \"\",\n            clientId: tenderData.clientId || \"\",\n            type: tenderData.type || \"open\",\n            status: tenderData.status || \"opportunity\",\n            description: tenderData.description || \"\",\n            location: tenderData.location || {\n                street: \"\",\n                postalCode: \"\",\n                district: \"\"\n            },\n            estimatedValue: tenderData.estimatedValue || 0,\n            submissionDeadline: tenderData.submissionDeadline || new Date(),\n            startDate: tenderData.startDate,\n            completionDate: tenderData.completionDate,\n            requirements: tenderData.requirements || [],\n            documents: tenderData.documents || [],\n            ourQuotation: tenderData.ourQuotation,\n            competitorCount: tenderData.competitorCount || 0,\n            winProbability: tenderData.winProbability || 50,\n            assignedTo: tenderData.assignedTo || \"\",\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            ...tenderData\n        };\n        setTenders((prevTenders)=>[\n                ...prevTenders,\n                newTender\n            ]);\n        return newTender;\n    };\n    const updateTender = (id, updates)=>{\n        const oldTender = getTender(id);\n        setTenders((prevTenders)=>{\n            const index = prevTenders.findIndex((tender)=>tender.id === id);\n            if (index === -1) return prevTenders;\n            const updatedTender = {\n                ...prevTenders[index],\n                ...updates,\n                updatedAt: new Date()\n            };\n            const newTenders = [\n                ...prevTenders\n            ];\n            newTenders[index] = updatedTender;\n            return newTenders;\n        });\n        // Log tender update\n        if (currentUser && oldTender) {\n            const updatedTender = {\n                ...oldTender,\n                ...updates\n            };\n            auditLog.addAuditLog((0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_4__.createAuditLog)(\"UPDATE\", \"TENDER\", id, currentUser, {\n                entityName: oldTender.title,\n                oldData: oldTender,\n                newData: updatedTender,\n                details: \"Updated tender: \".concat(oldTender.title),\n                excludeFields: [\n                    \"updatedAt\",\n                    \"documents\"\n                ]\n            }));\n        }\n        return true;\n    };\n    const deleteTender = (id)=>{\n        const tender = getTender(id);\n        if (!tender) return false;\n        setTenders((prevTenders)=>prevTenders.filter((tender)=>tender.id !== id));\n        // Log tender deletion\n        if (currentUser) {\n            auditLog.addAuditLog((0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_4__.createAuditLog)(\"DELETE\", \"TENDER\", id, currentUser, {\n                entityName: tender.title,\n                details: \"Deleted tender: \".concat(tender.title)\n            }));\n        }\n        return true;\n    };\n    // Document management functions\n    const generateDocumentId = ()=>{\n        return \"DOC-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n    };\n    const addDocumentsToTender = (tenderId, documents)=>{\n        const tender = getTender(tenderId);\n        if (!tender) return false;\n        const newDocuments = documents.map((doc)=>({\n                id: generateDocumentId(),\n                name: doc.name || \"\",\n                type: doc.type || \"other\",\n                size: doc.size || 0,\n                uploadedBy: doc.uploadedBy || (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || \"\",\n                uploadedAt: doc.uploadedAt || new Date(),\n                url: doc.url || \"#\",\n                tenderId: tenderId,\n                isConfidential: doc.isConfidential || false,\n                ...doc\n            }));\n        const updatedDocuments = [\n            ...tender.documents || [],\n            ...newDocuments\n        ];\n        updateTender(tenderId, {\n            documents: updatedDocuments\n        });\n        // Log document upload\n        if (currentUser) {\n            newDocuments.forEach((doc)=>{\n                auditLog.addAuditLog((0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_4__.createAuditLog)(\"CREATE\", \"TENDER\", tenderId, currentUser, {\n                    entityName: tender.title,\n                    details: 'Uploaded document \"'.concat(doc.name, '\" to tender: ').concat(tender.title)\n                }));\n            });\n        }\n        return true;\n    };\n    const removeDocumentFromTender = (tenderId, documentId)=>{\n        const tender = getTender(tenderId);\n        if (!tender || !tender.documents) return false;\n        const documentToRemove = tender.documents.find((doc)=>doc.id === documentId);\n        if (!documentToRemove) return false;\n        const updatedDocuments = tender.documents.filter((doc)=>doc.id !== documentId);\n        updateTender(tenderId, {\n            documents: updatedDocuments\n        });\n        // Log document removal\n        if (currentUser) {\n            auditLog.addAuditLog((0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_4__.createAuditLog)(\"DELETE\", \"TENDER\", tenderId, currentUser, {\n                entityName: tender.title,\n                details: 'Removed document \"'.concat(documentToRemove.name, '\" from tender: ').concat(tender.title)\n            }));\n        }\n        return true;\n    };\n    const updateTenderDocument = (tenderId, documentId, updates)=>{\n        const tender = getTender(tenderId);\n        if (!tender || !tender.documents) return false;\n        const documentIndex = tender.documents.findIndex((doc)=>doc.id === documentId);\n        if (documentIndex === -1) return false;\n        const oldDocument = tender.documents[documentIndex];\n        const updatedDocuments = [\n            ...tender.documents\n        ];\n        updatedDocuments[documentIndex] = {\n            ...oldDocument,\n            ...updates\n        };\n        updateTender(tenderId, {\n            documents: updatedDocuments\n        });\n        // Log document update\n        if (currentUser) {\n            auditLog.addAuditLog((0,_contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_4__.createAuditLog)(\"UPDATE\", \"TENDER\", tenderId, currentUser, {\n                entityName: tender.title,\n                details: 'Updated document \"'.concat(oldDocument.name, '\" in tender: ').concat(tender.title)\n            }));\n        }\n        return true;\n    };\n    const getTenderDocuments = (tenderId)=>{\n        const tender = getTender(tenderId);\n        return (tender === null || tender === void 0 ? void 0 : tender.documents) || [];\n    };\n    const refreshTenders = ()=>{\n        // Refresh from localStorage or reset to mock data\n        try {\n            const storedTenders = localStorage.getItem(\"ampere_tenders\");\n            if (storedTenders) {\n                setTenders(JSON.parse(storedTenders));\n            } else {\n                setTenders(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockTenders);\n            }\n        } catch (error) {\n            console.error(\"Error refreshing tenders:\", error);\n            setTenders(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockTenders);\n        }\n    };\n    const value = {\n        tenders,\n        getTender,\n        addTender,\n        updateTender,\n        deleteTender,\n        refreshTenders,\n        // Document management functions\n        addDocumentsToTender,\n        removeDocumentFromTender,\n        updateTenderDocument,\n        getTenderDocuments\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(TenderContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\stamm\\\\AMPERE WEBAPP\\\\src\\\\contexts\\\\TenderContext.tsx\",\n        lineNumber: 306,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(TenderProvider, \"Khx4FURnsRsXRj5OMnZG9mWplwc=\", false, function() {\n    return [\n        _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_3__.useAuth,\n        _contexts_AuditLogContext__WEBPACK_IMPORTED_MODULE_4__.useAuditLog\n    ];\n});\n_c = TenderProvider;\nvar _c;\n$RefreshReg$(_c, \"TenderProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/TenderContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/contexts/UserContext.tsx":
/*!**************************************!*\
  !*** ./src/contexts/UserContext.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UserProvider: function() { return /* binding */ UserProvider; },\n/* harmony export */   useUsers: function() { return /* binding */ useUsers; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_mock_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/mock-data */ \"(app-pages-browser)/./src/lib/mock-data.ts\");\n/* __next_internal_client_entry_do_not_use__ useUsers,UserProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst UserContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useUsers = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(UserContext);\n    if (context === undefined) {\n        throw new Error(\"useUsers must be used within a UserProvider\");\n    }\n    return context;\n};\n_s(useUsers, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst UserProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [users, setUsers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockUsers);\n    // Initialize users from localStorage if available\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            const storedUsers = localStorage.getItem(\"ampere_users\");\n            if (storedUsers) {\n                const parsedUsers = JSON.parse(storedUsers);\n                // Validate that the data structure is correct\n                if (Array.isArray(parsedUsers) && parsedUsers.length > 0) {\n                    setUsers(parsedUsers);\n                }\n            }\n        } catch (error) {\n            console.error(\"Error loading users from localStorage:\", error);\n            // Fall back to mock data if there's an error\n            setUsers(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockUsers);\n        }\n    }, []);\n    // Save users to localStorage whenever users change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            localStorage.setItem(\"ampere_users\", JSON.stringify(users));\n        } catch (error) {\n            console.error(\"Error saving users to localStorage:\", error);\n        }\n    }, [\n        users\n    ]);\n    const getUser = (id)=>{\n        return users.find((user)=>user.id === id);\n    };\n    const refreshUsers = ()=>{\n        // Refresh from localStorage or reset to mock data\n        try {\n            const storedUsers = localStorage.getItem(\"ampere_users\");\n            if (storedUsers) {\n                setUsers(JSON.parse(storedUsers));\n            } else {\n                setUsers(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockUsers);\n            }\n        } catch (error) {\n            console.error(\"Error refreshing users:\", error);\n            setUsers(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockUsers);\n        }\n    };\n    const contextValue = {\n        users,\n        getUser,\n        refreshUsers\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(UserContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\stamm\\\\AMPERE WEBAPP\\\\src\\\\contexts\\\\UserContext.tsx\",\n        lineNumber: 83,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(UserProvider, \"GqKyYGR382AqhWcP16Ws4cX2Op8=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb250ZXh0cy9Vc2VyQ29udGV4dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFNkU7QUFFbEM7QUFRM0MsTUFBTU0sNEJBQWNMLG9EQUFhQSxDQUE4Qk07QUFFeEQsTUFBTUMsV0FBVzs7SUFDdEIsTUFBTUMsVUFBVVAsaURBQVVBLENBQUNJO0lBQzNCLElBQUlHLFlBQVlGLFdBQVc7UUFDekIsTUFBTSxJQUFJRyxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Q7QUFDVCxFQUFDO0dBTllEO0FBWU4sTUFBTUcsZUFBNEM7UUFBQyxFQUFFQyxRQUFRLEVBQUU7O0lBQ3BFLE1BQU0sQ0FBQ0MsT0FBT0MsU0FBUyxHQUFHWCwrQ0FBUUEsQ0FBU0UscURBQVNBO0lBRXBELGtEQUFrRDtJQUNsREQsZ0RBQVNBLENBQUM7UUFDUixJQUFJO1lBQ0YsTUFBTVcsY0FBY0MsYUFBYUMsT0FBTyxDQUFDO1lBQ3pDLElBQUlGLGFBQWE7Z0JBQ2YsTUFBTUcsY0FBY0MsS0FBS0MsS0FBSyxDQUFDTDtnQkFDL0IsOENBQThDO2dCQUM5QyxJQUFJTSxNQUFNQyxPQUFPLENBQUNKLGdCQUFnQkEsWUFBWUssTUFBTSxHQUFHLEdBQUc7b0JBQ3hEVCxTQUFTSTtnQkFDWDtZQUNGO1FBQ0YsRUFBRSxPQUFPTSxPQUFPO1lBQ2RDLFFBQVFELEtBQUssQ0FBQywwQ0FBMENBO1lBQ3hELDZDQUE2QztZQUM3Q1YsU0FBU1QscURBQVNBO1FBQ3BCO0lBQ0YsR0FBRyxFQUFFO0lBRUwsbURBQW1EO0lBQ25ERCxnREFBU0EsQ0FBQztRQUNSLElBQUk7WUFDRlksYUFBYVUsT0FBTyxDQUFDLGdCQUFnQlAsS0FBS1EsU0FBUyxDQUFDZDtRQUN0RCxFQUFFLE9BQU9XLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLHVDQUF1Q0E7UUFDdkQ7SUFDRixHQUFHO1FBQUNYO0tBQU07SUFFVixNQUFNZSxVQUFVLENBQUNDO1FBQ2YsT0FBT2hCLE1BQU1pQixJQUFJLENBQUNDLENBQUFBLE9BQVFBLEtBQUtGLEVBQUUsS0FBS0E7SUFDeEM7SUFFQSxNQUFNRyxlQUFlO1FBQ25CLGtEQUFrRDtRQUNsRCxJQUFJO1lBQ0YsTUFBTWpCLGNBQWNDLGFBQWFDLE9BQU8sQ0FBQztZQUN6QyxJQUFJRixhQUFhO2dCQUNmRCxTQUFTSyxLQUFLQyxLQUFLLENBQUNMO1lBQ3RCLE9BQU87Z0JBQ0xELFNBQVNULHFEQUFTQTtZQUNwQjtRQUNGLEVBQUUsT0FBT21CLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLDJCQUEyQkE7WUFDekNWLFNBQVNULHFEQUFTQTtRQUNwQjtJQUNGO0lBRUEsTUFBTTRCLGVBQWdDO1FBQ3BDcEI7UUFDQWU7UUFDQUk7SUFDRjtJQUVBLHFCQUNFLDhEQUFDMUIsWUFBWTRCLFFBQVE7UUFBQ0MsT0FBT0Y7a0JBQzFCckI7Ozs7OztBQUdQLEVBQUM7SUE1RFlEO0tBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb250ZXh0cy9Vc2VyQ29udGV4dC50c3g/NWVlMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcclxuXHJcbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tICdAL3R5cGVzJ1xyXG5pbXBvcnQgeyBtb2NrVXNlcnMgfSBmcm9tICdAL2xpYi9tb2NrLWRhdGEnXHJcblxyXG5pbnRlcmZhY2UgVXNlckNvbnRleHRUeXBlIHtcclxuICB1c2VyczogVXNlcltdXHJcbiAgZ2V0VXNlcjogKGlkOiBzdHJpbmcpID0+IFVzZXIgfCB1bmRlZmluZWRcclxuICByZWZyZXNoVXNlcnM6ICgpID0+IHZvaWRcclxufVxyXG5cclxuY29uc3QgVXNlckNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFVzZXJDb250ZXh0VHlwZSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKVxyXG5cclxuZXhwb3J0IGNvbnN0IHVzZVVzZXJzID0gKCkgPT4ge1xyXG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KFVzZXJDb250ZXh0KVxyXG4gIGlmIChjb250ZXh0ID09PSB1bmRlZmluZWQpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcigndXNlVXNlcnMgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIFVzZXJQcm92aWRlcicpXHJcbiAgfVxyXG4gIHJldHVybiBjb250ZXh0XHJcbn1cclxuXHJcbmludGVyZmFjZSBVc2VyUHJvdmlkZXJQcm9wcyB7XHJcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgVXNlclByb3ZpZGVyOiBSZWFjdC5GQzxVc2VyUHJvdmlkZXJQcm9wcz4gPSAoeyBjaGlsZHJlbiB9KSA9PiB7XHJcbiAgY29uc3QgW3VzZXJzLCBzZXRVc2Vyc10gPSB1c2VTdGF0ZTxVc2VyW10+KG1vY2tVc2VycylcclxuXHJcbiAgLy8gSW5pdGlhbGl6ZSB1c2VycyBmcm9tIGxvY2FsU3RvcmFnZSBpZiBhdmFpbGFibGVcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgc3RvcmVkVXNlcnMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYW1wZXJlX3VzZXJzJylcclxuICAgICAgaWYgKHN0b3JlZFVzZXJzKSB7XHJcbiAgICAgICAgY29uc3QgcGFyc2VkVXNlcnMgPSBKU09OLnBhcnNlKHN0b3JlZFVzZXJzKVxyXG4gICAgICAgIC8vIFZhbGlkYXRlIHRoYXQgdGhlIGRhdGEgc3RydWN0dXJlIGlzIGNvcnJlY3RcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJzZWRVc2VycykgJiYgcGFyc2VkVXNlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgc2V0VXNlcnMocGFyc2VkVXNlcnMpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIHVzZXJzIGZyb20gbG9jYWxTdG9yYWdlOicsIGVycm9yKVxyXG4gICAgICAvLyBGYWxsIGJhY2sgdG8gbW9jayBkYXRhIGlmIHRoZXJlJ3MgYW4gZXJyb3JcclxuICAgICAgc2V0VXNlcnMobW9ja1VzZXJzKVxyXG4gICAgfVxyXG4gIH0sIFtdKVxyXG5cclxuICAvLyBTYXZlIHVzZXJzIHRvIGxvY2FsU3RvcmFnZSB3aGVuZXZlciB1c2VycyBjaGFuZ2VcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2FtcGVyZV91c2VycycsIEpTT04uc3RyaW5naWZ5KHVzZXJzKSlcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyB1c2VycyB0byBsb2NhbFN0b3JhZ2U6JywgZXJyb3IpXHJcbiAgICB9XHJcbiAgfSwgW3VzZXJzXSlcclxuXHJcbiAgY29uc3QgZ2V0VXNlciA9IChpZDogc3RyaW5nKTogVXNlciB8IHVuZGVmaW5lZCA9PiB7XHJcbiAgICByZXR1cm4gdXNlcnMuZmluZCh1c2VyID0+IHVzZXIuaWQgPT09IGlkKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgcmVmcmVzaFVzZXJzID0gKCkgPT4ge1xyXG4gICAgLy8gUmVmcmVzaCBmcm9tIGxvY2FsU3RvcmFnZSBvciByZXNldCB0byBtb2NrIGRhdGFcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHN0b3JlZFVzZXJzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FtcGVyZV91c2VycycpXHJcbiAgICAgIGlmIChzdG9yZWRVc2Vycykge1xyXG4gICAgICAgIHNldFVzZXJzKEpTT04ucGFyc2Uoc3RvcmVkVXNlcnMpKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNldFVzZXJzKG1vY2tVc2VycylcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVmcmVzaGluZyB1c2VyczonLCBlcnJvcilcclxuICAgICAgc2V0VXNlcnMobW9ja1VzZXJzKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3QgY29udGV4dFZhbHVlOiBVc2VyQ29udGV4dFR5cGUgPSB7XHJcbiAgICB1c2VycyxcclxuICAgIGdldFVzZXIsXHJcbiAgICByZWZyZXNoVXNlcnNcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8VXNlckNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvVXNlckNvbnRleHQuUHJvdmlkZXI+XHJcbiAgKVxyXG59XHJcbiJdLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJtb2NrVXNlcnMiLCJVc2VyQ29udGV4dCIsInVuZGVmaW5lZCIsInVzZVVzZXJzIiwiY29udGV4dCIsIkVycm9yIiwiVXNlclByb3ZpZGVyIiwiY2hpbGRyZW4iLCJ1c2VycyIsInNldFVzZXJzIiwic3RvcmVkVXNlcnMiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicGFyc2VkVXNlcnMiLCJKU09OIiwicGFyc2UiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJlcnJvciIsImNvbnNvbGUiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiZ2V0VXNlciIsImlkIiwiZmluZCIsInVzZXIiLCJyZWZyZXNoVXNlcnMiLCJjb250ZXh0VmFsdWUiLCJQcm92aWRlciIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/UserContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/contexts/VendorContext.tsx":
/*!****************************************!*\
  !*** ./src/contexts/VendorContext.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VendorProvider: function() { return /* binding */ VendorProvider; },\n/* harmony export */   useVendors: function() { return /* binding */ useVendors; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_mock_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/mock-data */ \"(app-pages-browser)/./src/lib/mock-data.ts\");\n/* harmony import */ var _lib_vendor_code_generator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/vendor-code-generator */ \"(app-pages-browser)/./src/lib/vendor-code-generator.ts\");\n/* __next_internal_client_entry_do_not_use__ useVendors,VendorProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst VendorContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nconst useVendors = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(VendorContext);\n    if (context === undefined) {\n        throw new Error(\"useVendors must be used within a VendorProvider\");\n    }\n    return context;\n};\n_s(useVendors, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst VendorProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [vendors, setVendors] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockVendors);\n    // Initialize vendors from localStorage if available\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            const storedVendors = localStorage.getItem(\"ampere_vendors\");\n            if (storedVendors) {\n                const parsedVendors = JSON.parse(storedVendors);\n                // Validate that the data structure is correct\n                if (Array.isArray(parsedVendors) && parsedVendors.length > 0) {\n                    // Migrate existing vendors to include vendorCode if missing\n                    const migratedVendors = migrateVendorsWithCodes(parsedVendors);\n                    setVendors(migratedVendors);\n                }\n            } else {\n                // Ensure mock vendors have codes\n                const migratedMockVendors = migrateVendorsWithCodes(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockVendors);\n                setVendors(migratedMockVendors);\n            }\n        } catch (error) {\n            console.error(\"Error loading vendors from localStorage:\", error);\n            // Fall back to mock data if there's an error\n            const migratedMockVendors = migrateVendorsWithCodes(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockVendors);\n            setVendors(migratedMockVendors);\n        }\n    }, []);\n    // Migration function to ensure all vendors have vendor codes\n    const migrateVendorsWithCodes = (vendorsToMigrate)=>{\n        const migratedVendors = [];\n        let codeCounter = 1;\n        vendorsToMigrate.forEach((vendor)=>{\n            if (!vendor.vendorCode) {\n                // Generate a vendor code for vendors that don't have one\n                const paddedNumber = codeCounter.toString().padStart(3, \"0\");\n                const newVendorCode = \"AMP-V-\".concat(paddedNumber);\n                migratedVendors.push({\n                    ...vendor,\n                    vendorCode: newVendorCode\n                });\n                codeCounter++;\n            } else {\n                migratedVendors.push(vendor);\n                // Update counter based on existing code if valid\n                const existingNumber = extractVendorCodeNumber(vendor.vendorCode);\n                if (existingNumber >= codeCounter) {\n                    codeCounter = existingNumber + 1;\n                }\n            }\n        });\n        return migratedVendors;\n    };\n    // Helper function to extract number from vendor code\n    const extractVendorCodeNumber = (vendorCode)=>{\n        const match = vendorCode.match(/AMP-V-(\\d+)/);\n        return match ? parseInt(match[1], 10) : 0;\n    };\n    // Save vendors to localStorage whenever vendors change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        try {\n            localStorage.setItem(\"ampere_vendors\", JSON.stringify(vendors));\n        } catch (error) {\n            console.error(\"Error saving vendors to localStorage:\", error);\n        }\n    }, [\n        vendors\n    ]);\n    const getVendor = (id)=>{\n        return vendors.find((vendor)=>vendor.id === id);\n    };\n    const addVendor = (vendorData)=>{\n        // Generate a unique ID\n        const newId = (Math.max(...vendors.map((v)=>parseInt(v.id) || 0)) + 1).toString();\n        // Generate auto-running vendor code\n        const vendorCode = (0,_lib_vendor_code_generator__WEBPACK_IMPORTED_MODULE_3__.generateNextVendorCode)(vendors);\n        const newVendor = {\n            id: newId,\n            vendorCode,\n            name: vendorData.name || \"\",\n            category: vendorData.category || \"supplier\",\n            contactPerson: vendorData.contactPerson || \"\",\n            email: vendorData.email || \"\",\n            phone: vendorData.phone || \"\",\n            address: vendorData.address || {\n                street: \"\",\n                postalCode: \"\",\n                district: \"\"\n            },\n            registrationNumber: vendorData.registrationNumber || \"\",\n            gstNumber: vendorData.gstNumber,\n            rating: vendorData.rating || 0,\n            certifications: vendorData.certifications || [],\n            specializations: vendorData.specializations || [],\n            paymentTerms: vendorData.paymentTerms || 30,\n            status: vendorData.status || \"active\",\n            projects: [],\n            createdAt: new Date(),\n            ...vendorData\n        };\n        setVendors((prevVendors)=>[\n                ...prevVendors,\n                newVendor\n            ]);\n        return newVendor;\n    };\n    const updateVendor = (id, updates)=>{\n        setVendors((prevVendors)=>{\n            const index = prevVendors.findIndex((vendor)=>vendor.id === id);\n            if (index === -1) return prevVendors;\n            const updatedVendor = {\n                ...prevVendors[index],\n                ...updates\n            };\n            const newVendors = [\n                ...prevVendors\n            ];\n            newVendors[index] = updatedVendor;\n            return newVendors;\n        });\n        return true;\n    };\n    const deleteVendor = (id)=>{\n        setVendors((prevVendors)=>prevVendors.filter((vendor)=>vendor.id !== id));\n        return true;\n    };\n    const refreshVendors = ()=>{\n        // Refresh from localStorage or reset to mock data\n        try {\n            const storedVendors = localStorage.getItem(\"ampere_vendors\");\n            if (storedVendors) {\n                setVendors(JSON.parse(storedVendors));\n            } else {\n                setVendors(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockVendors);\n            }\n        } catch (error) {\n            console.error(\"Error refreshing vendors:\", error);\n            setVendors(_lib_mock_data__WEBPACK_IMPORTED_MODULE_2__.mockVendors);\n        }\n    };\n    const value = {\n        vendors,\n        getVendor,\n        addVendor,\n        updateVendor,\n        deleteVendor,\n        refreshVendors\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(VendorContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\stamm\\\\AMPERE WEBAPP\\\\src\\\\contexts\\\\VendorContext.tsx\",\n        lineNumber: 190,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(VendorProvider, \"JFEAJTCy8ezIbtzG6ZmySQ1tkkg=\");\n_c = VendorProvider;\nvar _c;\n$RefreshReg$(_c, \"VendorProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/VendorContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/client-code-generator.ts":
/*!******************************************!*\
  !*** ./src/lib/client-code-generator.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clientCodeExists: function() { return /* binding */ clientCodeExists; },\n/* harmony export */   extractClientCodeNumber: function() { return /* binding */ extractClientCodeNumber; },\n/* harmony export */   generateNextClientCode: function() { return /* binding */ generateNextClientCode; },\n/* harmony export */   generateUniqueClientCode: function() { return /* binding */ generateUniqueClientCode; },\n/* harmony export */   validateClientCodeFormat: function() { return /* binding */ validateClientCodeFormat; }\n/* harmony export */ });\n// Client Code Generator for Ampere Engineering\n// Generates auto-running client codes in format: AMP-C-XXX\n/**\r\n * Generates the next sequential client code\r\n * Format: AMP-C-001, AMP-C-002, etc.\r\n * @param existingClients Array of existing clients\r\n * @returns Next available client code\r\n */ function generateNextClientCode(existingClients) {\n    const prefix = \"AMP-C-\";\n    // Extract existing code numbers\n    const existingNumbers = existingClients.map((client)=>client.clientCode).filter((code)=>code && code.startsWith(prefix)).map((code)=>{\n        const numberPart = code.replace(prefix, \"\");\n        return parseInt(numberPart, 10);\n    }).filter((num)=>!isNaN(num));\n    // Find the highest existing number\n    const maxNumber = existingNumbers.length > 0 ? Math.max(...existingNumbers) : 0;\n    // Generate next number with leading zeros\n    const nextNumber = maxNumber + 1;\n    const paddedNumber = nextNumber.toString().padStart(3, \"0\");\n    return \"\".concat(prefix).concat(paddedNumber);\n}\n/**\r\n * Validates if a client code follows the correct format\r\n * @param clientCode Client code to validate\r\n * @returns true if valid format\r\n */ function validateClientCodeFormat(clientCode) {\n    const pattern = /^AMP-C-\\d{3}$/;\n    return pattern.test(clientCode);\n}\n/**\r\n * Extracts the number from a client code\r\n * @param clientCode Client code (e.g., \"AMP-C-001\")\r\n * @returns Number part (e.g., 1) or 0 if invalid\r\n */ function extractClientCodeNumber(clientCode) {\n    if (!validateClientCodeFormat(clientCode)) {\n        return 0;\n    }\n    const numberPart = clientCode.replace(\"AMP-C-\", \"\");\n    return parseInt(numberPart, 10);\n}\n/**\r\n * Checks if a client code already exists\r\n * @param clientCode Code to check\r\n * @param existingClients Array of existing clients\r\n * @returns true if code already exists\r\n */ function clientCodeExists(clientCode, existingClients) {\n    return existingClients.some((client)=>client.clientCode === clientCode);\n}\n/**\r\n * Generates a client code ensuring uniqueness\r\n * @param existingClients Array of existing clients\r\n * @param preferredNumber Optional preferred number (will use next available if not available)\r\n * @returns Unique client code\r\n */ function generateUniqueClientCode(existingClients, preferredNumber) {\n    const prefix = \"AMP-C-\";\n    if (preferredNumber) {\n        const paddedNumber = preferredNumber.toString().padStart(3, \"0\");\n        const preferredCode = \"\".concat(prefix).concat(paddedNumber);\n        if (!clientCodeExists(preferredCode, existingClients)) {\n            return preferredCode;\n        }\n    }\n    // Fall back to next sequential number\n    return generateNextClientCode(existingClients);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvY2xpZW50LWNvZGUtZ2VuZXJhdG9yLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsK0NBQStDO0FBQy9DLDJEQUEyRDtBQUkzRDs7Ozs7Q0FLQyxHQUNNLFNBQVNBLHVCQUF1QkMsZUFBeUI7SUFDOUQsTUFBTUMsU0FBUztJQUVmLGdDQUFnQztJQUNoQyxNQUFNQyxrQkFBa0JGLGdCQUNyQkcsR0FBRyxDQUFDQyxDQUFBQSxTQUFVQSxPQUFPQyxVQUFVLEVBQy9CQyxNQUFNLENBQUNDLENBQUFBLE9BQVFBLFFBQVFBLEtBQUtDLFVBQVUsQ0FBQ1AsU0FDdkNFLEdBQUcsQ0FBQ0ksQ0FBQUE7UUFDSCxNQUFNRSxhQUFhRixLQUFLRyxPQUFPLENBQUNULFFBQVE7UUFDeEMsT0FBT1UsU0FBU0YsWUFBWTtJQUM5QixHQUNDSCxNQUFNLENBQUNNLENBQUFBLE1BQU8sQ0FBQ0MsTUFBTUQ7SUFFeEIsbUNBQW1DO0lBQ25DLE1BQU1FLFlBQVlaLGdCQUFnQmEsTUFBTSxHQUFHLElBQUlDLEtBQUtDLEdBQUcsSUFBSWYsbUJBQW1CO0lBRTlFLDBDQUEwQztJQUMxQyxNQUFNZ0IsYUFBYUosWUFBWTtJQUMvQixNQUFNSyxlQUFlRCxXQUFXRSxRQUFRLEdBQUdDLFFBQVEsQ0FBQyxHQUFHO0lBRXZELE9BQU8sR0FBWUYsT0FBVGxCLFFBQXNCLE9BQWJrQjtBQUNyQjtBQUVBOzs7O0NBSUMsR0FDTSxTQUFTRyx5QkFBeUJqQixVQUFrQjtJQUN6RCxNQUFNa0IsVUFBVTtJQUNoQixPQUFPQSxRQUFRQyxJQUFJLENBQUNuQjtBQUN0QjtBQUVBOzs7O0NBSUMsR0FDTSxTQUFTb0Isd0JBQXdCcEIsVUFBa0I7SUFDeEQsSUFBSSxDQUFDaUIseUJBQXlCakIsYUFBYTtRQUN6QyxPQUFPO0lBQ1Q7SUFFQSxNQUFNSSxhQUFhSixXQUFXSyxPQUFPLENBQUMsVUFBVTtJQUNoRCxPQUFPQyxTQUFTRixZQUFZO0FBQzlCO0FBRUE7Ozs7O0NBS0MsR0FDTSxTQUFTaUIsaUJBQWlCckIsVUFBa0IsRUFBRUwsZUFBeUI7SUFDNUUsT0FBT0EsZ0JBQWdCMkIsSUFBSSxDQUFDdkIsQ0FBQUEsU0FBVUEsT0FBT0MsVUFBVSxLQUFLQTtBQUM5RDtBQUVBOzs7OztDQUtDLEdBQ00sU0FBU3VCLHlCQUF5QjVCLGVBQXlCLEVBQUU2QixlQUF3QjtJQUMxRixNQUFNNUIsU0FBUztJQUVmLElBQUk0QixpQkFBaUI7UUFDbkIsTUFBTVYsZUFBZVUsZ0JBQWdCVCxRQUFRLEdBQUdDLFFBQVEsQ0FBQyxHQUFHO1FBQzVELE1BQU1TLGdCQUFnQixHQUFZWCxPQUFUbEIsUUFBc0IsT0FBYmtCO1FBRWxDLElBQUksQ0FBQ08saUJBQWlCSSxlQUFlOUIsa0JBQWtCO1lBQ3JELE9BQU84QjtRQUNUO0lBQ0Y7SUFFQSxzQ0FBc0M7SUFDdEMsT0FBTy9CLHVCQUF1QkM7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2xpYi9jbGllbnQtY29kZS1nZW5lcmF0b3IudHM/NTZiNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDbGllbnQgQ29kZSBHZW5lcmF0b3IgZm9yIEFtcGVyZSBFbmdpbmVlcmluZ1xyXG4vLyBHZW5lcmF0ZXMgYXV0by1ydW5uaW5nIGNsaWVudCBjb2RlcyBpbiBmb3JtYXQ6IEFNUC1DLVhYWFxyXG5cclxuaW1wb3J0IHsgQ2xpZW50IH0gZnJvbSAnQC90eXBlcydcclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgdGhlIG5leHQgc2VxdWVudGlhbCBjbGllbnQgY29kZVxyXG4gKiBGb3JtYXQ6IEFNUC1DLTAwMSwgQU1QLUMtMDAyLCBldGMuXHJcbiAqIEBwYXJhbSBleGlzdGluZ0NsaWVudHMgQXJyYXkgb2YgZXhpc3RpbmcgY2xpZW50c1xyXG4gKiBAcmV0dXJucyBOZXh0IGF2YWlsYWJsZSBjbGllbnQgY29kZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlTmV4dENsaWVudENvZGUoZXhpc3RpbmdDbGllbnRzOiBDbGllbnRbXSk6IHN0cmluZyB7XHJcbiAgY29uc3QgcHJlZml4ID0gJ0FNUC1DLSdcclxuICBcclxuICAvLyBFeHRyYWN0IGV4aXN0aW5nIGNvZGUgbnVtYmVyc1xyXG4gIGNvbnN0IGV4aXN0aW5nTnVtYmVycyA9IGV4aXN0aW5nQ2xpZW50c1xyXG4gICAgLm1hcChjbGllbnQgPT4gY2xpZW50LmNsaWVudENvZGUpXHJcbiAgICAuZmlsdGVyKGNvZGUgPT4gY29kZSAmJiBjb2RlLnN0YXJ0c1dpdGgocHJlZml4KSlcclxuICAgIC5tYXAoY29kZSA9PiB7XHJcbiAgICAgIGNvbnN0IG51bWJlclBhcnQgPSBjb2RlLnJlcGxhY2UocHJlZml4LCAnJylcclxuICAgICAgcmV0dXJuIHBhcnNlSW50KG51bWJlclBhcnQsIDEwKVxyXG4gICAgfSlcclxuICAgIC5maWx0ZXIobnVtID0+ICFpc05hTihudW0pKVxyXG4gIFxyXG4gIC8vIEZpbmQgdGhlIGhpZ2hlc3QgZXhpc3RpbmcgbnVtYmVyXHJcbiAgY29uc3QgbWF4TnVtYmVyID0gZXhpc3RpbmdOdW1iZXJzLmxlbmd0aCA+IDAgPyBNYXRoLm1heCguLi5leGlzdGluZ051bWJlcnMpIDogMFxyXG4gIFxyXG4gIC8vIEdlbmVyYXRlIG5leHQgbnVtYmVyIHdpdGggbGVhZGluZyB6ZXJvc1xyXG4gIGNvbnN0IG5leHROdW1iZXIgPSBtYXhOdW1iZXIgKyAxXHJcbiAgY29uc3QgcGFkZGVkTnVtYmVyID0gbmV4dE51bWJlci50b1N0cmluZygpLnBhZFN0YXJ0KDMsICcwJylcclxuICBcclxuICByZXR1cm4gYCR7cHJlZml4fSR7cGFkZGVkTnVtYmVyfWBcclxufVxyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyBpZiBhIGNsaWVudCBjb2RlIGZvbGxvd3MgdGhlIGNvcnJlY3QgZm9ybWF0XHJcbiAqIEBwYXJhbSBjbGllbnRDb2RlIENsaWVudCBjb2RlIHRvIHZhbGlkYXRlXHJcbiAqIEByZXR1cm5zIHRydWUgaWYgdmFsaWQgZm9ybWF0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDbGllbnRDb2RlRm9ybWF0KGNsaWVudENvZGU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gIGNvbnN0IHBhdHRlcm4gPSAvXkFNUC1DLVxcZHszfSQvXHJcbiAgcmV0dXJuIHBhdHRlcm4udGVzdChjbGllbnRDb2RlKVxyXG59XHJcblxyXG4vKipcclxuICogRXh0cmFjdHMgdGhlIG51bWJlciBmcm9tIGEgY2xpZW50IGNvZGVcclxuICogQHBhcmFtIGNsaWVudENvZGUgQ2xpZW50IGNvZGUgKGUuZy4sIFwiQU1QLUMtMDAxXCIpXHJcbiAqIEByZXR1cm5zIE51bWJlciBwYXJ0IChlLmcuLCAxKSBvciAwIGlmIGludmFsaWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0Q2xpZW50Q29kZU51bWJlcihjbGllbnRDb2RlOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gIGlmICghdmFsaWRhdGVDbGllbnRDb2RlRm9ybWF0KGNsaWVudENvZGUpKSB7XHJcbiAgICByZXR1cm4gMFxyXG4gIH1cclxuICBcclxuICBjb25zdCBudW1iZXJQYXJ0ID0gY2xpZW50Q29kZS5yZXBsYWNlKCdBTVAtQy0nLCAnJylcclxuICByZXR1cm4gcGFyc2VJbnQobnVtYmVyUGFydCwgMTApXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYSBjbGllbnQgY29kZSBhbHJlYWR5IGV4aXN0c1xyXG4gKiBAcGFyYW0gY2xpZW50Q29kZSBDb2RlIHRvIGNoZWNrXHJcbiAqIEBwYXJhbSBleGlzdGluZ0NsaWVudHMgQXJyYXkgb2YgZXhpc3RpbmcgY2xpZW50c1xyXG4gKiBAcmV0dXJucyB0cnVlIGlmIGNvZGUgYWxyZWFkeSBleGlzdHNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGllbnRDb2RlRXhpc3RzKGNsaWVudENvZGU6IHN0cmluZywgZXhpc3RpbmdDbGllbnRzOiBDbGllbnRbXSk6IGJvb2xlYW4ge1xyXG4gIHJldHVybiBleGlzdGluZ0NsaWVudHMuc29tZShjbGllbnQgPT4gY2xpZW50LmNsaWVudENvZGUgPT09IGNsaWVudENvZGUpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSBjbGllbnQgY29kZSBlbnN1cmluZyB1bmlxdWVuZXNzXHJcbiAqIEBwYXJhbSBleGlzdGluZ0NsaWVudHMgQXJyYXkgb2YgZXhpc3RpbmcgY2xpZW50c1xyXG4gKiBAcGFyYW0gcHJlZmVycmVkTnVtYmVyIE9wdGlvbmFsIHByZWZlcnJlZCBudW1iZXIgKHdpbGwgdXNlIG5leHQgYXZhaWxhYmxlIGlmIG5vdCBhdmFpbGFibGUpXHJcbiAqIEByZXR1cm5zIFVuaXF1ZSBjbGllbnQgY29kZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVW5pcXVlQ2xpZW50Q29kZShleGlzdGluZ0NsaWVudHM6IENsaWVudFtdLCBwcmVmZXJyZWROdW1iZXI/OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gIGNvbnN0IHByZWZpeCA9ICdBTVAtQy0nXHJcbiAgXHJcbiAgaWYgKHByZWZlcnJlZE51bWJlcikge1xyXG4gICAgY29uc3QgcGFkZGVkTnVtYmVyID0gcHJlZmVycmVkTnVtYmVyLnRvU3RyaW5nKCkucGFkU3RhcnQoMywgJzAnKVxyXG4gICAgY29uc3QgcHJlZmVycmVkQ29kZSA9IGAke3ByZWZpeH0ke3BhZGRlZE51bWJlcn1gXHJcbiAgICBcclxuICAgIGlmICghY2xpZW50Q29kZUV4aXN0cyhwcmVmZXJyZWRDb2RlLCBleGlzdGluZ0NsaWVudHMpKSB7XHJcbiAgICAgIHJldHVybiBwcmVmZXJyZWRDb2RlXHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8vIEZhbGwgYmFjayB0byBuZXh0IHNlcXVlbnRpYWwgbnVtYmVyXHJcbiAgcmV0dXJuIGdlbmVyYXRlTmV4dENsaWVudENvZGUoZXhpc3RpbmdDbGllbnRzKVxyXG59Il0sIm5hbWVzIjpbImdlbmVyYXRlTmV4dENsaWVudENvZGUiLCJleGlzdGluZ0NsaWVudHMiLCJwcmVmaXgiLCJleGlzdGluZ051bWJlcnMiLCJtYXAiLCJjbGllbnQiLCJjbGllbnRDb2RlIiwiZmlsdGVyIiwiY29kZSIsInN0YXJ0c1dpdGgiLCJudW1iZXJQYXJ0IiwicmVwbGFjZSIsInBhcnNlSW50IiwibnVtIiwiaXNOYU4iLCJtYXhOdW1iZXIiLCJsZW5ndGgiLCJNYXRoIiwibWF4IiwibmV4dE51bWJlciIsInBhZGRlZE51bWJlciIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJ2YWxpZGF0ZUNsaWVudENvZGVGb3JtYXQiLCJwYXR0ZXJuIiwidGVzdCIsImV4dHJhY3RDbGllbnRDb2RlTnVtYmVyIiwiY2xpZW50Q29kZUV4aXN0cyIsInNvbWUiLCJnZW5lcmF0ZVVuaXF1ZUNsaWVudENvZGUiLCJwcmVmZXJyZWROdW1iZXIiLCJwcmVmZXJyZWRDb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/client-code-generator.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/mock-data.ts":
/*!******************************!*\
  !*** ./src/lib/mock-data.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mockClients: function() { return /* binding */ mockClients; },\n/* harmony export */   mockDashboardMetrics: function() { return /* binding */ mockDashboardMetrics; },\n/* harmony export */   mockInvoices: function() { return /* binding */ mockInvoices; },\n/* harmony export */   mockPayments: function() { return /* binding */ mockPayments; },\n/* harmony export */   mockProjects: function() { return /* binding */ mockProjects; },\n/* harmony export */   mockQuotations: function() { return /* binding */ mockQuotations; },\n/* harmony export */   mockReports: function() { return /* binding */ mockReports; },\n/* harmony export */   mockTenders: function() { return /* binding */ mockTenders; },\n/* harmony export */   mockUsers: function() { return /* binding */ mockUsers; },\n/* harmony export */   mockVendors: function() { return /* binding */ mockVendors; }\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(app-pages-browser)/./src/types/index.ts\");\n\n// Mock Users\nconst mockUsers = [\n    {\n        id: \"1\",\n        name: \"John Tan\",\n        email: \"john.tan@ampere.com.sg\",\n        role: \"super_admin\",\n        avatar: \"/avatars/john.jpg\",\n        isActive: true,\n        createdAt: new Date(\"2023-01-15\"),\n        lastLogin: new Date(\"2024-08-22T08:30:00\"),\n        permissions: _types__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PERMISSIONS.super_admin,\n        assignedProjects: [],\n        department: \"Management\"\n    },\n    {\n        id: \"6\",\n        name: \"Zack\",\n        email: \"zack@ampere.com.sg\",\n        role: \"super_admin\",\n        isActive: true,\n        createdAt: new Date(\"2024-08-22\"),\n        lastLogin: new Date(\"2024-08-22T10:00:00\"),\n        permissions: _types__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PERMISSIONS.super_admin,\n        assignedProjects: [],\n        department: \"Management\"\n    },\n    {\n        id: \"2\",\n        name: \"Sarah Lim\",\n        email: \"sarah.lim@ampere.com.sg\",\n        role: \"admin\",\n        isActive: true,\n        createdAt: new Date(\"2023-02-01\"),\n        lastLogin: new Date(\"2024-08-22T09:15:00\"),\n        permissions: _types__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PERMISSIONS.admin,\n        assignedProjects: [],\n        department: \"Operations\"\n    },\n    {\n        id: \"3\",\n        name: \"David Wong\",\n        email: \"david.wong@ampere.com.sg\",\n        role: \"projects\",\n        isActive: true,\n        createdAt: new Date(\"2023-03-10\"),\n        lastLogin: new Date(\"2024-08-21T16:45:00\"),\n        permissions: _types__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PERMISSIONS.projects,\n        assignedProjects: [\n            \"1\",\n            \"2\",\n            \"3\"\n        ],\n        department: \"Project Management\"\n    },\n    {\n        id: \"4\",\n        name: \"Michelle Chen\",\n        email: \"michelle.chen@ampere.com.sg\",\n        role: \"finance\",\n        isActive: true,\n        createdAt: new Date(\"2023-04-05\"),\n        lastLogin: new Date(\"2024-08-22T07:20:00\"),\n        permissions: _types__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PERMISSIONS.finance,\n        assignedProjects: [],\n        department: \"Finance\"\n    },\n    {\n        id: \"5\",\n        name: \"Robert Kumar\",\n        email: \"robert.kumar@ampere.com.sg\",\n        role: \"sales\",\n        isActive: true,\n        createdAt: new Date(\"2023-05-20\"),\n        lastLogin: new Date(\"2024-08-21T18:30:00\"),\n        permissions: _types__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PERMISSIONS.sales,\n        assignedProjects: [],\n        department: \"Sales & Marketing\"\n    }\n];\n// Mock Clients\nconst mockClients = [\n    {\n        id: \"1\",\n        clientCode: \"AMP-C-001\",\n        name: \"Marina Bay Residences\",\n        type: \"private_developer\",\n        contactPerson: \"Alex Ng\",\n        email: \"alex.ng@marinabay.com.sg\",\n        phone: \"+65 6234 5678\",\n        address: {\n            street: \"10 Marina Boulevard\",\n            building: \"Marina Bay Financial Centre\",\n            unit: \"#25-01\",\n            postalCode: \"018983\",\n            district: \"Downtown Core\"\n        },\n        registrationNumber: \"201234567K\",\n        gstNumber: \"201234567K\",\n        creditLimit: 500000,\n        paymentTerms: 30,\n        status: \"active\",\n        projects: [\n            \"1\",\n            \"2\"\n        ],\n        createdAt: new Date(\"2023-06-15\"),\n        notes: \"Premium developer, excellent payment record\"\n    },\n    {\n        id: \"2\",\n        clientCode: \"AMP-C-002\",\n        name: \"HDB Jurong Point\",\n        type: \"government\",\n        contactPerson: \"Jennifer Teo\",\n        email: \"jennifer.teo@hdb.gov.sg\",\n        phone: \"+65 6490 1234\",\n        address: {\n            street: \"480 Lorong 6 Toa Payoh\",\n            building: \"HDB Hub\",\n            unit: \"East Wing #06-01\",\n            postalCode: \"310480\",\n            district: \"Toa Payoh\"\n        },\n        registrationNumber: \"HDB001\",\n        paymentTerms: 45,\n        status: \"active\",\n        projects: [\n            \"3\"\n        ],\n        createdAt: new Date(\"2023-07-20\")\n    },\n    {\n        id: \"3\",\n        clientCode: \"AMP-C-003\",\n        name: \"Golden Dragon Restaurant\",\n        type: \"corporate\",\n        contactPerson: \"Peter Lim\",\n        email: \"peter@goldendragon.sg\",\n        phone: \"+65 6234 8899\",\n        address: {\n            street: \"123 Orchard Road\",\n            building: \"Orchard Shopping Centre\",\n            unit: \"#03-15\",\n            postalCode: \"238858\",\n            district: \"Orchard\"\n        },\n        registrationNumber: \"202345678M\",\n        gstNumber: \"202345678M\",\n        creditLimit: 150000,\n        paymentTerms: 14,\n        status: \"active\",\n        projects: [\n            \"4\"\n        ],\n        createdAt: new Date(\"2023-08-10\")\n    }\n];\n// Mock Projects\nconst mockProjects = [\n    {\n        id: \"1\",\n        name: \"Marina Bay Condo A&A Works\",\n        clientId: \"1\",\n        type: \"addition_alteration\",\n        status: \"in_progress\",\n        description: \"Addition and alteration works for luxury condominium units including kitchen renovation and bathroom upgrades\",\n        location: {\n            street: \"10 Marina Boulevard\",\n            building: \"Marina Bay Residences\",\n            unit: \"Various units\",\n            postalCode: \"018983\",\n            district: \"Downtown Core\"\n        },\n        contractValue: 450000,\n        estimatedCost: 380000,\n        actualCost: 285000,\n        startDate: new Date(\"2024-06-01\"),\n        expectedEndDate: new Date(\"2024-10-15\"),\n        projectManager: \"3\",\n        team: [\n            \"3\",\n            \"2\"\n        ],\n        permits: [],\n        milestones: [],\n        vendors: [],\n        documents: [],\n        createdAt: new Date(\"2024-05-15\"),\n        updatedAt: new Date(\"2024-08-20\")\n    },\n    {\n        id: \"2\",\n        name: \"Marina Bay Office Fitout\",\n        clientId: \"1\",\n        type: \"renovation\",\n        status: \"planning\",\n        description: \"Complete office renovation and fitout for Grade A office space\",\n        location: {\n            street: \"10 Marina Boulevard\",\n            building: \"Marina Bay Financial Centre\",\n            unit: \"#25-01\",\n            postalCode: \"018983\",\n            district: \"Downtown Core\"\n        },\n        contractValue: 280000,\n        estimatedCost: 235000,\n        startDate: new Date(\"2024-09-01\"),\n        expectedEndDate: new Date(\"2024-12-31\"),\n        projectManager: \"3\",\n        team: [\n            \"3\"\n        ],\n        permits: [],\n        milestones: [],\n        vendors: [],\n        documents: [],\n        createdAt: new Date(\"2024-07-01\"),\n        updatedAt: new Date(\"2024-08-15\")\n    },\n    {\n        id: \"3\",\n        name: \"HDB Void Deck Upgrading\",\n        clientId: \"2\",\n        type: \"renovation\",\n        status: \"permit_application\",\n        description: \"Upgrading of void deck facilities including flooring, lighting, and seating areas\",\n        location: {\n            street: \"Block 123 Jurong East Street 13\",\n            postalCode: \"600123\",\n            district: \"Jurong East\"\n        },\n        contractValue: 85000,\n        estimatedCost: 72000,\n        startDate: new Date(\"2024-10-01\"),\n        expectedEndDate: new Date(\"2024-12-15\"),\n        projectManager: \"3\",\n        team: [\n            \"3\"\n        ],\n        permits: [],\n        milestones: [],\n        vendors: [],\n        documents: [],\n        createdAt: new Date(\"2024-08-01\"),\n        updatedAt: new Date(\"2024-08-20\")\n    },\n    {\n        id: \"4\",\n        name: \"Restaurant Kitchen Renovation\",\n        clientId: \"3\",\n        type: \"renovation\",\n        status: \"completed\",\n        description: \"Complete kitchen renovation including equipment installation and compliance upgrades\",\n        location: {\n            street: \"123 Orchard Road\",\n            building: \"Orchard Shopping Centre\",\n            unit: \"#03-15\",\n            postalCode: \"238858\",\n            district: \"Orchard\"\n        },\n        contractValue: 120000,\n        estimatedCost: 95000,\n        actualCost: 98000,\n        startDate: new Date(\"2024-03-01\"),\n        expectedEndDate: new Date(\"2024-05-31\"),\n        actualEndDate: new Date(\"2024-06-05\"),\n        projectManager: \"3\",\n        team: [\n            \"3\",\n            \"2\"\n        ],\n        permits: [],\n        milestones: [],\n        vendors: [],\n        documents: [],\n        createdAt: new Date(\"2024-02-15\"),\n        updatedAt: new Date(\"2024-06-05\")\n    }\n];\n// Mock Tenders\nconst mockTenders = [\n    {\n        id: \"1\",\n        title: \"Sentosa Resort Hotel Renovation\",\n        clientId: \"1\",\n        type: \"selective\",\n        status: \"preparing\",\n        description: \"Major renovation works for 200-room luxury resort including guest rooms, lobby, and recreational facilities\",\n        location: {\n            street: \"Sentosa Island\",\n            building: \"Resort World Sentosa\",\n            postalCode: \"098138\",\n            district: \"Sentosa\"\n        },\n        estimatedValue: 2500000,\n        submissionDeadline: new Date(\"2024-09-30\"),\n        startDate: new Date(\"2025-01-15\"),\n        completionDate: new Date(\"2025-08-31\"),\n        requirements: [\n            \"BCA Grade A1 License\",\n            \"Minimum 5 years hotel renovation experience\",\n            \"ISO 9001 certification\",\n            \"Minimum project capacity of $3M\"\n        ],\n        documents: [],\n        competitorCount: 8,\n        winProbability: 65,\n        assignedTo: \"5\",\n        createdAt: new Date(\"2024-08-10\"),\n        updatedAt: new Date(\"2024-08-20\")\n    },\n    {\n        id: \"2\",\n        title: \"Office Tower Upgrade - CBD\",\n        clientId: \"2\",\n        type: \"open\",\n        status: \"submitted\",\n        description: \"Upgrade works for 30-storey office building including lift modernization, ACMV system upgrade, and common area renovation\",\n        location: {\n            street: \"1 Raffles Place\",\n            building: \"One Raffles Place\",\n            postalCode: \"048616\",\n            district: \"Downtown Core\"\n        },\n        estimatedValue: 1800000,\n        submissionDeadline: new Date(\"2024-08-25\"),\n        startDate: new Date(\"2024-11-01\"),\n        completionDate: new Date(\"2025-05-31\"),\n        requirements: [\n            \"BCA Grade A1 License\",\n            \"ACMV specialist certification\",\n            \"Minimum $2M project insurance\"\n        ],\n        documents: [],\n        ourQuotation: \"1\",\n        competitorCount: 12,\n        winProbability: 45,\n        assignedTo: \"5\",\n        createdAt: new Date(\"2024-07-15\"),\n        updatedAt: new Date(\"2024-08-22\")\n    }\n];\n// Mock Quotations\nconst mockQuotations = [\n    {\n        id: \"1\",\n        clientId: \"2\",\n        tenderId: \"2\",\n        quotationNumber: \"AMP-202408-001\",\n        title: \"Office Tower Upgrade - CBD\",\n        description: \"Quotation for comprehensive office building upgrade works\",\n        status: \"sent\",\n        validUntil: new Date(\"2024-09-25\"),\n        items: [\n            {\n                id: \"1\",\n                description: \"Lift modernization (6 passenger lifts)\",\n                quantity: 6,\n                unit: \"units\",\n                unitPrice: 85000,\n                totalPrice: 510000,\n                category: \"Mechanical Works\"\n            },\n            {\n                id: \"2\",\n                description: \"ACMV system upgrade\",\n                quantity: 1,\n                unit: \"lot\",\n                unitPrice: 650000,\n                totalPrice: 650000,\n                category: \"ACMV Works\"\n            },\n            {\n                id: \"3\",\n                description: \"Common area renovation\",\n                quantity: 2500,\n                unit: \"sqm\",\n                unitPrice: 280,\n                totalPrice: 700000,\n                category: \"Renovation Works\"\n            }\n        ],\n        subtotal: 1860000,\n        gst: 130200,\n        totalAmount: 1990200,\n        terms: [\n            \"Prices valid for 30 days\",\n            \"Payment terms: 30 days from invoice date\",\n            \"Work completion: 6 months from commencement\",\n            \"All materials comply with Singapore standards\"\n        ],\n        preparedBy: \"5\",\n        approvedBy: \"2\",\n        sentDate: new Date(\"2024-08-22\"),\n        createdAt: new Date(\"2024-08-20\"),\n        updatedAt: new Date(\"2024-08-22\")\n    },\n    {\n        id: \"2\",\n        clientId: \"3\",\n        quotationNumber: \"AMP-202408-002\",\n        title: \"Restaurant Kitchen Equipment Installation\",\n        description: \"Supply and installation of commercial kitchen equipment\",\n        status: \"accepted\",\n        validUntil: new Date(\"2024-09-15\"),\n        items: [\n            {\n                id: \"1\",\n                description: \"Commercial gas stove (6-burner)\",\n                quantity: 2,\n                unit: \"units\",\n                unitPrice: 8500,\n                totalPrice: 17000,\n                category: \"Kitchen Equipment\"\n            },\n            {\n                id: \"2\",\n                description: \"Industrial refrigeration system\",\n                quantity: 1,\n                unit: \"set\",\n                unitPrice: 25000,\n                totalPrice: 25000,\n                category: \"Refrigeration\"\n            },\n            {\n                id: \"3\",\n                description: \"Exhaust hood and ventilation\",\n                quantity: 1,\n                unit: \"set\",\n                unitPrice: 18000,\n                totalPrice: 18000,\n                category: \"Ventilation\"\n            }\n        ],\n        subtotal: 60000,\n        gst: 4200,\n        totalAmount: 64200,\n        terms: [\n            \"Prices valid for 14 days\",\n            \"Payment: 50% upon order, 50% upon completion\",\n            \"Installation within 3 weeks\",\n            \"1-year warranty on all equipment\"\n        ],\n        preparedBy: \"5\",\n        approvedBy: \"2\",\n        sentDate: new Date(\"2024-08-15\"),\n        createdAt: new Date(\"2024-08-12\"),\n        updatedAt: new Date(\"2024-08-18\")\n    }\n];\n// Mock Dashboard Metrics\nconst mockDashboardMetrics = {\n    projects: {\n        total: 15,\n        active: 8,\n        completed: 6,\n        delayed: 1\n    },\n    finance: {\n        totalRevenue: 2450000,\n        outstandingInvoices: 185000,\n        profitMargin: 18.5,\n        cashFlow: 425000\n    },\n    tenders: {\n        active: 12,\n        submitted: 5,\n        winRate: 42,\n        averageValue: 850000\n    },\n    clients: {\n        total: 28,\n        active: 24,\n        new: 3\n    }\n};\n// Mock Vendors\nconst mockVendors = [\n    {\n        id: \"1\",\n        vendorCode: \"AMP-V-001\",\n        name: \"Singapore Steel Works Pte Ltd\",\n        category: \"supplier\",\n        contactPerson: \"Rajesh Kumar\",\n        email: \"rajesh@sgsteel.com.sg\",\n        phone: \"+65 6234 5678\",\n        address: {\n            street: \"25 Tuas South Street 1\",\n            postalCode: \"637601\",\n            district: \"Tuas\"\n        },\n        registrationNumber: \"199812345A\",\n        gstNumber: \"199812345A\",\n        rating: 4.2,\n        certifications: [\n            \"ISO 9001\",\n            \"BCA Approved Supplier\"\n        ],\n        specializations: [\n            \"Structural Steel\",\n            \"Reinforcement Bars\",\n            \"Metal Fabrication\"\n        ],\n        paymentTerms: 30,\n        status: \"active\",\n        projects: [\n            \"1\",\n            \"2\"\n        ],\n        createdAt: new Date(\"2020-03-15\")\n    },\n    {\n        id: \"2\",\n        vendorCode: \"AMP-V-002\",\n        name: \"Elite Renovation Specialists\",\n        category: \"subcontractor\",\n        contactPerson: \"Vincent Tan\",\n        email: \"vincent@elitereno.sg\",\n        phone: \"+65 9876 5432\",\n        address: {\n            street: \"15 Kaki Bukit Road 1\",\n            building: \"Kaki Bukit TechHub\",\n            unit: \"#04-08\",\n            postalCode: \"415934\",\n            district: \"Bedok\"\n        },\n        registrationNumber: \"202145678B\",\n        gstNumber: \"202145678B\",\n        rating: 4.7,\n        certifications: [\n            \"BCA Grade L5\",\n            \"CONQUAS Certified\"\n        ],\n        specializations: [\n            \"Interior Renovation\",\n            \"Bathroom Upgrade\",\n            \"Kitchen Renovation\"\n        ],\n        paymentTerms: 21,\n        status: \"active\",\n        projects: [\n            \"1\",\n            \"3\",\n            \"4\"\n        ],\n        createdAt: new Date(\"2021-08-20\")\n    },\n    {\n        id: \"3\",\n        vendorCode: \"AMP-V-003\",\n        name: \"ProBuild Engineering Solutions\",\n        category: \"consultant\",\n        contactPerson: \"Dr. Sarah Wong\",\n        email: \"sarah.wong@probuild.sg\",\n        phone: \"+65 6789 1234\",\n        address: {\n            street: \"50 Science Park Road\",\n            building: \"The Kendall\",\n            unit: \"#12-01\",\n            postalCode: \"117406\",\n            district: \"Queenstown\"\n        },\n        registrationNumber: \"202298765C\",\n        gstNumber: \"202298765C\",\n        rating: 4.9,\n        certifications: [\n            \"ISO 9001\",\n            \"ISO 14001\",\n            \"PE Singapore\"\n        ],\n        specializations: [\n            \"Structural Engineering\",\n            \"Project Management\",\n            \"Building Assessment\"\n        ],\n        paymentTerms: 14,\n        status: \"active\",\n        projects: [\n            \"2\"\n        ],\n        createdAt: new Date(\"2022-05-10\")\n    }\n];\n// Mock Invoices\nconst mockInvoices = [\n    {\n        id: \"1\",\n        invoiceNumber: \"AMP-INV-202408-001\",\n        clientId: \"1\",\n        projectId: \"1\",\n        quotationId: \"1\",\n        amount: 1860000,\n        gstAmount: 130200,\n        totalAmount: 1990200,\n        status: \"sent\",\n        issueDate: new Date(\"2024-08-25\"),\n        dueDate: new Date(\"2024-09-24\"),\n        createdAt: new Date(\"2024-08-25\")\n    },\n    {\n        id: \"2\",\n        invoiceNumber: \"AMP-INV-202408-002\",\n        clientId: \"3\",\n        projectId: \"4\",\n        quotationId: \"2\",\n        amount: 60000,\n        gstAmount: 4200,\n        totalAmount: 64200,\n        status: \"paid\",\n        issueDate: new Date(\"2024-08-16\"),\n        dueDate: new Date(\"2024-08-30\"),\n        paidDate: new Date(\"2024-08-28\"),\n        paymentMethod: \"bank_transfer\",\n        createdAt: new Date(\"2024-08-16\")\n    },\n    {\n        id: \"3\",\n        invoiceNumber: \"AMP-INV-202407-003\",\n        clientId: \"2\",\n        projectId: \"2\",\n        amount: 320000,\n        gstAmount: 22400,\n        totalAmount: 342400,\n        status: \"overdue\",\n        issueDate: new Date(\"2024-07-15\"),\n        dueDate: new Date(\"2024-08-14\"),\n        createdAt: new Date(\"2024-07-15\")\n    },\n    {\n        id: \"4\",\n        invoiceNumber: \"AMP-INV-202408-004\",\n        clientId: \"1\",\n        projectId: \"1\",\n        amount: 450000,\n        gstAmount: 31500,\n        totalAmount: 481500,\n        status: \"paid\",\n        issueDate: new Date(\"2024-08-10\"),\n        dueDate: new Date(\"2024-09-09\"),\n        paidDate: new Date(\"2024-09-05\"),\n        paymentMethod: \"bank_transfer\",\n        createdAt: new Date(\"2024-08-10\")\n    },\n    {\n        id: \"5\",\n        invoiceNumber: \"AMP-INV-202408-005\",\n        clientId: \"4\",\n        amount: 185000,\n        gstAmount: 12950,\n        totalAmount: 197950,\n        status: \"draft\",\n        issueDate: new Date(\"2024-08-22\"),\n        dueDate: new Date(\"2024-09-21\"),\n        createdAt: new Date(\"2024-08-22\")\n    }\n];\n// Mock Payments\nconst mockPayments = [\n    {\n        id: \"1\",\n        invoiceId: \"2\",\n        amount: 64200,\n        method: \"bank_transfer\",\n        reference: \"TXN-20240828-001\",\n        receivedDate: new Date(\"2024-08-28\"),\n        notes: \"Full payment received via bank transfer\"\n    },\n    {\n        id: \"2\",\n        invoiceId: \"4\",\n        amount: 481500,\n        method: \"bank_transfer\",\n        reference: \"TXN-20240905-002\",\n        receivedDate: new Date(\"2024-09-05\"),\n        notes: \"Payment received ahead of schedule\"\n    },\n    {\n        id: \"3\",\n        invoiceId: \"4\",\n        amount: 100000,\n        method: \"bank_transfer\",\n        reference: \"TXN-20240820-003\",\n        receivedDate: new Date(\"2024-08-20\"),\n        notes: \"Partial payment - progress billing\"\n    },\n    {\n        id: \"4\",\n        invoiceId: \"1\",\n        amount: 500000,\n        method: \"cheque\",\n        reference: \"CHQ-20240830-001\",\n        receivedDate: new Date(\"2024-08-30\"),\n        notes: \"Partial payment via company cheque\"\n    }\n];\n// Mock Reports\nconst mockReports = [\n    {\n        id: \"1\",\n        title: \"Q3 2024 Financial Summary\",\n        type: \"financial_summary\",\n        category: \"financial\",\n        description: \"Comprehensive financial overview for Q3 2024 including revenue, expenses, and profitability analysis\",\n        status: \"completed\",\n        generatedBy: \"4\",\n        generatedAt: new Date(\"2024-08-22T09:30:00\"),\n        parameters: {\n            dateRange: {\n                startDate: new Date(\"2024-07-01\"),\n                endDate: new Date(\"2024-09-30\")\n            },\n            filters: {},\n            groupBy: \"month\",\n            includeGST: true\n        },\n        data: {} // Will be generated dynamically\n    },\n    {\n        id: \"2\",\n        title: \"Project Performance Analytics - August 2024\",\n        type: \"project_analytics\",\n        category: \"operational\",\n        description: \"Analysis of project performance, completion rates, and budget variance for August 2024\",\n        status: \"completed\",\n        generatedBy: \"3\",\n        generatedAt: new Date(\"2024-08-20T14:15:00\"),\n        parameters: {\n            dateRange: {\n                startDate: new Date(\"2024-08-01\"),\n                endDate: new Date(\"2024-08-31\")\n            },\n            filters: {\n                projectStatuses: [\n                    \"in_progress\",\n                    \"completed\"\n                ]\n            },\n            groupBy: \"project\"\n        },\n        data: {} // Will be generated dynamically\n    },\n    {\n        id: \"3\",\n        title: \"Client Performance Review - YTD 2024\",\n        type: \"client_performance\",\n        category: \"analytics\",\n        description: \"Year-to-date analysis of client performance, payment patterns, and relationship metrics\",\n        status: \"completed\",\n        generatedBy: \"5\",\n        generatedAt: new Date(\"2024-08-18T11:45:00\"),\n        parameters: {\n            dateRange: {\n                startDate: new Date(\"2024-01-01\"),\n                endDate: new Date(\"2024-08-31\")\n            },\n            filters: {},\n            groupBy: \"client\"\n        },\n        data: {} // Will be generated dynamically\n    },\n    {\n        id: \"4\",\n        title: \"Vendor Analysis Report - Q3 2024\",\n        type: \"vendor_analysis\",\n        category: \"operational\",\n        description: \"Comprehensive vendor performance analysis including ratings, delivery times, and cost efficiency\",\n        status: \"completed\",\n        generatedBy: \"3\",\n        generatedAt: new Date(\"2024-08-15T16:20:00\"),\n        parameters: {\n            dateRange: {\n                startDate: new Date(\"2024-07-01\"),\n                endDate: new Date(\"2024-09-30\")\n            },\n            filters: {},\n            groupBy: \"vendor\"\n        },\n        data: {} // Will be generated dynamically\n    },\n    {\n        id: \"5\",\n        title: \"Tender Success Analysis - H1 2024\",\n        type: \"tender_success\",\n        category: \"analytics\",\n        description: \"Analysis of tender submission success rates, win rates, and competitive positioning for first half of 2024\",\n        status: \"completed\",\n        generatedBy: \"5\",\n        generatedAt: new Date(\"2024-08-10T10:30:00\"),\n        parameters: {\n            dateRange: {\n                startDate: new Date(\"2024-01-01\"),\n                endDate: new Date(\"2024-06-30\")\n            },\n            filters: {\n                projectTypes: [\n                    \"renovation\",\n                    \"addition_alteration\"\n                ]\n            },\n            groupBy: \"month\"\n        },\n        data: {} // Will be generated dynamically\n    },\n    {\n        id: \"6\",\n        title: \"Cash Flow Analysis - August 2024\",\n        type: \"cash_flow\",\n        category: \"financial\",\n        description: \"Monthly cash flow analysis including inflows, outflows, and outstanding receivables\",\n        status: \"completed\",\n        generatedBy: \"4\",\n        generatedAt: new Date(\"2024-08-25T13:15:00\"),\n        parameters: {\n            dateRange: {\n                startDate: new Date(\"2024-08-01\"),\n                endDate: new Date(\"2024-08-31\")\n            },\n            filters: {},\n            includeGST: true\n        },\n        data: {} // Will be generated dynamically\n    },\n    {\n        id: \"7\",\n        title: \"Project Profitability Report - YTD 2024\",\n        type: \"profitability\",\n        category: \"financial\",\n        description: \"Year-to-date profitability analysis by project, client, and project type\",\n        status: \"generating\",\n        generatedBy: \"2\",\n        generatedAt: new Date(\"2024-08-22T15:45:00\"),\n        parameters: {\n            dateRange: {\n                startDate: new Date(\"2024-01-01\"),\n                endDate: new Date(\"2024-08-31\")\n            },\n            filters: {},\n            groupBy: \"project\",\n            includeGST: true\n        },\n        data: {} // Will be generated dynamically\n    },\n    {\n        id: \"8\",\n        title: \"Accounts Receivable Aging Report\",\n        type: \"aging_report\",\n        category: \"financial\",\n        description: \"Analysis of outstanding invoices by aging periods for better cash flow management\",\n        status: \"completed\",\n        generatedBy: \"4\",\n        generatedAt: new Date(\"2024-08-21T08:30:00\"),\n        parameters: {\n            dateRange: {\n                startDate: new Date(\"2024-01-01\"),\n                endDate: new Date(\"2024-08-31\")\n            },\n            filters: {\n                invoiceStatuses: [\n                    \"sent\",\n                    \"overdue\"\n                ]\n            },\n            includeGST: true\n        },\n        data: {} // Will be generated dynamically\n    }\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/mock-data.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/permissions.ts":
/*!********************************!*\
  !*** ./src/lib/permissions.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PermissionService: function() { return /* binding */ PermissionService; }\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(app-pages-browser)/./src/types/index.ts\");\n\n/**\r\n * Permission Service - Centralized utility for checking user permissions\r\n * across the application with fine-grained access control\r\n */ class PermissionService {\n    /**\r\n   * Check if user has permission to access finance module\r\n   */ static canAccessFinance(user) {\n        var _user_permissions_finance, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Super admin and admin can always access finance for oversight\n        if (user.role === \"super_admin\" || user.role === \"admin\") return true;\n        // Finance role can access their own module\n        if (user.role === \"finance\") return true;\n        var _user_permissions_finance_canViewFinance;\n        // Check fine-grained permissions\n        return (_user_permissions_finance_canViewFinance = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_finance = _user_permissions.finance) === null || _user_permissions_finance === void 0 ? void 0 : _user_permissions_finance.canViewFinance) !== null && _user_permissions_finance_canViewFinance !== void 0 ? _user_permissions_finance_canViewFinance : false;\n    }\n    /**\r\n   * Check if user can edit invoices\r\n   */ static canEditInvoices(user) {\n        var _user_permissions_finance, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Super admin can always edit\n        if (user.role === \"super_admin\") return true;\n        var _user_permissions_finance_canEditInvoices;\n        // Check specific permission\n        return (_user_permissions_finance_canEditInvoices = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_finance = _user_permissions.finance) === null || _user_permissions_finance === void 0 ? void 0 : _user_permissions_finance.canEditInvoices) !== null && _user_permissions_finance_canEditInvoices !== void 0 ? _user_permissions_finance_canEditInvoices : false;\n    }\n    /**\r\n   * Check if user can delete invoices\r\n   */ static canDeleteInvoices(user) {\n        var _user_permissions_finance, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Only super admin can delete invoices by default\n        if (user.role === \"super_admin\") return true;\n        var _user_permissions_finance_canDeleteInvoices;\n        // Check specific permission\n        return (_user_permissions_finance_canDeleteInvoices = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_finance = _user_permissions.finance) === null || _user_permissions_finance === void 0 ? void 0 : _user_permissions_finance.canDeleteInvoices) !== null && _user_permissions_finance_canDeleteInvoices !== void 0 ? _user_permissions_finance_canDeleteInvoices : false;\n    }\n    /**\r\n   * Check if user can manage payments\r\n   */ static canManagePayments(user) {\n        var _user_permissions_finance, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Super admin can always manage payments\n        if (user.role === \"super_admin\") return true;\n        var _user_permissions_finance_canManagePayments;\n        // Check specific permission\n        return (_user_permissions_finance_canManagePayments = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_finance = _user_permissions.finance) === null || _user_permissions_finance === void 0 ? void 0 : _user_permissions_finance.canManagePayments) !== null && _user_permissions_finance_canManagePayments !== void 0 ? _user_permissions_finance_canManagePayments : false;\n    }\n    /**\r\n   * Check if user can view a specific project\r\n   */ static canViewProject(user, project) {\n        var _user_permissions_projects, _user_permissions, _user_assignedProjects, _project_team;\n        if (!user || !user.isActive) return false;\n        // Super admin and admin can view all projects\n        if (user.role === \"super_admin\" || user.role === \"admin\") return true;\n        // Check if user can view all projects\n        if ((_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_projects = _user_permissions.projects) === null || _user_permissions_projects === void 0 ? void 0 : _user_permissions_projects.canViewAllProjects) return true;\n        // Check if user is assigned to this specific project\n        if ((_user_assignedProjects = user.assignedProjects) === null || _user_assignedProjects === void 0 ? void 0 : _user_assignedProjects.includes(project.id)) return true;\n        // Check if user is project manager\n        if (project.projectManager === user.id) return true;\n        // Check if user is in project team\n        if ((_project_team = project.team) === null || _project_team === void 0 ? void 0 : _project_team.includes(user.id)) return true;\n        return false;\n    }\n    /**\r\n   * Check if user can edit a specific project\r\n   */ static canEditProject(user, project) {\n        var _user_permissions_projects, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Super admin and admin can edit all projects\n        if (user.role === \"super_admin\" || user.role === \"admin\") return true;\n        // Check if user can edit assigned projects and is assigned to this project\n        if ((_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_projects = _user_permissions.projects) === null || _user_permissions_projects === void 0 ? void 0 : _user_permissions_projects.canEditAssignedProjects) {\n            var _user_assignedProjects, _project_team;\n            return ((_user_assignedProjects = user.assignedProjects) === null || _user_assignedProjects === void 0 ? void 0 : _user_assignedProjects.includes(project.id)) || project.projectManager === user.id || ((_project_team = project.team) === null || _project_team === void 0 ? void 0 : _project_team.includes(user.id));\n        }\n        return false;\n    }\n    /**\r\n   * Check if user can create projects\r\n   */ static canCreateProjects(user) {\n        var _user_permissions_projects, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Super admin and admin can create projects\n        if (user.role === \"super_admin\" || user.role === \"admin\") return true;\n        var _user_permissions_projects_canCreateProjects;\n        // Check specific permission\n        return (_user_permissions_projects_canCreateProjects = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_projects = _user_permissions.projects) === null || _user_permissions_projects === void 0 ? void 0 : _user_permissions_projects.canCreateProjects) !== null && _user_permissions_projects_canCreateProjects !== void 0 ? _user_permissions_projects_canCreateProjects : false;\n    }\n    /**\r\n   * Check if user can delete projects\r\n   */ static canDeleteProjects(user) {\n        var _user_permissions_projects, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Only super admin can delete projects by default\n        if (user.role === \"super_admin\") return true;\n        var _user_permissions_projects_canDeleteProjects;\n        // Check specific permission\n        return (_user_permissions_projects_canDeleteProjects = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_projects = _user_permissions.projects) === null || _user_permissions_projects === void 0 ? void 0 : _user_permissions_projects.canDeleteProjects) !== null && _user_permissions_projects_canDeleteProjects !== void 0 ? _user_permissions_projects_canDeleteProjects : false;\n    }\n    /**\r\n   * Check if user can manage project teams\r\n   */ static canManageProjectTeam(user, project) {\n        var _user_permissions_projects, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Super admin and admin can manage teams\n        if (user.role === \"super_admin\" || user.role === \"admin\") return true;\n        // Project managers can manage their project teams\n        if (project && project.projectManager === user.id) return true;\n        var _user_permissions_projects_canManageTeam;\n        // Check specific permission\n        return (_user_permissions_projects_canManageTeam = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_projects = _user_permissions.projects) === null || _user_permissions_projects === void 0 ? void 0 : _user_permissions_projects.canManageTeam) !== null && _user_permissions_projects_canManageTeam !== void 0 ? _user_permissions_projects_canManageTeam : false;\n    }\n    /**\r\n   * Check if user can view clients\r\n   */ static canViewClients(user) {\n        var _user_permissions_clients, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Most roles can view clients (except projects role which has limited access)\n        if (user.role !== \"projects\") return true;\n        var _user_permissions_clients_canViewClients;\n        // Check specific permission\n        return (_user_permissions_clients_canViewClients = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_clients = _user_permissions.clients) === null || _user_permissions_clients === void 0 ? void 0 : _user_permissions_clients.canViewClients) !== null && _user_permissions_clients_canViewClients !== void 0 ? _user_permissions_clients_canViewClients : true;\n    }\n    /**\r\n   * Check if user can edit clients\r\n   */ static canEditClients(user) {\n        var _user_permissions_clients, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Super admin, admin, and sales can edit clients\n        if ([\n            \"super_admin\",\n            \"admin\",\n            \"sales\"\n        ].includes(user.role)) return true;\n        var _user_permissions_clients_canEditClients;\n        // Check specific permission\n        return (_user_permissions_clients_canEditClients = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_clients = _user_permissions.clients) === null || _user_permissions_clients === void 0 ? void 0 : _user_permissions_clients.canEditClients) !== null && _user_permissions_clients_canEditClients !== void 0 ? _user_permissions_clients_canEditClients : false;\n    }\n    /**\r\n   * Check if user can create clients\r\n   */ static canCreateClients(user) {\n        var _user_permissions_clients, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Super admin, admin, and sales can create clients\n        if ([\n            \"super_admin\",\n            \"admin\",\n            \"sales\"\n        ].includes(user.role)) return true;\n        var _user_permissions_clients_canCreateClients;\n        // Check specific permission\n        return (_user_permissions_clients_canCreateClients = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_clients = _user_permissions.clients) === null || _user_permissions_clients === void 0 ? void 0 : _user_permissions_clients.canCreateClients) !== null && _user_permissions_clients_canCreateClients !== void 0 ? _user_permissions_clients_canCreateClients : false;\n    }\n    /**\r\n   * Check if user can delete clients\r\n   */ static canDeleteClients(user) {\n        var _user_permissions_clients, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Only super admin can delete clients by default\n        if (user.role === \"super_admin\") return true;\n        var _user_permissions_clients_canDeleteClients;\n        // Check specific permission\n        return (_user_permissions_clients_canDeleteClients = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_clients = _user_permissions.clients) === null || _user_permissions_clients === void 0 ? void 0 : _user_permissions_clients.canDeleteClients) !== null && _user_permissions_clients_canDeleteClients !== void 0 ? _user_permissions_clients_canDeleteClients : false;\n    }\n    /**\r\n   * Check if user can manage other users\r\n   */ static canManageUsers(user) {\n        var _user_permissions_system, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Super admin and admin can manage users\n        if ([\n            \"super_admin\",\n            \"admin\"\n        ].includes(user.role)) return true;\n        var _user_permissions_system_canManageUsers;\n        // Check specific permission\n        return (_user_permissions_system_canManageUsers = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_system = _user_permissions.system) === null || _user_permissions_system === void 0 ? void 0 : _user_permissions_system.canManageUsers) !== null && _user_permissions_system_canManageUsers !== void 0 ? _user_permissions_system_canManageUsers : false;\n    }\n    /**\r\n   * Check if user can view audit logs\r\n   */ static canViewAuditLogs(user) {\n        var _user_permissions_system, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Only super admin can view audit logs by default\n        if (user.role === \"super_admin\") return true;\n        var _user_permissions_system_canViewAuditLogs;\n        // Check specific permission\n        return (_user_permissions_system_canViewAuditLogs = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_system = _user_permissions.system) === null || _user_permissions_system === void 0 ? void 0 : _user_permissions_system.canViewAuditLogs) !== null && _user_permissions_system_canViewAuditLogs !== void 0 ? _user_permissions_system_canViewAuditLogs : false;\n    }\n    /**\r\n   * Check if user can manage system settings\r\n   */ static canManageSettings(user) {\n        var _user_permissions_system, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Super admin and admin can manage settings\n        if ([\n            \"super_admin\",\n            \"admin\"\n        ].includes(user.role)) return true;\n        var _user_permissions_system_canManageSettings;\n        // Check specific permission\n        return (_user_permissions_system_canManageSettings = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_system = _user_permissions.system) === null || _user_permissions_system === void 0 ? void 0 : _user_permissions_system.canManageSettings) !== null && _user_permissions_system_canManageSettings !== void 0 ? _user_permissions_system_canManageSettings : false;\n    }\n    /**\r\n   * Check if user can view financial reports\r\n   */ static canViewReports(user) {\n        var _user_permissions_system, _user_permissions;\n        if (!user || !user.isActive) return false;\n        // Super admin, admin, and finance can view reports\n        if ([\n            \"super_admin\",\n            \"admin\",\n            \"finance\"\n        ].includes(user.role)) return true;\n        var _user_permissions_system_canViewReports;\n        // Check specific permission\n        return (_user_permissions_system_canViewReports = (_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_system = _user_permissions.system) === null || _user_permissions_system === void 0 ? void 0 : _user_permissions_system.canViewReports) !== null && _user_permissions_system_canViewReports !== void 0 ? _user_permissions_system_canViewReports : false;\n    }\n    /**\r\n   * Get filtered projects list based on user permissions\r\n   */ static getAccessibleProjects(user, allProjects) {\n        var _user_permissions_projects, _user_permissions;\n        if (!user || !user.isActive) return [];\n        // Super admin and admin can see all projects\n        if (user.role === \"super_admin\" || user.role === \"admin\") {\n            return allProjects;\n        }\n        // If user can view all projects\n        if ((_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_projects = _user_permissions.projects) === null || _user_permissions_projects === void 0 ? void 0 : _user_permissions_projects.canViewAllProjects) {\n            return allProjects;\n        }\n        // Filter projects based on user access\n        return allProjects.filter((project)=>this.canViewProject(user, project));\n    }\n    /**\r\n   * Initialize user permissions based on role\r\n   */ static initializeUserPermissions(role) {\n        return {\n            ..._types__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PERMISSIONS[role]\n        };\n    }\n    /**\r\n   * Check if user has any of the specified roles\r\n   */ static hasAnyRole(user, roles) {\n        if (!user || !user.isActive) return false;\n        return roles.includes(user.role);\n    }\n    /**\r\n   * Check if user is project team member or manager\r\n   */ static isProjectMember(user, project) {\n        var _project_team, _user_assignedProjects;\n        if (!user || !user.isActive) return false;\n        return project.projectManager === user.id || ((_project_team = project.team) === null || _project_team === void 0 ? void 0 : _project_team.includes(user.id)) || ((_user_assignedProjects = user.assignedProjects) === null || _user_assignedProjects === void 0 ? void 0 : _user_assignedProjects.includes(project.id));\n    }\n    /**\r\n   * Get user's accessible project IDs\r\n   */ static getAccessibleProjectIds(user, allProjects) {\n        var _user_permissions_projects, _user_permissions;\n        if (!user || !user.isActive) return [];\n        // Super admin and admin can access all projects\n        if (user.role === \"super_admin\" || user.role === \"admin\") {\n            return allProjects.map((p)=>p.id);\n        }\n        // If user can view all projects\n        if ((_user_permissions = user.permissions) === null || _user_permissions === void 0 ? void 0 : (_user_permissions_projects = _user_permissions.projects) === null || _user_permissions_projects === void 0 ? void 0 : _user_permissions_projects.canViewAllProjects) {\n            return allProjects.map((p)=>p.id);\n        }\n        // Collect accessible project IDs\n        const accessibleIds = new Set();\n        // Add assigned projects\n        if (user.assignedProjects) {\n            user.assignedProjects.forEach((id)=>accessibleIds.add(id));\n        }\n        // Add projects where user is manager or team member\n        allProjects.forEach((project)=>{\n            var _project_team;\n            if (project.projectManager === user.id || ((_project_team = project.team) === null || _project_team === void 0 ? void 0 : _project_team.includes(user.id))) {\n                accessibleIds.add(project.id);\n            }\n        });\n        return Array.from(accessibleIds);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/permissions.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/vendor-code-generator.ts":
/*!******************************************!*\
  !*** ./src/lib/vendor-code-generator.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractVendorCodeNumber: function() { return /* binding */ extractVendorCodeNumber; },\n/* harmony export */   generateNextVendorCode: function() { return /* binding */ generateNextVendorCode; },\n/* harmony export */   generateUniqueVendorCode: function() { return /* binding */ generateUniqueVendorCode; },\n/* harmony export */   validateVendorCodeFormat: function() { return /* binding */ validateVendorCodeFormat; },\n/* harmony export */   vendorCodeExists: function() { return /* binding */ vendorCodeExists; }\n/* harmony export */ });\n// Vendor Code Generator for Ampere Engineering\n// Generates auto-running vendor codes in format: AMP-V-XXX\n/**\r\n * Generates the next sequential vendor code\r\n * Format: AMP-V-001, AMP-V-002, etc.\r\n * @param existingVendors Array of existing vendors\r\n * @returns Next available vendor code\r\n */ function generateNextVendorCode(existingVendors) {\n    const prefix = \"AMP-V-\";\n    // Extract existing code numbers\n    const existingNumbers = existingVendors.map((vendor)=>vendor.vendorCode).filter((code)=>code && code.startsWith(prefix)).map((code)=>{\n        const numberPart = code.replace(prefix, \"\");\n        return parseInt(numberPart, 10);\n    }).filter((num)=>!isNaN(num));\n    // Find the highest existing number\n    const maxNumber = existingNumbers.length > 0 ? Math.max(...existingNumbers) : 0;\n    // Generate next number with leading zeros\n    const nextNumber = maxNumber + 1;\n    const paddedNumber = nextNumber.toString().padStart(3, \"0\");\n    return \"\".concat(prefix).concat(paddedNumber);\n}\n/**\r\n * Validates if a vendor code follows the correct format\r\n * @param vendorCode Vendor code to validate\r\n * @returns true if valid format\r\n */ function validateVendorCodeFormat(vendorCode) {\n    const pattern = /^AMP-V-\\d{3}$/;\n    return pattern.test(vendorCode);\n}\n/**\r\n * Extracts the number from a vendor code\r\n * @param vendorCode Vendor code (e.g., \"AMP-V-001\")\r\n * @returns Number part (e.g., 1) or 0 if invalid\r\n */ function extractVendorCodeNumber(vendorCode) {\n    if (!validateVendorCodeFormat(vendorCode)) {\n        return 0;\n    }\n    const numberPart = vendorCode.replace(\"AMP-V-\", \"\");\n    return parseInt(numberPart, 10);\n}\n/**\r\n * Checks if a vendor code already exists\r\n * @param vendorCode Code to check\r\n * @param existingVendors Array of existing vendors\r\n * @returns true if code already exists\r\n */ function vendorCodeExists(vendorCode, existingVendors) {\n    return existingVendors.some((vendor)=>vendor.vendorCode === vendorCode);\n}\n/**\r\n * Generates a vendor code ensuring uniqueness\r\n * @param existingVendors Array of existing vendors\r\n * @param preferredNumber Optional preferred number (will use next available if not available)\r\n * @returns Unique vendor code\r\n */ function generateUniqueVendorCode(existingVendors, preferredNumber) {\n    const prefix = \"AMP-V-\";\n    if (preferredNumber) {\n        const paddedNumber = preferredNumber.toString().padStart(3, \"0\");\n        const preferredCode = \"\".concat(prefix).concat(paddedNumber);\n        if (!vendorCodeExists(preferredCode, existingVendors)) {\n            return preferredCode;\n        }\n    }\n    // Fall back to next sequential number\n    return generateNextVendorCode(existingVendors);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvdmVuZG9yLWNvZGUtZ2VuZXJhdG9yLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsK0NBQStDO0FBQy9DLDJEQUEyRDtBQUkzRDs7Ozs7Q0FLQyxHQUNNLFNBQVNBLHVCQUF1QkMsZUFBeUI7SUFDOUQsTUFBTUMsU0FBUztJQUVmLGdDQUFnQztJQUNoQyxNQUFNQyxrQkFBa0JGLGdCQUNyQkcsR0FBRyxDQUFDQyxDQUFBQSxTQUFVQSxPQUFPQyxVQUFVLEVBQy9CQyxNQUFNLENBQUNDLENBQUFBLE9BQVFBLFFBQVFBLEtBQUtDLFVBQVUsQ0FBQ1AsU0FDdkNFLEdBQUcsQ0FBQ0ksQ0FBQUE7UUFDSCxNQUFNRSxhQUFhRixLQUFLRyxPQUFPLENBQUNULFFBQVE7UUFDeEMsT0FBT1UsU0FBU0YsWUFBWTtJQUM5QixHQUNDSCxNQUFNLENBQUNNLENBQUFBLE1BQU8sQ0FBQ0MsTUFBTUQ7SUFFeEIsbUNBQW1DO0lBQ25DLE1BQU1FLFlBQVlaLGdCQUFnQmEsTUFBTSxHQUFHLElBQUlDLEtBQUtDLEdBQUcsSUFBSWYsbUJBQW1CO0lBRTlFLDBDQUEwQztJQUMxQyxNQUFNZ0IsYUFBYUosWUFBWTtJQUMvQixNQUFNSyxlQUFlRCxXQUFXRSxRQUFRLEdBQUdDLFFBQVEsQ0FBQyxHQUFHO0lBRXZELE9BQU8sR0FBWUYsT0FBVGxCLFFBQXNCLE9BQWJrQjtBQUNyQjtBQUVBOzs7O0NBSUMsR0FDTSxTQUFTRyx5QkFBeUJqQixVQUFrQjtJQUN6RCxNQUFNa0IsVUFBVTtJQUNoQixPQUFPQSxRQUFRQyxJQUFJLENBQUNuQjtBQUN0QjtBQUVBOzs7O0NBSUMsR0FDTSxTQUFTb0Isd0JBQXdCcEIsVUFBa0I7SUFDeEQsSUFBSSxDQUFDaUIseUJBQXlCakIsYUFBYTtRQUN6QyxPQUFPO0lBQ1Q7SUFFQSxNQUFNSSxhQUFhSixXQUFXSyxPQUFPLENBQUMsVUFBVTtJQUNoRCxPQUFPQyxTQUFTRixZQUFZO0FBQzlCO0FBRUE7Ozs7O0NBS0MsR0FDTSxTQUFTaUIsaUJBQWlCckIsVUFBa0IsRUFBRUwsZUFBeUI7SUFDNUUsT0FBT0EsZ0JBQWdCMkIsSUFBSSxDQUFDdkIsQ0FBQUEsU0FBVUEsT0FBT0MsVUFBVSxLQUFLQTtBQUM5RDtBQUVBOzs7OztDQUtDLEdBQ00sU0FBU3VCLHlCQUF5QjVCLGVBQXlCLEVBQUU2QixlQUF3QjtJQUMxRixNQUFNNUIsU0FBUztJQUVmLElBQUk0QixpQkFBaUI7UUFDbkIsTUFBTVYsZUFBZVUsZ0JBQWdCVCxRQUFRLEdBQUdDLFFBQVEsQ0FBQyxHQUFHO1FBQzVELE1BQU1TLGdCQUFnQixHQUFZWCxPQUFUbEIsUUFBc0IsT0FBYmtCO1FBRWxDLElBQUksQ0FBQ08saUJBQWlCSSxlQUFlOUIsa0JBQWtCO1lBQ3JELE9BQU84QjtRQUNUO0lBQ0Y7SUFFQSxzQ0FBc0M7SUFDdEMsT0FBTy9CLHVCQUF1QkM7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2xpYi92ZW5kb3ItY29kZS1nZW5lcmF0b3IudHM/MDM4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBWZW5kb3IgQ29kZSBHZW5lcmF0b3IgZm9yIEFtcGVyZSBFbmdpbmVlcmluZ1xyXG4vLyBHZW5lcmF0ZXMgYXV0by1ydW5uaW5nIHZlbmRvciBjb2RlcyBpbiBmb3JtYXQ6IEFNUC1WLVhYWFxyXG5cclxuaW1wb3J0IHsgVmVuZG9yIH0gZnJvbSAnQC90eXBlcydcclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgdGhlIG5leHQgc2VxdWVudGlhbCB2ZW5kb3IgY29kZVxyXG4gKiBGb3JtYXQ6IEFNUC1WLTAwMSwgQU1QLVYtMDAyLCBldGMuXHJcbiAqIEBwYXJhbSBleGlzdGluZ1ZlbmRvcnMgQXJyYXkgb2YgZXhpc3RpbmcgdmVuZG9yc1xyXG4gKiBAcmV0dXJucyBOZXh0IGF2YWlsYWJsZSB2ZW5kb3IgY29kZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlTmV4dFZlbmRvckNvZGUoZXhpc3RpbmdWZW5kb3JzOiBWZW5kb3JbXSk6IHN0cmluZyB7XHJcbiAgY29uc3QgcHJlZml4ID0gJ0FNUC1WLSdcclxuICBcclxuICAvLyBFeHRyYWN0IGV4aXN0aW5nIGNvZGUgbnVtYmVyc1xyXG4gIGNvbnN0IGV4aXN0aW5nTnVtYmVycyA9IGV4aXN0aW5nVmVuZG9yc1xyXG4gICAgLm1hcCh2ZW5kb3IgPT4gdmVuZG9yLnZlbmRvckNvZGUpXHJcbiAgICAuZmlsdGVyKGNvZGUgPT4gY29kZSAmJiBjb2RlLnN0YXJ0c1dpdGgocHJlZml4KSlcclxuICAgIC5tYXAoY29kZSA9PiB7XHJcbiAgICAgIGNvbnN0IG51bWJlclBhcnQgPSBjb2RlLnJlcGxhY2UocHJlZml4LCAnJylcclxuICAgICAgcmV0dXJuIHBhcnNlSW50KG51bWJlclBhcnQsIDEwKVxyXG4gICAgfSlcclxuICAgIC5maWx0ZXIobnVtID0+ICFpc05hTihudW0pKVxyXG4gIFxyXG4gIC8vIEZpbmQgdGhlIGhpZ2hlc3QgZXhpc3RpbmcgbnVtYmVyXHJcbiAgY29uc3QgbWF4TnVtYmVyID0gZXhpc3RpbmdOdW1iZXJzLmxlbmd0aCA+IDAgPyBNYXRoLm1heCguLi5leGlzdGluZ051bWJlcnMpIDogMFxyXG4gIFxyXG4gIC8vIEdlbmVyYXRlIG5leHQgbnVtYmVyIHdpdGggbGVhZGluZyB6ZXJvc1xyXG4gIGNvbnN0IG5leHROdW1iZXIgPSBtYXhOdW1iZXIgKyAxXHJcbiAgY29uc3QgcGFkZGVkTnVtYmVyID0gbmV4dE51bWJlci50b1N0cmluZygpLnBhZFN0YXJ0KDMsICcwJylcclxuICBcclxuICByZXR1cm4gYCR7cHJlZml4fSR7cGFkZGVkTnVtYmVyfWBcclxufVxyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyBpZiBhIHZlbmRvciBjb2RlIGZvbGxvd3MgdGhlIGNvcnJlY3QgZm9ybWF0XHJcbiAqIEBwYXJhbSB2ZW5kb3JDb2RlIFZlbmRvciBjb2RlIHRvIHZhbGlkYXRlXHJcbiAqIEByZXR1cm5zIHRydWUgaWYgdmFsaWQgZm9ybWF0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVWZW5kb3JDb2RlRm9ybWF0KHZlbmRvckNvZGU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gIGNvbnN0IHBhdHRlcm4gPSAvXkFNUC1WLVxcZHszfSQvXHJcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh2ZW5kb3JDb2RlKVxyXG59XHJcblxyXG4vKipcclxuICogRXh0cmFjdHMgdGhlIG51bWJlciBmcm9tIGEgdmVuZG9yIGNvZGVcclxuICogQHBhcmFtIHZlbmRvckNvZGUgVmVuZG9yIGNvZGUgKGUuZy4sIFwiQU1QLVYtMDAxXCIpXHJcbiAqIEByZXR1cm5zIE51bWJlciBwYXJ0IChlLmcuLCAxKSBvciAwIGlmIGludmFsaWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0VmVuZG9yQ29kZU51bWJlcih2ZW5kb3JDb2RlOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gIGlmICghdmFsaWRhdGVWZW5kb3JDb2RlRm9ybWF0KHZlbmRvckNvZGUpKSB7XHJcbiAgICByZXR1cm4gMFxyXG4gIH1cclxuICBcclxuICBjb25zdCBudW1iZXJQYXJ0ID0gdmVuZG9yQ29kZS5yZXBsYWNlKCdBTVAtVi0nLCAnJylcclxuICByZXR1cm4gcGFyc2VJbnQobnVtYmVyUGFydCwgMTApXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYSB2ZW5kb3IgY29kZSBhbHJlYWR5IGV4aXN0c1xyXG4gKiBAcGFyYW0gdmVuZG9yQ29kZSBDb2RlIHRvIGNoZWNrXHJcbiAqIEBwYXJhbSBleGlzdGluZ1ZlbmRvcnMgQXJyYXkgb2YgZXhpc3RpbmcgdmVuZG9yc1xyXG4gKiBAcmV0dXJucyB0cnVlIGlmIGNvZGUgYWxyZWFkeSBleGlzdHNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB2ZW5kb3JDb2RlRXhpc3RzKHZlbmRvckNvZGU6IHN0cmluZywgZXhpc3RpbmdWZW5kb3JzOiBWZW5kb3JbXSk6IGJvb2xlYW4ge1xyXG4gIHJldHVybiBleGlzdGluZ1ZlbmRvcnMuc29tZSh2ZW5kb3IgPT4gdmVuZG9yLnZlbmRvckNvZGUgPT09IHZlbmRvckNvZGUpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSB2ZW5kb3IgY29kZSBlbnN1cmluZyB1bmlxdWVuZXNzXHJcbiAqIEBwYXJhbSBleGlzdGluZ1ZlbmRvcnMgQXJyYXkgb2YgZXhpc3RpbmcgdmVuZG9yc1xyXG4gKiBAcGFyYW0gcHJlZmVycmVkTnVtYmVyIE9wdGlvbmFsIHByZWZlcnJlZCBudW1iZXIgKHdpbGwgdXNlIG5leHQgYXZhaWxhYmxlIGlmIG5vdCBhdmFpbGFibGUpXHJcbiAqIEByZXR1cm5zIFVuaXF1ZSB2ZW5kb3IgY29kZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVW5pcXVlVmVuZG9yQ29kZShleGlzdGluZ1ZlbmRvcnM6IFZlbmRvcltdLCBwcmVmZXJyZWROdW1iZXI/OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gIGNvbnN0IHByZWZpeCA9ICdBTVAtVi0nXHJcbiAgXHJcbiAgaWYgKHByZWZlcnJlZE51bWJlcikge1xyXG4gICAgY29uc3QgcGFkZGVkTnVtYmVyID0gcHJlZmVycmVkTnVtYmVyLnRvU3RyaW5nKCkucGFkU3RhcnQoMywgJzAnKVxyXG4gICAgY29uc3QgcHJlZmVycmVkQ29kZSA9IGAke3ByZWZpeH0ke3BhZGRlZE51bWJlcn1gXHJcbiAgICBcclxuICAgIGlmICghdmVuZG9yQ29kZUV4aXN0cyhwcmVmZXJyZWRDb2RlLCBleGlzdGluZ1ZlbmRvcnMpKSB7XHJcbiAgICAgIHJldHVybiBwcmVmZXJyZWRDb2RlXHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8vIEZhbGwgYmFjayB0byBuZXh0IHNlcXVlbnRpYWwgbnVtYmVyXHJcbiAgcmV0dXJuIGdlbmVyYXRlTmV4dFZlbmRvckNvZGUoZXhpc3RpbmdWZW5kb3JzKVxyXG59Il0sIm5hbWVzIjpbImdlbmVyYXRlTmV4dFZlbmRvckNvZGUiLCJleGlzdGluZ1ZlbmRvcnMiLCJwcmVmaXgiLCJleGlzdGluZ051bWJlcnMiLCJtYXAiLCJ2ZW5kb3IiLCJ2ZW5kb3JDb2RlIiwiZmlsdGVyIiwiY29kZSIsInN0YXJ0c1dpdGgiLCJudW1iZXJQYXJ0IiwicmVwbGFjZSIsInBhcnNlSW50IiwibnVtIiwiaXNOYU4iLCJtYXhOdW1iZXIiLCJsZW5ndGgiLCJNYXRoIiwibWF4IiwibmV4dE51bWJlciIsInBhZGRlZE51bWJlciIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJ2YWxpZGF0ZVZlbmRvckNvZGVGb3JtYXQiLCJwYXR0ZXJuIiwidGVzdCIsImV4dHJhY3RWZW5kb3JDb2RlTnVtYmVyIiwidmVuZG9yQ29kZUV4aXN0cyIsInNvbWUiLCJnZW5lcmF0ZVVuaXF1ZVZlbmRvckNvZGUiLCJwcmVmZXJyZWROdW1iZXIiLCJwcmVmZXJyZWRDb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/vendor-code-generator.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/types/index.ts":
/*!****************************!*\
  !*** ./src/types/index.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_PERMISSIONS: function() { return /* binding */ DEFAULT_PERMISSIONS; },\n/* harmony export */   PROJECT_CATEGORIES_SG: function() { return /* binding */ PROJECT_CATEGORIES_SG; },\n/* harmony export */   SINGAPORE_DISTRICTS: function() { return /* binding */ SINGAPORE_DISTRICTS; }\n/* harmony export */ });\n// User and Authentication Types\n// Default permission sets for each role\nconst DEFAULT_PERMISSIONS = {\n    super_admin: {\n        finance: {\n            canViewFinance: true,\n            canEditInvoices: true,\n            canDeleteInvoices: true,\n            canViewReports: true,\n            canManagePayments: true\n        },\n        projects: {\n            canViewAllProjects: true,\n            canEditAssignedProjects: true,\n            canCreateProjects: true,\n            canDeleteProjects: true,\n            canManageTeam: true\n        },\n        clients: {\n            canViewClients: true,\n            canEditClients: true,\n            canCreateClients: true,\n            canDeleteClients: true\n        },\n        system: {\n            canManageUsers: true,\n            canViewAuditLogs: true,\n            canManageSettings: true,\n            canViewReports: true\n        }\n    },\n    admin: {\n        finance: {\n            canViewFinance: true,\n            canEditInvoices: false,\n            canDeleteInvoices: false,\n            canViewReports: true,\n            canManagePayments: false\n        },\n        projects: {\n            canViewAllProjects: true,\n            canEditAssignedProjects: true,\n            canCreateProjects: true,\n            canDeleteProjects: false,\n            canManageTeam: true\n        },\n        clients: {\n            canViewClients: true,\n            canEditClients: true,\n            canCreateClients: true,\n            canDeleteClients: false\n        },\n        system: {\n            canManageUsers: true,\n            canViewAuditLogs: false,\n            canManageSettings: true,\n            canViewReports: true\n        }\n    },\n    finance: {\n        finance: {\n            canViewFinance: true,\n            canEditInvoices: true,\n            canDeleteInvoices: false,\n            canViewReports: true,\n            canManagePayments: true\n        },\n        projects: {\n            canViewAllProjects: false,\n            canEditAssignedProjects: false,\n            canCreateProjects: false,\n            canDeleteProjects: false,\n            canManageTeam: false\n        },\n        clients: {\n            canViewClients: true,\n            canEditClients: false,\n            canCreateClients: false,\n            canDeleteClients: false\n        },\n        system: {\n            canManageUsers: false,\n            canViewAuditLogs: false,\n            canManageSettings: false,\n            canViewReports: true\n        }\n    },\n    projects: {\n        finance: {\n            canViewFinance: false,\n            canEditInvoices: false,\n            canDeleteInvoices: false,\n            canViewReports: false,\n            canManagePayments: false\n        },\n        projects: {\n            canViewAllProjects: false,\n            canEditAssignedProjects: true,\n            canCreateProjects: false,\n            canDeleteProjects: false,\n            canManageTeam: false\n        },\n        clients: {\n            canViewClients: true,\n            canEditClients: false,\n            canCreateClients: false,\n            canDeleteClients: false\n        },\n        system: {\n            canManageUsers: false,\n            canViewAuditLogs: false,\n            canManageSettings: false,\n            canViewReports: false\n        }\n    },\n    sales: {\n        finance: {\n            canViewFinance: false,\n            canEditInvoices: false,\n            canDeleteInvoices: false,\n            canViewReports: false,\n            canManagePayments: false\n        },\n        projects: {\n            canViewAllProjects: false,\n            canEditAssignedProjects: false,\n            canCreateProjects: false,\n            canDeleteProjects: false,\n            canManageTeam: false\n        },\n        clients: {\n            canViewClients: true,\n            canEditClients: true,\n            canCreateClients: true,\n            canDeleteClients: false\n        },\n        system: {\n            canManageUsers: false,\n            canViewAuditLogs: false,\n            canManageSettings: false,\n            canViewReports: false\n        }\n    }\n};\n// Singapore specific enums and constants\nconst SINGAPORE_DISTRICTS = [\n    \"Central\",\n    \"Clementi\",\n    \"Jurong East\",\n    \"Jurong West\",\n    \"Tampines\",\n    \"Bedok\",\n    \"Hougang\",\n    \"Ang Mo Kio\",\n    \"Bishan\",\n    \"Bukit Merah\",\n    \"Bukit Timah\",\n    \"Geylang\",\n    \"Kallang/Whampoa\",\n    \"Marine Parade\",\n    \"Novena\",\n    \"Pasir Ris\",\n    \"Punggol\",\n    \"Queenstown\",\n    \"Sembawang\",\n    \"Sengkang\",\n    \"Serangoon\",\n    \"Toa Payoh\",\n    \"Woodlands\",\n    \"Yishun\",\n    \"Downtown Core\",\n    \"Marina East\",\n    \"Marina South\",\n    \"Museum\",\n    \"Newton\",\n    \"Orchard\",\n    \"Outram\",\n    \"River Valley\",\n    \"Rochor\",\n    \"Singapore River\",\n    \"Straits View\"\n];\nconst PROJECT_CATEGORIES_SG = [\n    \"HDB Renovation\",\n    \"Private Condo A&A\",\n    \"Landed Property Renovation\",\n    \"Commercial Fitout\",\n    \"Office Renovation\",\n    \"Retail Renovation\",\n    \"Restaurant Fitout\",\n    \"Medical Clinic Fitout\",\n    \"Reinstatement Works\",\n    \"Hotel Renovation\",\n    \"School Upgrade\",\n    \"Factory Renovation\"\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/types/index.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"src\\\\app\\\\layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"}":
/*!**************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/font/google/target.css?{"path":"src\\app\\layout.tsx","import":"Inter","arguments":[{"subsets":["latin"]}],"variableName":"inter"} ***!
  \**************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'__Inter_e8ce0c', '__Inter_Fallback_e8ce0c'\",\"fontStyle\":\"normal\"},\"className\":\"__className_e8ce0c\"};\n    if(true) {\n      // 1756026239795\n      var cssReload = __webpack_require__(/*! ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/e1wicGF0aFwiOlwic3JjXFxcXGFwcFxcXFxsYXlvdXQudHN4XCIsXCJpbXBvcnRcIjpcIkludGVyXCIsXCJhcmd1bWVudHNcIjpbe1wic3Vic2V0c1wiOltcImxhdGluXCJdfV0sXCJ2YXJpYWJsZU5hbWVcIjpcImludGVyXCJ9IiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esa0JBQWtCLFNBQVMsZ0ZBQWdGO0FBQzNHLE9BQU8sSUFBVTtBQUNqQjtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLHdNQUFrSCxjQUFjLHNEQUFzRDtBQUNwTixNQUFNLFVBQVU7QUFDaEI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/MTJiNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wic3R5bGVcIjp7XCJmb250RmFtaWx5XCI6XCInX19JbnRlcl9lOGNlMGMnLCAnX19JbnRlcl9GYWxsYmFja19lOGNlMGMnXCIsXCJmb250U3R5bGVcIjpcIm5vcm1hbFwifSxcImNsYXNzTmFtZVwiOlwiX19jbGFzc05hbWVfZThjZTBjXCJ9O1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE3NTYwMjYyMzk3OTVcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiQzovVXNlcnMvc3RhbW0vQU1QRVJFIFdFQkFQUC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcInB1YmxpY1BhdGhcIjpcIi9fbmV4dC9cIixcImVzTW9kdWxlXCI6ZmFsc2UsXCJsb2NhbHNcIjp0cnVlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIFxuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"src\\\\app\\\\layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"}\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nvar enableRenderableContext = false;\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || enableRenderableContext  || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n\n          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  var ref;\n\n  {\n    ref = _ref;\n  }\n\n  var element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // debugInfo contains Server Component debug information.\n\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\nvar didWarnAboutKeySpread = {};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, isStaticChildren, source, self) {\n  {\n    if (!isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    } else {\n      // This is a valid element type.\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      var children = config.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    } // Warn about key spread regardless of whether the type is valid.\n\n\n    if (hasOwnProperty.call(config, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(config).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref')) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    var element = ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    }\n\n    return element;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nvar ownerHasKeyUseWarning = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = getComponentNameFromType(parentType);\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  // TODO: Move this to render phase instead of at element creation.\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar jsxDEV = jsxDEV$1 ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/N2NhMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Cnode_modules%5C%5Cnext%5C%5Cfont%5C%5Cgoogle%5C%5Ctarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%5C%5C%5C%5Capp%5C%5C%5C%5Clayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Capp%5C%5Cglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CAuditLogContext.tsx%22%2C%22ids%22%3A%5B%22AuditLogProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CAuthContext.tsx%22%2C%22ids%22%3A%5B%22AuthProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CClientContext.tsx%22%2C%22ids%22%3A%5B%22ClientProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CFinanceContext.tsx%22%2C%22ids%22%3A%5B%22FinanceProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CProjectContext.tsx%22%2C%22ids%22%3A%5B%22ProjectProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CPurchaseOrderContext.tsx%22%2C%22ids%22%3A%5B%22PurchaseOrderProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CQuotationContext.tsx%22%2C%22ids%22%3A%5B%22QuotationProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CReportsContext.tsx%22%2C%22ids%22%3A%5B%22ReportsProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CSettingsContext.tsx%22%2C%22ids%22%3A%5B%22SettingsProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CTenderContext.tsx%22%2C%22ids%22%3A%5B%22TenderProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CUserContext.tsx%22%2C%22ids%22%3A%5B%22UserProvider%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cstamm%5C%5CAMPERE%20WEBAPP%5C%5Csrc%5C%5Ccontexts%5C%5CVendorContext.tsx%22%2C%22ids%22%3A%5B%22VendorProvider%22%5D%7D&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);